<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UV</title>
      <link href="/posts/UV.html"/>
      <url>/posts/UV.html</url>
      
        <content type="html"><![CDATA[<p>这是一个全能的python包管理工具<br>【全面掌握UV：Python下一代环境管理懒人工具（Python五分钟）】 <a href="https://www.bilibili.com/video/BV15MVdzaEUw/?share_source=copy_web&vd_source=9c987ed6ab5014f976c5bd5305300cc0">https://www.bilibili.com/video/BV15MVdzaEUw/?share_source=copy_web&amp;vd_source=9c987ed6ab5014f976c5bd5305300cc0</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span><br></pre></td></tr></table></figure><h1 id="代替pip"><a href="#代替pip" class="headerlink" title="代替pip"></a>代替pip</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uv run &lt;main.py&gt; 直接运行python文件</span><br><span class="line"></span><br><span class="line">uv add --script 添加依赖到单个python文件</span><br><span class="line"></span><br><span class="line">uv remove --script 删除依赖到单个python文件</span><br></pre></td></tr></table></figure><blockquote><p><code>uv add --script</code> 中的 <code>--script</code> 参数是 uv 工具中一个非常实用的功能，它的核心作用是<strong>为独立的 Python 脚本文件（而非完整的项目）声明和管理依赖</strong>，让脚本能够“自包含”其运行环境信息。</p></blockquote><h1 id="项目管理：代替venv创建虚拟环境"><a href="#项目管理：代替venv创建虚拟环境" class="headerlink" title="项目管理：代替venv创建虚拟环境"></a>项目管理：代替venv创建虚拟环境</h1><p>创建和开发带有 <code>pyproject.toml</code> 的 Python 项目。</p><p><a href="https://uv.doczh.com/guides/projects/">项目开发 | uv 中文文档</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 初始化</span><br><span class="line">uv init hello-world</span><br><span class="line"></span><br><span class="line"># 运行main.py</span><br><span class="line">uv run main.py</span><br><span class="line"></span><br><span class="line"># 添加依赖</span><br><span class="line">uv add requests</span><br><span class="line"># 指定版本约束 </span><br><span class="line">uv add &#x27;requests==2.31.0&#x27;</span><br><span class="line"># 从 `requirements.txt` 添加所有依赖项。 </span><br><span class="line">uv add -r requirements.txt -c constraints.txt</span><br><span class="line"></span><br><span class="line"># 删除依赖</span><br><span class="line">uv remove requests</span><br><span class="line"></span><br><span class="line"># 同步环境，一下下载所需依赖</span><br><span class="line">uv sync</span><br><span class="line"></span><br><span class="line"># 打包构建</span><br><span class="line">uv build</span><br></pre></td></tr></table></figure><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv venv &lt;projectName&gt; --python 3.12</span><br></pre></td></tr></table></figure><blockquote><p>使用默认虚拟环境名称时，uv 在后续调用过程中会自动查找并使用该虚拟环境。</p></blockquote><h1 id="使用UV进行python版本管理"><a href="#使用UV进行python版本管理" class="headerlink" title="使用UV进行python版本管理"></a>使用UV进行python版本管理</h1><p>安装和管理 Python 解释器本身。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`uv python install`: 安装 Python 版本</span><br><span class="line">`uv python list`: 查看可用 Python 版本</span><br><span class="line">`uv python find`: 查找已安装的 Python 版本</span><br><span class="line">`uv python pin`: 将当前项目固定使用特定 Python 版本</span><br><span class="line">`uv python uninstall`: 卸载 Python 版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NVM和Nodejs的版本管理</title>
      <link href="/posts/NVM%E5%92%8CNodejs%E7%9A%84%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/NVM%E5%92%8CNodejs%E7%9A%84%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://nvm.p6p.net/">NVM</a></p><p>NVM指的是Node Version Manager，是一个Node.js的版本管理工具。它允许用户在同一台机器上安装和管理多个Node.js版本。这对于需要在不同的项目中使用不同Node.js版本的开发者来说非常有用。</p><p>以下是NVM的一些主要特点和功能：hexo</p><ol><li><p><strong>版本切换</strong>：允许用户在多个Node.js版本之间快速切换。</p></li><li><p><strong>简易安装</strong>：提供了简单的命令行安装脚本，方便用户安装。</p></li><li><p><strong>独立环境</strong>：每个Node.js版本都安装在其独立的目录中，不会干扰系统的其他Node.js安装。</p></li><li><p><strong>默认版本设置</strong>：可以设置一个默认的Node.js版本，每次打开新的终端窗口时都会使用该版本。</p></li><li><p><strong>兼容性</strong>：支持io.js，以及Node.js的各个LTS（长期支持）版本。<br>使用NVM，开发者可以在测试新版本的应用程序的同时，保持生产环境使用稳定的Node.js版本，从而提高了开发的灵活性和便捷性。<br>安装和使用NVM通常涉及以下步骤：</p></li></ol><h1 id="通过终端运行安装脚本。"><a href="#通过终端运行安装脚本。" class="headerlink" title="通过终端运行安装脚本。"></a>通过终端运行安装脚本。</h1><ul><li><p>使用<code>nvm list available</code>命令安装展示所有版本的Node.js。</p></li><li><p>使用<code>nvm install &lt;version&gt;</code>命令安装特定版本的Node.js。</p></li><li><p>使用<code>nvm use &lt;version&gt;</code>命令切换到特定版本的Node.js。</p></li><li><p>使用<code>nvm alias default &lt;version&gt;</code>设置默认的Node.js版本。</p></li></ul><h1 id="添加镜像仓库"><a href="#添加镜像仓库" class="headerlink" title="添加镜像仓库"></a>添加镜像仓库</h1><h2 id="nvm-切换国内镜像​"><a href="#nvm-切换国内镜像​" class="headerlink" title="nvm 切换国内镜像​"></a>nvm 切换国内镜像<a href="https://nvm.p6p.net/use/mirror.html#nvm-%E5%88%87%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F">​</a></h2><p>如果下载 node 过慢或者安装失败，请更换国内镜像源, 在 <a href="https://nvm.p6p.net/">nvm</a> 的安装路径下，找到 <code>settings.txt</code>文件，设置<code>node_mirror</code>与<code>npm_mirror</code>为国内镜像地址。下载就飞快了~~</p><p>在文件末尾加入：</p><h3 id="阿里云镜像"><a href="#阿里云镜像" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npmmirror.com/mirrors/node/</span><br><span class="line">npm_mirror: https://npmmirror.com/mirrors/npm/</span><br></pre></td></tr></table></figure><h3 id="腾讯云镜像"><a href="#腾讯云镜像" class="headerlink" title="腾讯云镜像"></a>腾讯云镜像</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: http://mirrors.cloud.tencent.com/npm/</span><br><span class="line">npm_mirror: http://mirrors.cloud.tencent.com/nodejs-release/</span><br></pre></td></tr></table></figure><h2 id="命令行切换-注意：请切换国内镜像后再安装-node-版本，否则会很慢-​"><a href="#命令行切换-注意：请切换国内镜像后再安装-node-版本，否则会很慢-​" class="headerlink" title="命令行切换(注意：请切换国内镜像后再安装 node 版本，否则会很慢)​"></a>命令行切换(注意：请切换国内镜像后再安装 node 版本，否则会很慢)<a href="https://nvm.p6p.net/use/mirror.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%87%E6%8D%A2-%E6%B3%A8%E6%84%8F-%E8%AF%B7%E5%88%87%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%90%8E%E5%86%8D%E5%AE%89%E8%A3%85-node-%E7%89%88%E6%9C%AC-%E5%90%A6%E5%88%99%E4%BC%9A%E5%BE%88%E6%85%A2">​</a></h2><h3 id="阿里云镜像-1"><a href="#阿里云镜像-1" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure><h3 id="腾讯云镜像-1"><a href="#腾讯云镜像-1" class="headerlink" title="腾讯云镜像"></a>腾讯云镜像</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm npm_mirror http://mirrors.cloud.tencent.com/npm/</span><br><span class="line">nvm node_mirror http://mirrors.cloud.tencent.com/nodejs-release/</span><br></pre></td></tr></table></figure><blockquote><p>打开链接查看可以 node 版本：<a href="https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pinia状态管理</title>
      <link href="/posts/Pinia%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/Pinia%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<p>在根目录创建一个<code>store</code>文件夹，里面创建<code>js、ts</code>文件</p><p><img src="https://nodaoli-hexo.oss-cn-guangzhou.aliyuncs.com/202511011728925.png" alt="image.png"></p><blockquote><p>如果把<code>state</code>比作实体类的<strong>属性</strong>（如 user 的 name、age），<code>actions</code>比作实体类的<strong>方法</strong>（如修改属性的 setAge、执行业务逻辑的 login），那么<code>getters</code>可以理解为实体类中<strong>带缓存的 “计算属性方法”</strong>—— 它依赖属性（state）计算出新的值，并且只会在依赖变化时重新计算。</p></blockquote><pre><code>- **getters**：用于基于 state 的**派生状态**（如过滤、统计、格式化等），且这个派生状态可能被多次使用（比如在组件模板、其他 getters 中）。利用缓存可以避免重复计算，提升性能。- **方法（actions 或普通函数）**：适合处理**不需要缓存的逻辑**（如单次计算、带参数的动态过滤），或包含**副作用的操作**（如请求接口、修改 state）。</code></pre><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 导入 defineStore 函数，用于定义 Pinia 存储</span><br><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;;</span><br><span class="line">// 导入 ref 函数，用于创建响应式数据</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * defineStore 参数描述：</span><br><span class="line"> * - &#x27;token&#x27;：给状态起名，存储的唯一标识符，用于在应用中引用该存储</span><br><span class="line"> * - () =&gt; (&#123;... &#125;)：一个函数，用于定义存储的内容和操作</span><br><span class="line"> */</span><br><span class="line">export const useTokenStore = defineStore(&#x27;token&#x27;, () =&gt; &#123;</span><br><span class="line">    // 使用 ref 创建一个响应式的 token 变量，初始值为空字符串</span><br><span class="line">    const token = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">    // 定义修改token的方法</span><br><span class="line">    const setToken = (newToken) =&gt; &#123;</span><br><span class="line">        token.value = newToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义移除token的方法</span><br><span class="line">    const removeToken = () =&gt; &#123;</span><br><span class="line">        token.value = &#x27;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回 token 状态和操作</span><br><span class="line">    return &#123; token, setToken, removeToken &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="本地持久化-pinia-plugin-persistedstate"><a href="#本地持久化-pinia-plugin-persistedstate" class="headerlink" title="本地持久化 pinia-plugin-persistedstate"></a>本地持久化 pinia-plugin-persistedstate</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><p><a href="Pinia%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86+949ebd3b-b8fe-4ff8-8706-cc54714418dc/%E9%97%AE%E9%A2%98+4e50e1e2-b036-4b93-9bbc-9e3845fcddcd.md">问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scoop</title>
      <link href="/posts/scoop.html"/>
      <url>/posts/scoop.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://scoop.sh/">scoop.sh</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"><span class="built_in">Invoke-RestMethod</span> <span class="literal">-Uri</span> https://get.scoop.sh | <span class="built_in">Invoke-Expression</span></span><br></pre></td></tr></table></figure><p>默认安装在<code>~\scoop</code></p><h2 id="搜索安装"><a href="#搜索安装" class="headerlink" title="搜索安装"></a>搜索安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; scoop search python</span><br><span class="line">Results from local buckets...</span><br><span class="line"></span><br><span class="line">Name      Version  Source Binaries</span><br><span class="line"><span class="literal">----</span>      <span class="literal">-------</span>  <span class="literal">------</span> <span class="literal">--------</span></span><br><span class="line">python    <span class="number">3.10</span>.<span class="number">5</span>   main</span><br><span class="line">winpython <span class="number">3.10</span>.<span class="number">4.0</span> main</span><br><span class="line"></span><br><span class="line">&gt; scoop install python</span><br><span class="line">...</span><br><span class="line">Creating shim <span class="keyword">for</span> <span class="string">&#x27;python.exe&#x27;</span>.</span><br><span class="line"><span class="string">&#x27;python&#x27;</span> (<span class="number">3.10</span>.<span class="number">5</span>) was installed successfully!</span><br><span class="line"></span><br><span class="line">&gt; python <span class="literal">-c</span> <span class="string">&quot;print(&#x27;Hello from Python installed by Scoop!&#x27;)&quot;</span></span><br><span class="line">Hello from Python installed by Scoop!</span><br></pre></td></tr></table></figure><h2 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop reset openjdk21</span><br></pre></td></tr></table></figure><h2 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update &lt;app&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Obsidian作为Hexo编辑器</title>
      <link href="/posts/%E4%BD%BF%E7%94%A8Obsidian%E4%BD%9C%E4%B8%BAHexo%E7%BC%96%E8%BE%91%E5%99%A8.html"/>
      <url>/posts/%E4%BD%BF%E7%94%A8Obsidian%E4%BD%9C%E4%B8%BAHexo%E7%BC%96%E8%BE%91%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<p>在官方插件中配置<code>date</code>属性</p><blockquote><p>YYYY-MM-DDTHH:mm+08:00</p></blockquote><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><table><thead><tr><th>插件名</th><th align="center">作用</th></tr></thead><tbody><tr><td>Advanced Tables</td><td align="center">表格工具</td></tr><tr><td>Better Word Count</td><td align="center">字数统计</td></tr><tr><td>Editing Toolbar</td><td align="center">编辑器上方快捷工具栏</td></tr><tr><td>Emoji Toolbar</td><td align="center">Emoji表情</td></tr><tr><td>Excalidraw</td><td align="center">超级好用的白板</td></tr><tr><td>Git</td><td align="center">git同步</td></tr><tr><td>Hidden Folder</td><td align="center">隐藏文件夹，例如node_modules</td></tr><tr><td>Tasks</td><td align="center">任务</td></tr><tr><td>Templater</td><td align="center">模板</td></tr><tr><td>Image auto upload</td><td align="center">配合本地Picgo自动上传图片</td></tr></tbody></table><h1 id="Templater模板"><a href="#Templater模板" class="headerlink" title="Templater模板"></a>Templater模板</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &lt;% tp.file.title %&gt;</span><br><span class="line">categories:</span><br><span class="line">  -</span><br><span class="line">tags:</span><br><span class="line">  -</span><br><span class="line">date: &lt;% tp.date.now(format=&quot;YYYY-MM-DDTHH:mm:ss+08:00&quot;) %&gt;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 中配置 Live Template 快速生成日志对象</title>
      <link href="/posts/IntelliJ%20IDEA%20%E4%B8%AD%E9%85%8D%E7%BD%AE%20Live%20Template%20%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E5%AF%B9%E8%B1%A1.html"/>
      <url>/posts/IntelliJ%20IDEA%20%E4%B8%AD%E9%85%8D%E7%BD%AE%20Live%20Template%20%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%97%A5%E5%BF%97%E5%AF%B9%E8%B1%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA-中配置-Live-Template-快速生成日志对象"><a href="#IntelliJ-IDEA-中配置-Live-Template-快速生成日志对象" class="headerlink" title="IntelliJ IDEA 中配置 Live Template 快速生成日志对象"></a>IntelliJ IDEA 中配置 Live Template 快速生成日志对象</h1><p>在 IntelliJ IDEA 中，你可以通过配置<strong>Live Template（代码模板）</strong> 来快速生成日志对象的创建语句。以下是具体的配置方法和使用技巧：</p><h3 id="步骤-1：创建日志模板"><a href="#步骤-1：创建日志模板" class="headerlink" title="步骤 1：创建日志模板"></a><strong>步骤 1：创建日志模板</strong></h3><ol><li><p>打开设置：<code>File &gt; Settings &gt; Editor &gt; Live Templates</code></p></li><li><p>点击右侧的<code>+</code>号，选择<code>Template Group</code>，新建一个分组（例如命名为<code>Custom</code>）</p></li><li><p>选中新建的分组，再次点击<code>+</code>号，选择<code>Live Template</code></p></li><li><p>配置模板：</p></li></ol><ul><li><p><strong>Abbreviation</strong>：设置触发前缀（例如<code>log</code>或<code>logger</code>）</p></li><li><p><strong>Description</strong>：添加描述（例如<code>Create logger instance</code>）</p></li><li><p><strong>Template Text</strong>：输入日志创建代码：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final Logger logger = LoggerFactory.getLogger(\$CLASS\_NAME\$.class);</span><br></pre></td></tr></table></figure><ol><li><p>点击<code>Define</code>，选择适用的上下文（勾选<code>Java &gt; Declaration</code>）</p></li><li><p>点击<code>Edit variables</code>，将<code>$CLASS_NAME$</code>的<code>Expression</code>设置为<code>className()</code>，点击<code>OK</code></p></li></ol><h3 id="步骤-2：使用模板"><a href="#步骤-2：使用模板" class="headerlink" title="步骤 2：使用模板"></a><strong>步骤 2：使用模板</strong></h3><p>在 Java 类中输入你设置的前缀（例如<code>log</code>），然后按<code>Tab</code>键，IDEA 会自动生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final Logger logger = LoggerFactory.getLogger(当前类名.class);</span><br></pre></td></tr></table></figure><h3 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a><strong>进阶配置</strong></h3><ul><li><p><strong>自动导包</strong>：如果<code>Logger</code>或<code>LoggerFactory</code>报红，按<code>Alt + Enter</code>选择导入对应包（<code>org.slf4j.Logger</code>和<code>org.slf4j.LoggerFactory</code>），后续模板会自动复用导入</p></li><li><p><strong>调整模板格式</strong>：可以根据需要修改模板，例如添加<code>final</code>或调整修饰符</p></li><li><p><strong>快捷键修改</strong>：在模板设置中，可将触发键从<code>Tab</code>改为其他键（如<code>Enter</code>）</p></li></ul><p>通过这种方式，只需输入几个字符就能快速生成日志对象，大幅提升开发效率。类似地，你还可以用此方法配置其他常用代码片段（如单例模式、try-catch 块等）。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计划</title>
      <link href="/posts/%E8%AE%A1%E5%88%92.html"/>
      <url>/posts/%E8%AE%A1%E5%88%92.html</url>
      
        <content type="html"><![CDATA[<p>he—</p><h3 id="一、核心调整策略"><a href="#一、核心调整策略" class="headerlink" title="一、核心调整策略"></a><strong>一、核心调整策略</strong></h3><ol><li><strong>技术方向聚焦</strong>：以 <strong>Java（主赛道）</strong> 为核心，结合 <strong>算法竞赛（蓝桥杯&#x2F;ACM）</strong> 和 <strong>软考备考</strong>，舍弃原计划中的Python&#x2F;UE5&#x2F;ESP32（硬件限制大），改为 <strong>Blender（碎片时间创作）</strong> 。</li><li><strong>设备适配</strong>：用 <strong>在线IDE（如Replit、CodeSandbox）</strong> + <strong>手机SSH工具（Termius）</strong> 编程，平板安装 <strong>AidLearning</strong> 运行Linux环境，解决无电脑问题。</li><li><strong>考证优先级</strong>：根据考试时间安排优先级：<strong>英语四级（12月） &gt; 软考中级（11月） &gt; 计算机三级（9月）</strong> 。</li><li><strong>体能训练</strong>：采用 <strong>微习惯法</strong>，从每天5分钟HIIT开始，逐步提升至20分钟。</li></ol><hr><h3 id="二、每日计划表（打工期：4月底-9月底）"><a href="#二、每日计划表（打工期：4月底-9月底）" class="headerlink" title="二、每日计划表（打工期：4月底-9月底）"></a><strong>二、每日计划表（打工期：4月底-9月底）</strong></h3><h4 id="【工作日：每天1-5-2小时】"><a href="#【工作日：每天1-5-2小时】" class="headerlink" title="【工作日：每天1.5-2小时】"></a><strong>【工作日：每天1.5-2小时】</strong></h4><table><thead><tr><th>时间段</th><th>周一、三、五</th><th>周二、四、六</th><th>周日（弹性）</th></tr></thead><tbody><tr><td><strong>早晨20min</strong></td><td>四级词汇+听力（百词斩&#x2F;每日英语听力）</td><td>软考知识点速记（信息系统管理&#x2F;网络技术）</td><td>体能训练（Keep初级HIIT）</td></tr><tr><td><strong>午休15min</strong></td><td>刷LeetCode每日一题（Java实现）</td><td>看Blender教程（平板）</td><td>蓝桥杯填空题练习</td></tr><tr><td><strong>晚间1h</strong></td><td><strong>Java算法专项</strong>（如动态规划&#x2F;DFS）</td><td><strong>软考真题训练</strong>（分模块刷题）</td><td><strong>蓝桥杯模拟赛</strong>（在线OJ）</td></tr><tr><td><strong>通勤&#x2F;碎片</strong></td><td>听技术播客（《代码时间》）</td><td>背软考简答题（Anki卡牌）</td><td>记录灵感（flomo）</td></tr></tbody></table><h4 id="【周末：每天4-5小时】"><a href="#【周末：每天4-5小时】" class="headerlink" title="【周末：每天4-5小时】"></a><strong>【周末：每天4-5小时】</strong></h4><ol><li><strong>周六上午</strong>：限时3小时完成 <strong>蓝桥杯真题模拟</strong>（使用蓝桥云课平台）。</li><li><strong>周六下午</strong>：开发一个 <strong>Java工具类项目</strong>（如Excel解析器、工时统计工具），部署到GitHub。</li><li><strong>周日上午</strong>：<strong>软考综合复习</strong>（重点：软件工程、数据库设计）。</li><li><strong>周日下午</strong>：用Blender制作 <strong>3D作品</strong>（如工厂场景建模），上传ArtStation积累作品集。</li></ol><hr><h3 id="三、细分领域执行方案"><a href="#三、细分领域执行方案" class="headerlink" title="三、细分领域执行方案"></a><strong>三、细分领域执行方案</strong></h3><h4 id="1-蓝桥杯-ACM备赛"><a href="#1-蓝桥杯-ACM备赛" class="headerlink" title="1. 蓝桥杯&#x2F;ACM备赛"></a><strong>1. 蓝桥杯&#x2F;ACM备赛</strong></h4><ul><li><strong>核心路径</strong>：  <ul><li><strong>阶段1（4-5月）</strong>：夯实基础算法（排序、二分、DFS&#x2F;BFS），每天1道LeetCode+1道蓝桥真题。</li><li><strong>阶段2（6-7月）</strong>：突破动态规划（背包&#x2F;树形DP）和图论（Dijkstra&#x2F;并查集），参加牛客周赛。</li><li><strong>阶段3（8-9月）</strong>：专攻 <strong>暴力骗分技巧</strong> + <strong>对拍法</strong>，用Java实现常见模板（如快速幂、前缀和）。</li></ul></li><li><strong>资源推荐</strong>：  <ul><li>蓝桥云课「省赛无忧班」Java组（系统化课程）  </li><li>《算法竞赛入门经典（第2版）》（适合ACM进阶）</li></ul></li></ul><h4 id="2-软考中级（系统设计-软件工程）"><a href="#2-软考中级（系统设计-软件工程）" class="headerlink" title="2. 软考中级（系统设计&#x2F;软件工程）"></a><strong>2. 软考中级（系统设计&#x2F;软件工程）</strong></h4><ul><li><strong>重点模块</strong>：  <ul><li><strong>软件工程</strong>：需求分析、UML图、设计模式（单例&#x2F;工厂）  </li><li><strong>数据库</strong>：ER模型、SQL优化、事务管理  </li><li><strong>计算机网络</strong>：TCP&#x2F;IP协议簇、子网划分</li></ul></li><li><strong>备考技巧</strong>：  <ul><li>利用「软考通」APP刷历年选择题，错题归类到Anki。  </li><li>简答题背诵口诀：如“高内聚低耦合、开闭原则”等。</li></ul></li></ul><h4 id="3-体能提升"><a href="#3-体能提升" class="headerlink" title="3. 体能提升"></a><strong>3. 体能提升</strong></h4><ul><li><strong>渐进式计划</strong>：  <ul><li>第1-2周：每天5分钟 <strong>开合跳+平板支撑</strong>（早晚各1组）。  </li><li>第3-4周：增加至10分钟，加入 <strong>深蹲+俯卧撑</strong>。  </li><li>第5周后：跟随Keep「增肌塑形」课程，每周3次。</li></ul></li></ul><hr><h3 id="四、设备与资源替代方案"><a href="#四、设备与资源替代方案" class="headerlink" title="四、设备与资源替代方案"></a><strong>四、设备与资源替代方案</strong></h3><ol><li><strong>无电脑编程</strong>：  <ul><li>使用 <strong>GitHub Codespaces</strong> 或 <strong>AWS Cloud9</strong> 在线编写Java代码。  </li><li>单片机学习改用 <strong>Wokwi ESP32模拟器</strong>（免费在线运行）。</li></ul></li><li><strong>算法练习</strong>：  <ul><li>手机安装 <strong>Sololearn</strong> 刷Java语法题，<strong>AcWing</strong> 手机端看题解。</li></ul></li></ol><hr><h3 id="五、关键提醒"><a href="#五、关键提醒" class="headerlink" title="五、关键提醒"></a><strong>五、关键提醒</strong></h3><ol><li><strong>竞赛与考证协同</strong>：  <ul><li>蓝桥杯的算法训练直接助力软考的「数据结构」模块，ACM经验可写在简历“竞赛荣誉”栏。</li></ul></li><li><strong>打工场景利用</strong>：  <ul><li>观察工厂流水线，思考如何用Java实现 <strong>排班优化算法</strong>（贪心&#x2F;回溯），作为竞赛选题。</li></ul></li><li><strong>健康管理</strong>：  <ul><li>打工间隙做 <strong>工间操</strong>（颈部拉伸、手腕活动），预防久坐劳损。</li></ul></li></ol><hr><h3 id="六、备选方案（灵活调整）"><a href="#六、备选方案（灵活调整）" class="headerlink" title="六、备选方案（灵活调整）"></a><strong>六、备选方案（灵活调整）</strong></h3><ul><li><strong>倦怠期</strong>：改用 <strong>Blender+Pr剪辑打工Vlog</strong>，结合编程内容（如展示Java项目流程）。  </li><li><strong>突发加班</strong>：压缩晚间学习，保留 <strong>每日1题+10分钟听力</strong> 最低目标。  </li><li><strong>考证冲突</strong>：优先保证 <strong>四级和软考</strong>，计算机三级可延至寒假。</li></ul><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCODE PlatfotmIO ESP32S3 N16R8</title>
      <link href="/posts/VSCODE%20PlatfotmIO%20ESP32S3%20N16R8.html"/>
      <url>/posts/VSCODE%20PlatfotmIO%20ESP32S3%20N16R8.html</url>
      
        <content type="html"><![CDATA[<h1 id="platformio-ini-配置"><a href="#platformio-ini-配置" class="headerlink" title="platformio.ini 配置"></a>platformio.ini 配置</h1><p>任选其一</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; Flash: 16MB QD, PSRAM: 8MB OT</span></span><br><span class="line"><span class="section">[env:esp32-s3-devkitc-1]</span></span><br><span class="line"><span class="attr">platform</span> = espressif32</span><br><span class="line"><span class="attr">board</span> = esp32-s3-devkitc-<span class="number">1</span></span><br><span class="line"><span class="attr">framework</span> = ardui<span class="literal">no</span></span><br><span class="line"><span class="attr">monitor_speed</span> = <span class="number">115200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">board_build.arduino.memory_type</span> = qio_opi</span><br><span class="line"><span class="attr">board_build.flash_mode</span> = qio</span><br><span class="line"><span class="attr">board_build.psram_type</span> = opi</span><br><span class="line"><span class="attr">board_upload.flash_size</span> = <span class="number">16</span>MB</span><br><span class="line"><span class="attr">board_upload.maximum_size</span> = <span class="number">16777216</span></span><br><span class="line"><span class="attr">board_build.extra_flags</span> = </span><br><span class="line">  -DBOARD_HAS_PSRAM</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[env:esp32s3]</span></span><br><span class="line"><span class="attr">platform</span> = espressif32</span><br><span class="line"><span class="attr">board</span> = esp32-s3-devkitc-<span class="number">1</span></span><br><span class="line"><span class="attr">framework</span> = ardui<span class="literal">no</span></span><br><span class="line"><span class="comment">; 指定为16MB的FLASH分区表</span></span><br><span class="line"><span class="attr">board_build.arduino.partitions</span> = default_16MB.csv</span><br><span class="line"><span class="comment">; 指定FLASH和PSRAM的运行模式</span></span><br><span class="line"><span class="attr">board_build.arduino.memory_type</span> = qio_opi</span><br><span class="line"><span class="comment">; 预定义宏，启用PSRAM</span></span><br><span class="line"><span class="attr">build_flags</span> = -DBOARD_HAS_PSRAM</span><br><span class="line"><span class="comment">; 指定FLASH容量为16MB</span></span><br><span class="line"><span class="attr">board_upload.flash_size</span> = <span class="number">16</span>MB</span><br><span class="line"><span class="attr">monitor_speed</span> = <span class="number">115200</span></span><br></pre></td></tr></table></figure><h1 id="自定义-ESP32S3-N16R8-板子配置"><a href="#自定义-ESP32S3-N16R8-板子配置" class="headerlink" title="自定义 ESP32S3 N16R8 板子配置"></a>自定义 ESP32S3 N16R8 板子配置</h1><blockquote><p>在<code>~\.platformio\boards</code>中添加如下配置，如果没有该文件夹，新建一个文件夹即可<br>也可以在项目目录创建<code>boards</code>文件夹，然后复制该文件到该文件夹中</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;arduino&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ldscript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esp32s3_out.ld&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;memory_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qio_opi&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;partitions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default_16MB.csv&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esp32&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;extra_flags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-DARDUINO_ESP32_DEV&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-DBOARD_HAS_PSRAM&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-DARDUINO_USB_MODE=1&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;f_cpu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;240000000L&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;f_flash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;80000000L&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;flash_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qio&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;psram_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;opi&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hwids&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;0x303A&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;0x1001&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mcu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esp32s3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;variant&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esp32s3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;connectivity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;bluetooth&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;wifi&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;default_tool&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esp-builtin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;onboard_tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;esp-builtin&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;openocd_target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esp32s3.cfg&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;frameworks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;arduino&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;espidf&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YD-ESP32-S3N16R8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;upload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;flash_size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16MB&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maximum_ram_size&quot;</span><span class="punctuation">:</span> <span class="number">327680</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maximum_size&quot;</span><span class="punctuation">:</span> <span class="number">16777216</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;require_upload_port&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="number">921600</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vcc-gnd/YD-ESP32-S3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vendor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VCC-GND Studio&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32s3n16r8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 状态管理</title>
      <link href="/posts/Vue%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/Vue%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><div class="note simple"><p>我的理解就是，在整个前端Vue项目中，有需要全局都使用到的对象，例如<code>token</code>，而状态管理就是<strong>跨文件、跨域</strong>的一个全局变量对象</p></div><h1 id="Vue-使用-Pinia"><a href="#Vue-使用-Pinia" class="headerlink" title="Vue 使用 Pinia"></a>Vue 使用 Pinia</h1><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pinia.vuejs.org/zh链接">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">pinia官网</div>            <div class="tag-link-sitename"> </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="创建-store"><a href="#创建-store" class="headerlink" title="创建 store"></a>创建 store</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 defineStore 函数，用于定义 Pinia 存储</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入 ref 函数，用于创建响应式数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * defineStore 参数描述：</span></span><br><span class="line"><span class="comment"> * - &#x27;token&#x27;：给状态起名，存储的唯一标识符，用于在应用中引用该存储</span></span><br><span class="line"><span class="comment"> * - () =&gt; (&#123;... &#125;)：一个函数，用于定义存储的内容和操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTokenStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;token&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 ref 创建一个响应式的 token 变量，初始值为空字符串</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义修改token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>) =&gt; &#123;</span><br><span class="line">        token.<span class="property">value</span> = newToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义移除token的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        token.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 token 状态和操作</span></span><br><span class="line">    <span class="keyword">return</span> &#123; token, setToken, removeToken &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用-store"><a href="#使用-store" class="headerlink" title="使用 store"></a>使用 store</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 useTokenStore 函数，用于获取 token 存储</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTokenStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/token.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 token 存储实例</span></span><br><span class="line"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// tokenStore.token;</span></span><br><span class="line"><span class="comment">// tokenStore.setToken(&#x27;newToken&#x27;);</span></span><br><span class="line"><span class="comment">// tokenStore.removeToken();</span></span><br></pre></td></tr></table></figure><p>在<code>pinia</code>中定义的响应式数据，都不需要<code>.value</code></p><h1 id="pinia-persistedstate-plugin-参数持久化插件"><a href="#pinia-persistedstate-plugin-参数持久化插件" class="headerlink" title="pinia-persistedstate-plugin 参数持久化插件"></a>pinia-persistedstate-plugin 参数持久化插件</h1><p><code>pinia</code>是在内存中的，一刷新就没有了，所以需要持久化插件，将数据保存到本地中</p><div class="tip info"><p>使用<code>pinia-persistedstate-plugin</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia-persistedstate-plugin</span><br></pre></td></tr></table></figure></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPersistedState &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia-persistedstate-plugin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"><span class="keyword">const</span> persist = <span class="title function_">createPersistedState</span>()</span><br><span class="line"></span><br><span class="line">pinia.<span class="title function_">use</span>(persist)</span><br></pre></td></tr></table></figure><p>并在<code>defineStore</code>中添加<code>persist</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTokenStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;token&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>) =&gt; &#123;token.<span class="property">value</span> = newToken;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>) =&gt; &#123;token.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; token, setToken, removeToken &#125;;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span> <span class="comment">// 开启持久化存储</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 路由</title>
      <link href="/posts/Vue%20%E8%B7%AF%E7%94%B1.html"/>
      <url>/posts/Vue%20%E8%B7%AF%E7%94%B1.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>作用是当访问不同路径的时候，显示不同的页面<br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/frontend/vue-router1_e458400e.png"><br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/frontend/vue-router2_22844191.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p>创建<code>src/router/index.js</code>作为路由文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入vue-router</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoginVue</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutVue</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Layout.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义路由关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,<span class="attr">component</span>:<span class="title class_">LoginVue</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>:<span class="title class_">LayoutVue</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>: routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><details class="folding-tag" ><summary> 解释 </summary>              <div class='content'>              <ol><li>导入必要的模块和组件：</li></ol><p><code>import { createRouter, createWebHistory } from &quot;vue-router&quot;;</code>：从 <code>vue-router</code> 库中导入 <code>createRouter</code> 和 <code>createWebHistory</code> 函数。<br><code>import LoginVue from &#39;@/views/Login.vue&#39;;</code>：导入 <code>Login.vue</code> 组件作为登录页面。<br><code>import LayoutVue from &#39;@/views/Layout.vue&#39;;</code>：导入 <code>Layout.vue</code> 组件作为布局页面。</p><ol start="2"><li>定义路由规则：</li></ol><p><code>const routes</code>：定义一个路由规则数组。<br><code>{ path: &#39;/login&#39;, component: LoginVue }</code>：当访问 &#x2F;login 路径时，渲染 LoginVue 组件。<br><code>{ path: &#39;/&#39;, component: LayoutVue }</code>：当访问根路径 &#x2F; 时，渲染 LayoutVue 组件。  </p><ol start="3"><li>创建路由器实例：</li></ol><p>使用 <code>createRouter</code> 函数创建一个路由器实例。<br><code>history: createWebHistory()</code>：使用 <code>createWebHistory</code> 创建一个基于 <strong>HTML5 History API</strong> 的路由历史记录。<br><code>routes: routes</code>：将之前定义的路由规则数组赋值给路由器的 <code>routes</code> 选项。</p><ol start="4"><li><code>export default router;</code>：将创建的路由器实例导出，以便在其他地方使用。</li></ol>              </div>            </details><h2 id="在main-js中导入"><a href="#在main-js中导入" class="headerlink" title="在main.js中导入"></a>在<code>main.js</code>中导入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为文件名是 index.js 所以可以直接写文件夹名</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line"><span class="title function_">creareApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="App-vue启用"><a href="#App-vue启用" class="headerlink" title="App.vue启用"></a>App.vue启用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>标签 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 是写死的，必须是这样子，不能<strong>自闭合</strong></p><p>写在哪里，哪里就可以渲染路由的页面</p></div><h2 id="使用路由跳转"><a href="#使用路由跳转" class="headerlink" title="使用路由跳转"></a>使用路由跳转</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">//从路由导入 useRouter对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h1><p>在路由关系中给一级路由添加<code>children</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义路由关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="title class_">LoginVue</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">LayoutVue</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;/article/manage&#x27;</span>, <span class="comment">// 重定向</span></span><br><span class="line">        <span class="attr">children</span>: [ <span class="comment">// 子路由</span></span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;/article/category&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ArticleCategoryVue</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;/article/manage&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ArticleManageVue</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/info&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserInfoVue</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/avatar&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserAvatarVue</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/resetPassword&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserResetPasswordVue</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><div class="note default simple"><p>如果使用的是<code>Element-Plus</code>，需要在 <code>&lt;el-menu-item&gt;</code>添加 <code>index</code> 属性，指向具体路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu-item index=<span class="string">&quot;/user/info&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div><div class="note info modern"><p>在一级路由添加<code>redirect</code>就可以重定向到其他路径，上面代码登录完跳转到<code>/</code>路径的时候，就会自动重定向到<code>/article/manage</code>路径上</p></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/posts/%E8%B7%A8%E5%9F%9F.html"/>
      <url>/posts/%E8%B7%A8%E5%9F%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><p>跨域指的是一个域（比如 example.com）下的Web应用尝试去请求另一个域（比如 api.example.org）的资源。由于浏览器的同源策略限制，直接的跨域请求通常是被禁止的，以防止潜在的安全风险。CORS（Cross-Origin Resource Sharing）是一个协议，它允许服务器通过设置特定的HTTP响应头来放宽这个限制，从而允许某些跨域请求。</p><p>假如现在的页面是 <code>http//:localhost:5173</code>(Vue页面)，访问后端服务器 <code>http//:localhost:8080</code>(SpringBoot)，那么就属于跨域了。 </p><div class="tip home"><p>只有浏览器端才存在跨域问题。</p><p>就是说在前端页面，通过 <code>fetch</code>、<code>axios</code>、<code>vue-resource</code>等ajax请求方式，向后端服务器发起请求。</p><p>不通过浏览器，选择使用代理，让前端服务器访问后端服务器，就可以拿到数据。</p></div><div class="tip info"><p>跨域：不同域名，不同端口，不同协议</p><p>如果是 <code>http://localhost:8080/a</code> 和 <code>http://localhost:8080/b</code>，那么属于同域，不跨域。</p></div><h1 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h1><h2 id="SpringBoot-跨域"><a href="#SpringBoot-跨域" class="headerlink" title="SpringBoot 跨域"></a>SpringBoot 跨域</h2><p>方法上添加注解 <code>@CrossOrigin</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-跨域"><a href="#Vue-跨域" class="headerlink" title="Vue 跨域"></a>Vue 跨域</h2><p>在vue设置代理，让请求先转发到前端服务，再由前端服务转发到后端服务。</p><p>前端服务的源是 <code>http://localhost:5173</code>，后端服务的源是 <code>http://localhost:8080</code>。</p><p>只有浏览器有同源策略，服务器就没有限制，让前端服务代理请求，就代替浏览器向后端服务器发起请求，后端服务器返回数据，前端服务再返回给前端。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>: &#123;</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>.</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Pofiles多环境开发</title>
      <link href="/posts/Spring%20Pofiles%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91.html"/>
      <url>/posts/Spring%20Pofiles%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringBoot支持多环境开发，通过配置文件来控制环境，默认是dev环境，可以通过命令行参数来指定环境，如：<code>java -jar xxx.jar --spring.profiles.active=test</code></p><h2 id="分割不同环境的配置"><a href="#分割不同环境的配置" class="headerlink" title="分割不同环境的配置"></a>分割不同环境的配置</h2><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="指定配置属于哪个环境"><a href="#指定配置属于哪个环境" class="headerlink" title="指定配置属于哪个环境"></a>指定配置属于哪个环境</h2><p>通过键值来指定，如：<code>spring.config.activate.on-profile=&lt;环境配置名称&gt;</code></p><h2 id="如何指定那个环境的配置生效？"><a href="#如何指定那个环境的配置生效？" class="headerlink" title="如何指定那个环境的配置生效？"></a>如何指定那个环境的配置生效？</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">        <span class="attr">active:</span> <span class="string">&lt;环境配置名称&gt;a</span></span><br></pre></td></tr></table></figure><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">        <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#指定默认环境</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">congfig:</span></span><br><span class="line">        <span class="attr">activate:</span></span><br><span class="line">            <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">congfig:</span></span><br><span class="line">        <span class="attr">activate:</span></span><br><span class="line">            <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生成环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">congfig:</span></span><br><span class="line">        <span class="attr">activate:</span></span><br><span class="line">            <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: home</span><br><span class="line">#    active: school</span><br><span class="line">  application:</span><br><span class="line">    name: big-event</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-request-size: 100MB</span><br><span class="line">      max-file-size: 10MB</span><br><span class="line">  data:</span><br><span class="line">    redis:</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 6379</span><br><span class="line"># mybatis自动大小写</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  config:</span><br><span class="line">    profiles:</span><br><span class="line">      on-profile: home</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:h2:tcp://localhost/C:/Users/leegw/Documents/java/big-enent/database/database</span><br><span class="line">    username: sa</span><br><span class="line">    password: sa</span><br><span class="line">    driverClassName: org.h2.Driver</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  config:</span><br><span class="line">    profiles:</span><br><span class="line">      on-profile: school</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:h2:tcp://localhost/E:/java/big-event/database/database</span><br><span class="line">    username: sa</span><br><span class="line">    password: sa</span><br><span class="line">    driverClassName: org.h2.Driver</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bilibili </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS弹出认证</title>
      <link href="/posts/PS%E5%BC%B9%E5%87%BA%E8%AE%A4%E8%AF%81.html"/>
      <url>/posts/PS%E5%BC%B9%E5%87%BA%E8%AE%A4%E8%AF%81.html</url>
      
        <content type="html"><![CDATA[<p>PS弹出盗版认证</p><h1 id="火绒禁止联网"><a href="#火绒禁止联网" class="headerlink" title="火绒禁止联网"></a>火绒禁止联网</h1><div class="note default simple"><ul><li>防护中心</li><li>系统防护</li><li>联网控制</li></ul></div><h1 id="windows自带防火墙"><a href="#windows自带防火墙" class="headerlink" title="windows自带防火墙"></a>windows自带防火墙</h1><p>出入站直接添加程序为PS，禁止联网</p><h1 id="梯子"><a href="#梯子" class="headerlink" title="梯子"></a>梯子</h1><details class="folding-tag" green><summary> 查看梯子配置 </summary>              <div class='content'>              <h1 id="Clash-for-Windows"><a href="#Clash-for-Windows" class="headerlink" title="Clash for Windows"></a>Clash for Windows</h1><p>在<strong>配置</strong>右键机场，并在规则添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- DOMAIN-SUFFIX,adobe.io,REJECT</span><br><span class="line">- DOMAIN,lcs-cops.adobe.io,DIRECT</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adobo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring全局异常处理器</title>
      <link href="/posts/Spring%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.html"/>
      <url>/posts/Spring%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建一个新类"><a href="#创建一个新类" class="headerlink" title="创建一个新类"></a>创建一个新类</h1><p>添加<code>@RestControllerAdvice</code>注解，该注解用于定义全局异常处理类</p><div class="tip "><p>@RestControllerAdvice &#x2F;&#x2F;@RestControllerAdvice &#x3D; @ControllerAdvice + @ResponseBody</p></div><h1 id="使用-ExceptionHandler注解定义异常处理方法"><a href="#使用-ExceptionHandler注解定义异常处理方法" class="headerlink" title="使用@ExceptionHandler注解定义异常处理方法"></a>使用@ExceptionHandler注解定义异常处理方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//@RestControllerAdvice = @ControllerAdvice + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个注解是指定处理那些异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="comment">// 如果抛出的异常有错误信息，直接返回给用户，否则返回一个默认的错误信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.error(StringUtils.hasLength(ex.getMessage()) ? ex.getMessage() : <span class="string">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Validadtion参数验证</title>
      <link href="/posts/Spring%20Validadtion%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81.html"/>
      <url>/posts/Spring%20Validadtion%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用于验证接口传入参数的框架，就是判断某个参数是否为空，是否为空字符串，是否为空集合等。</p><p>常用于判断手机号 ，身份证号码，用户名，密码等。就是一个类似掩码的东西。</p><h1 id="Maven添加依赖"><a href="#Maven添加依赖" class="headerlink" title="Maven添加依赖"></a>Maven添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>在Controller类上添加<code>@Validated</code>注解<br>在参数前面添加<code>@Pattern</code>注解，然后参数<code>regexp</code>属性指定正则表达式即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(<span class="meta">@Pattern(regexp = &quot;^\\S&#123;5,16&#125;$&quot;)</span> String username,<span class="meta">@Pattern(regexp = &quot;^\\S&#123;5,16&#125;$&quot;)</span> String password)</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 实现用户注册逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用校验"><a href="#常用校验" class="headerlink" title="常用校验"></a>常用校验</h1><table><thead><tr><th align="left">注解</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">NotNUll</td><td align="left">值不能为null</td></tr><tr><td align="left">NotEmpty</td><td align="left">值不能为null，并且内容不为空</td></tr><tr><td align="left">Email</td><td align="left">校验是否为邮箱</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode launch调试文件</title>
      <link href="/posts/VScode%20launch%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6.html"/>
      <url>/posts/VScode%20launch%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建launch-json文件"><a href="#创建launch-json文件" class="headerlink" title="创建launch.json文件"></a>创建launch.json文件</h1><p>在<code>.vscode</code>文件下创建<code>launch.json</code>文件</p><p>在<code>configurations</code>里面进行配置，每一个<code>&#123;&#125;对象</code>对应一个调试任务</p><div class="tip info"><p>右下角可以快捷添加配置模板</p><p>把鼠标悬停在key上，会出现提示</p></div><h1 id="完整配置Hexo的调试文件"><a href="#完整配置Hexo的调试文件" class="headerlink" title="完整配置Hexo的调试文件"></a>完整配置Hexo的调试文件</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Hexo Server&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;server&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outputCapture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;std&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build Hexo Site&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;build&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outputCapture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;std&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Deploy Hexo Site&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;deploy&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outputCapture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;std&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Clean Hexo Site&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;clean&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outputCapture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;std&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP笔记</title>
      <link href="/posts/AOP%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/AOP%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h1><p>AOP：Aspect Oriented Programming，即面向切面编程，其实就是面向特性方法编程。</p><p><a href="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/AOP%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png">AOP应用场景</a></p><div class="note primary simple"><p>动态代理的主要作用是在运行时创建一个符合特定接口的对象，这个对象可以拦截接口方法的调用，并在调用实际方法前后添加额外的处理逻辑。</p></div><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="导入依赖：在pom-xml文件中导入依赖"><a href="#导入依赖：在pom-xml文件中导入依赖" class="headerlink" title="导入依赖：在pom.xml文件中导入依赖"></a>导入依赖：在pom.xml文件中导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写AOP程序：针对于特定方法根据业务需要进行编程"><a href="#编写AOP程序：针对于特定方法根据业务需要进行编程" class="headerlink" title="编写AOP程序：针对于特定方法根据业务需要进行编程"></a>编写AOP程序：针对于特定方法根据业务需要进行编程</h2><p>使用<code>@Component</code>让<code>springboot</code>管理，使用<code>@Aspect</code>注解成为切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ProceedingJoinPoint：表示正在执行的连接点，即正在执行的方法,固定参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Around</span>：环绕通知，在目标方法执行前后添加额外的处理逻辑:第一个*指的是所有类或接口，第二个*指的是所有方法，第三个..指的是所有参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.nodaoli.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> pjp.proceed(); <span class="comment">// 调用原始方法运行，固定方法</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        log.info(pjp.getSignature() + <span class="string">&quot;耗时：&quot;</span> + (end - begin));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h1><ul><li>连接点：JoinPoint,可以被AOP控制的方法（暗含方法执行时的相关信息）</li><li>通知：Advice，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</li><li>切入点：Pointcut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</li><li>目标对象：Target，通知所应用的对象</li></ul><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/AOP%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.png" alt="alt text"></p><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><ol><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前执行</li><li>@After：后置通知，此注解标注的通知方法在目标方法后执行，<span class='p red'>无论是否有异常都执行</span></li><li>@AfterReturning：返回通知，此注解标注的通知方法在目标方法<span class='p red'>正常返回</span>后执行，<span class='p red'>有异常不执行</span></li><li>@AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行</li></ol><div class="note warning simple"><p><strong>注意事项：</strong></p><ul><li>@Around环绕通知需要自己调用<code>ProceedingJoinPoint.proceed()</code>来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为<code>Object</code>,来接收原始方法的返回值。</li></ul></div><h2 id="同一切入点表达式"><a href="#同一切入点表达式" class="headerlink" title="同一切入点表达式"></a>同一切入点表达式</h2><p>定义一个方法，方法名随意，使用<code>@Pointcut</code>注解，指定切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.nodaoli.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP-通知顺序"><a href="#AOP-通知顺序" class="headerlink" title="AOP 通知顺序"></a>AOP 通知顺序</h1><h2 id="多个切面通知跟过滤器差不多，都是根据来执行："><a href="#多个切面通知跟过滤器差不多，都是根据来执行：" class="headerlink" title="多个切面通知跟过滤器差不多，都是根据来执行："></a>多个切面通知跟过滤器差不多，都是根据<span class='p red'>类名排序</span>来执行：</h2><ul><li>字母顺序排名靠前：@Before先执行</li><li>字母顺序排名靠前：@After后执行</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Before1</span><br><span class="line">@Before2</span><br><span class="line">@Before3</span><br><span class="line">@After3</span><br><span class="line">@After2</span><br><span class="line">@After1</span><br></pre></td></tr></table></figure><h2 id="使用-Order-数字-加在切面类上面来控制顺序"><a href="#使用-Order-数字-加在切面类上面来控制顺序" class="headerlink" title="使用 @Order(数字) 加在切面类上面来控制顺序"></a>使用 @Order(数字) 加在切面类上面来控制顺序</h2><ul><li>@Before：数字小值优先执行</li><li>@After：数字大值优先执行</li></ul><h1 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h1><ul><li>切入点表达式：描述切入点方法的一种表达式</li><li>作用：主要用来决定项目中的哪些方法需要加入通知</li><li>常见形式：<ul><li><a href="#execution">execution(…)</a> ：匹配方法的签名执行</li><li><a href="#annotation">@annotation(…)</a> ：匹配方法上注解</li></ul></li></ul><h2 id="execution-…"><a href="#execution-…" class="headerlink" title="execution(…)"></a>execution(…)</h2><p>语法：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(访问权限? 返回值 包名.类名.?方法名(参数列表) <span class="keyword">throws</span> 异常列表)</span><br></pre></td></tr></table></figure><ul><li>其中带<span class='p red'>?</span>的表示可以省略的部分<ul><li>访问修饰符：可省略（比如：public、private、protected、default）</li><li>包名.类名：可省略</li><li>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</li></ul></li><li>可以使用通配符描述切入点<ul><li><ul><li>：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li></ul></li><li>.. ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</li></ul></li></ul><h2 id="annotation-…"><a href="#annotation-…" class="headerlink" title="@annotation(…)"></a>@annotation(…)</h2><p>语法：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@annotation(自定义注解类型)</span></span><br></pre></td></tr></table></figure><p>需要自定义一个注解，加上@Retention和@Target两个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">// 运行时运行</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span><span class="comment">// 方法注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后在方法上面添加自定义注解，就可以匹配到这个方法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.nodaoli.annotation.MyAnnotation)&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h1><p>只有<code>@Around</code>环绕通知使用<code>ProceedingJoinPoint</code>，其他通知使用<code>JoinPoint</code>。</p><p><code>JoinPoint</code>可以获取连接点信息，而<code>ProceedingJoinPoint</code>除了可以获取连接点信息外，还可以执行原始方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.nodaoli.service.*.*(..))&quot;)</span>)</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 获取对象类名</span></span><br><span class="line">    pjp.getTarget().getClass().getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取方法名</span></span><br><span class="line">    pjp.getSignature().getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取运行时传入的数组</span></span><br><span class="line">    Object[] args = pjp.getArgs();</span><br><span class="line">    Arrays.toString(args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 放行目标方法</span></span><br><span class="line">    pjp.proceed();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值</span></span><br><span class="line">    <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bilibili </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务管理</title>
      <link href="/posts/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h1><p><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位，这些操作<strong>要么同时成功，要么同时失败</strong>。</p><h1 id="操作顺序"><a href="#操作顺序" class="headerlink" title="操作顺序"></a>操作顺序</h1><ol><li>开启事务(一组操作开始前，开启事务)：start transaction &#x2F; begin</li><li>提交事务(这组操作全部成功后，提交事务)：commit</li><li>回滚事务(中间任何一个操作出现异常，回滚事务)：rollback</li></ol><h1 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h1><ul><li>注解：@Transactional</li><li>位置：业务（service）层的方法上、类上、接口上</li><li>作用：将当前方法交给spring进行事务管理，方法执行前，开启事务，方法执行后，提交事务，出现异常，回滚事务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 开启事务管理日志</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.jdbc.support.jdbcTransactionManager:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h2><p>默认情况下，只有出现RuntimeException才回滚异常。rollbackFor属性用于控制出现何种异常类型，回滚事务。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span> <span class="comment">//开启事务管理</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    deptMapper.deleteById(id); <span class="comment">// 根据ID删除部门数据</span></span><br><span class="line"></span><br><span class="line">    empMapper.deleteByDeptId(id); <span class="comment">// 根据部门ID删除该部门下的员工</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="propagation"><a href="#propagation" class="headerlink" title="propagation"></a>propagation</h2><p>事务传播行为：指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。<br>当事务A方法调用事务B方法时，A方法可以不启用事务，也可以启用事务，而B方法则<strong>必须启用</strong>事务。</p><ul><li>REQUIRED：如果当前存在事务，则加入该事务，如果当前没有事务，则创建一个新的事务。这是默认值。</li><li>REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则将当前事务挂起。</li><li>NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则将当前事务挂起。</li><li>NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>MANDATORY：如果当前存在事务，则加入该事务，如果当前没有事务，则抛出异常。</li><li>SUPPORTS：如果当前存在事务，则加入该事务，如果当前没有事务，则以非事务方式运行。</li></ul><h3 id="传播行为表"><a href="#传播行为表" class="headerlink" title="传播行为表"></a>传播行为表</h3><table><thead><tr><th>Propagation Behavior</th><th>Description</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果当前存在事务，则加入该事务，如果当前没有事务，则创建一个新的事务。这是默认值。</td></tr><tr><td>REQUIRES_NEW</td><td>创建一个新的事务，如果当前存在事务，则将当前事务挂起。</td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式运行，如果当前存在事务，则将当前事务挂起。</td></tr><tr><td>NEVER</td><td>以非事务方式运行，如果当前存在事务，则抛出异常。</td></tr><tr><td>MANDATORY</td><td>如果当前存在事务，则加入该事务，如果当前没有事务，则抛出异常。</td></tr><tr><td>SUPPORTS</td><td>如果当前存在事务，则加入该事务，如果当前没有事务，则以非事务方式运行。</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在注解<code>@Transactional</code>中，<code>propagation</code>属性用于控制事务传播行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事务方法A</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">    methodB(); <span class="comment">// 调用事务方法B</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务方法B</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bilibili </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局异常处理器</title>
      <link href="/posts/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.html"/>
      <url>/posts/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="定义一个全局异常处理器"><a href="#定义一个全局异常处理器" class="headerlink" title="定义一个全局异常处理器"></a>定义一个全局异常处理器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//@RestControllerAdvice = @ControllerAdvice + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span> <span class="comment">// 指定处理那些异常</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;对不起，操作失败，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bilibili </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登陆认证学习笔记</title>
      <link href="/posts/%E7%99%BB%E9%99%86%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/%E7%99%BB%E9%99%86%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><p>会话技术：在服务器端创建一个与客户端浏览器相关的数据，用来记录客户端浏览器的访问信息。</p><p>会话：用户打开浏览器，访问Wb服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。<br>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间<span class='p red'>共享数据</span>。</p><p>会话跟踪方案：</p><ul><li>客户端会话跟踪技术：Cookie</li><li>服务器端会话跟踪技术：Session</li><li>令牌技术</li></ul><div class="tip info"><p>Cookie和Session都是传统的会话技术</p></div><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>优点：</p><ul><li>HTTP协议中支持的技术</li></ul><p>缺点：</p><ul><li>存储空间有限，通常情况下不能存储二进制数据</li><li>不能跨域访问</li><li>不安全，用户可以自己禁用Cookie</li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>优点：</p><ul><li>部署在服务器，安全</li></ul><p>缺点：</p><ul><li>服务器集群环境下无法直接使用Session</li><li>Cookie的缺点</li></ul><h2 id="JWT令牌技术"><a href="#JWT令牌技术" class="headerlink" title="JWT令牌技术"></a>JWT令牌技术</h2><p>JWT令牌技术：JSON Web Token，是一种用于在网络应用环境间传递声明的开放标准（RFC 7519）。</p><ul><li>全称称：JSON Web Token（<a href="https://jwt.io/%EF%BC%89">https://jwt.io/）</a></li><li>定义了一整简洁的、自包含的格式，用于在通信双法以JSON数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</li><li>组成：<ul><li>第一部分：Header（头部），记录令牌类型、签名算法等。例如：{“alg”:”HS256”,”typ”:”JWT”}</li><li>第二部分：Payload（有效负载），携带一些自定义信息】默认信息等。例如：{“id”:1,”name”:”zhangsan”}</li><li>第三部分：Signature（签名），<strong>防止Token被篡改、确保安全性</strong>。将header、.payload,并加入指定秘钥，通过指定签名算法计算而来。</li></ul></li></ul><div class="note success simple"><p>第一和第二部分内容都是明文自定义的内容，第三部就像一把钥匙，使用Signature封装明文内容，解析也必须验证签名。</p></div><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/JWT.png" alt="alt text"></p><h1 id="使用JWT技术实现登陆认证"><a href="#使用JWT技术实现登陆认证" class="headerlink" title="使用JWT技术实现登陆认证"></a>使用JWT技术实现登陆认证</h1><div class="tip warning"><p>使用的是0.9.1版本的JWT</p></div><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JWT工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nodaoli.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signKey</span> <span class="operator">=</span> <span class="string">&quot;nodaoli&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span> <span class="number">43200000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims JWT第二部分负载 payload 中存储的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String, Object&gt; claims)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .addClaims(claims)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, signKey)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expire))</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> jwt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT第二部分负载 payload 中存储的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span>&#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(signKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>概念：Filter过滤器，是」JavaWeb三大组件(Servlet、Filter、Listener)之一。</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。</li><li>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。</li></ul><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/Filter.png" alt="alt text"></p><p>重写Filter接口的doFilter方法，进行放行操作,调用<code>filterChain</code>对象的<code>doFilter()</code>方法。<br>基本上就是用到了传入的三个参数。</p><div class="tip warning"><p>是<code>Jakarta.servlet</code>包下的</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截到了请求&quot;</span>);</span><br><span class="line">    <span class="comment">// 放行</span></span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;,filterName = &quot;myFilter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">拦截路径</th><th align="left">urlPatterns值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">拦截具体路径</td><td align="left">&#x2F;login</td><td align="left">只有访问&#x2F;login路径时，才会拦截</td></tr><tr><td align="left">目录拦截</td><td align="left">&#x2F;emps&#x2F;*</td><td align="left">访问&#x2F;emps目录下的所有资源时，都会拦截</td></tr><tr><td align="left">拦截所有</td><td align="left">&#x2F;*</td><td align="left">访问所有资源时，都会拦截</td></tr></tbody></table><h2 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h2><p>介绍：一个web应用中，可以定义多个过滤器，这多个过滤器就形成了过滤器链。<br>顺序：注解配置的Filter,优先级是按照过滤器类名（字符串）的自然排序。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.nodaoli.pojo.Result;</span><br><span class="line"><span class="keyword">import</span> com.nodaoli.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <span class="comment">// 启用过滤器，并指定所有的请求都会经过过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123; <span class="comment">// 过滤器必须实现Filter接口</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 过滤器必须重写doFilter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 强制转成HttpServlet类型，因为过滤器是ServletAPI的，所以需要强转才能使用</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取请求url.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL().toString();</span><br><span class="line">        log.info(<span class="string">&quot;请求的url：&#123;&#125;&quot;</span>,url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断请求url中是否包含login,如果包含，说明是登录操作，放行。</span></span><br><span class="line">        <span class="keyword">if</span> (url.contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;放行&quot;</span>);</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 这是一个过滤器文件，停止需要返回，就会在这里结束，不然会一直执行下去。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取请求头中的令牌(token).</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）。</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(jwt)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求头token为空&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 手动转换</span></span><br><span class="line"><span class="comment">             * 在Controller层，使用<span class="doctag">@ResponseBody</span>注解，返回json数据，做到自动转换</span></span><br><span class="line"><span class="comment">             * 这里使用的是fastjson，需要在POM中引入依赖</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            <span class="comment">// 在响应处，使用getWriter()方法，将会获得一个PrintWriter对象，使用write()方法，将字符串写入响应中</span></span><br><span class="line">            resp.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.解析token,如果解析失败，返回错误结果（未登录）。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJWT(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// JWT解析失败</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.info(<span class="string">&quot;令牌解析失败，放回未登录信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">// 手动转换</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            resp.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行。</span></span><br><span class="line">        log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul><li>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spig框架中提供的，用来动态拦截控制器方法的执行。</li><li>作用：拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。</li></ul><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>如果你需要自定义 <strong>Interceptor</strong> 的话必须实现 <code>org.springframework.web.servlet.HandlerInterceptor</code>接口或继承 <code>org.springframework.web.servlet.handler.HandlerInterceptorAdapter</code>类，并且需要重写下面下面 3 个方法：</p><ol><li><code>preHandler(HttpServletRequest request, HttpServletResponse response, Object handler)</code> 方法在请求处理之前被调用。该方法在 Interceptor 类中最先执行，用来进行一些前置初始化操作或是对当前请求做预处理，也可以进行一些判断来决定请求是否要继续进行下去。该方法的返回至是 <strong>Boolean</strong> 类型，当它返回 false 时，表示请求结束，后续的 Interceptor 和 Controller 都不会再执行；当它返回为 true 时会继续调用下一个 Interceptor 的 preHandle 方法，如果已经是最后一个 Interceptor 的时候就会调用当前请求的 Controller 方法。</li><li><code>postHandler(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</code> 方法在当前请求处理完成之后，也就是 Controller 方法调用之后执行，但是它会在  DispatcherServlet  进行视图返回渲染之前被调用，所以我们可以在这个方法中对 Controller 处理之后的 ModelAndView 对象进行操作。</li><li><code>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)</code> 方法需要在当前对应的 Interceptor 类的 postHandler 方法返回值为 true 时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在 DispatcherServlet  渲染了对应的视图之后执行。此方法主要用来进行资源清理。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------- LogInterception.preHandle --- &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Request URL: &quot;</span> + request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;Start Time: &quot;</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;startTime&quot;</span>, startTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------- LogInterception.postHandle --- &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Request URL: &quot;</span> + request.getRequestURL());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------- LogInterception.afterCompletion --- &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Request URL: &quot;</span> + request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;End Time: &quot;</span> + endTime);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Time Taken: &quot;</span> + (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>创建一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LogInterceptor</span>());</span><br><span class="line">        <span class="comment">// registry.addInterceptor(new LogInterceptor()).addPathPatterns(&quot;/user/**&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip info"><p>拦截器路径<code>addPathPatterns(&quot;/**&quot;)</code>直接加在<code>addInterceptor()</code>方法中即可。</p><p>使用<code>excludePathPatterns()</code>方法可以排除某些路径。</p></div><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/Interceptor%E8%B7%AF%E5%BE%84.png" alt="Interceptor路径.png"></p>]]></content>
      
      
      <categories>
          
          <category> bilibili </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/posts/Mybatis.html"/>
      <url>/posts/Mybatis.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>是一款优秀的持久层框架，用于简化JDBC，原名iBatis</li><li>源码托管在Github，Mybatis</li><li>一般都是在Spring Boot中直接使用</li><li>SpringBoot数据库连接配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p>• 使用<code>@Mapper</code>注解自动配置接口，接口方法再使用<code>@Select(&#39;select * from user&#39;)</code>注解，让IOC自动创建实现类的时候自动实现方法<br>• 数据库连接池</p><ul><li>是一个容器，负责分配、管理数据库连接（Connection）</li><li>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗留</li><li>在pom文件中直接引入连接池的依赖，就切换好了连接池，所以数据库连接配置文件不用改</li></ul><h1 id="IDEA配置Mysql提示"><a href="#IDEA配置Mysql提示" class="headerlink" title="IDEA配置Mysql提示"></a>IDEA配置Mysql提示</h1><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/MysqlPrompt.png" alt="在这里插入图片描述"></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>创建并使用一个接口，注解<code>@Mapper</code><br>方法就可以使用<code>@Select(&#39;select * from user;&#39;)</code></p><h3 id="接口注解"><a href="#接口注解" class="headerlink" title="接口注解"></a>接口注解</h3><ul><li>@Mapper</li></ul><h3 id="方法注解"><a href="#方法注解" class="headerlink" title="方法注解"></a>方法注解</h3><ul><li>@Select</li><li>@Insert</li><li>@Update</li><li>@Drop</li></ul><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/MybatisData%20Encapsulation.png" alt="alt text"></p><h2 id="自动封装"><a href="#自动封装" class="headerlink" title="自动封装"></a>自动封装</h2><ol><li><p>给字段起别名，让别名与实体类属性一致<br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/712d8f83a8704002b5f7740e52c5f322.png" alt="在这里插入图片描述"></p></li><li><p>通过@Results，@Result注解手动映射封装<br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/b591ae418efb43a99b5c28a76d1023de.png" alt="在这里插入图片描述"></p></li><li><p>开启Mybatis驼峰自动命名开关，删除下划线并大写后一个字母<br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/02072efc398f4e0c98eac49e82927fbb.png" alt="在这里插入图片描述"></p></li></ol><h1 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h1><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/XmlMappubg.png" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion=<span class="string">&quot;1.0&quot;</span>encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPEmapper</span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span><span class="string">&quot;-//mybatis.org//DTDMapper3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;mappernamespace=&quot;top.nodaoli.mapper.EmpMapper&quot;&gt;</span><br><span class="line"><span class="comment">&lt;!--resultType:单挑记录所封装的类型--&gt;</span></span><br><span class="line">&lt;selectid=&quot;list&quot;resultType=&quot;top.nodaoli.pojo.Emp&quot;&gt;</span><br><span class="line">Select * from emp where name like &#x27;%$&#123;name&#125;%&#x27; and gender = #&#123;gender&#125; and</span><br><span class="line">Entrydate between &#x27;$&#123;begin&#125;&#x27; and &#x27;$&#123;end&#125;&#x27; order by update_time desc LIMIT 5 OFFSET #&#123;page&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/MybatisForeach.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 配置参数化</title>
      <link href="/posts/SpringBoot%20%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8C%96.html"/>
      <url>/posts/SpringBoot%20%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<div class="note default modern"><p>SpringBoot配置文件优先级：<code>yaml</code> &#x3D; <code>yml</code> &gt; <code>properties</code></p></div><h1 id="常用的配置"><a href="#常用的配置" class="headerlink" title="常用的配置"></a>常用的配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据库配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/nodaoli</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nodaoli</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nodaoli</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment"># 文件上传配置</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment"># 单个文件最大上传大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="comment"># 多个文件最大上传大小</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 设置Mybatis的日志功能</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 启用Mybatis的自动驼峰大写功能</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>在<code>application.properties</code>文件中配置参数,前面的<code>accessKeyId</code>是自己随便写的,后面是实际配置的参数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">r2.accessKeyId</span>=<span class="string">xxxx</span></span><br><span class="line"><span class="attr">r2.secretAccessKey</span>=<span class="string">xxxxxxxxxxxx</span></span><br><span class="line"><span class="attr">r2.endpoint</span>=<span class="string">https://xxxxxxxxxx.r2.cloudflarestorage.com</span></span><br><span class="line"><span class="attr">r2.bucketName</span>=<span class="string">xxxx</span></span><br></pre></td></tr></table></figure><p>使用<code>@Value(&quot;$&#123;r2.accessKeyId&#125;&quot;)</code>来获取配置参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;r2.accessKeyId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用<code>yml/yaml</code>文件来配置参数,因为层级比较明确,而且优先级高于<code>properties</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="attr">configuration:</span></span><br><span class="line">        <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">        <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">r2:</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">xxxx</span></span><br><span class="line">    <span class="attr">secretAccessKey:</span> <span class="string">xxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">https://xxxxxxxxxx.r2.cloudflarestorage.com</span></span><br><span class="line">    <span class="attr">bucketName:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><h1 id="使用-ConfigurationProperties自动绑定"><a href="#使用-ConfigurationProperties自动绑定" class="headerlink" title="使用@ConfigurationProperties自动绑定"></a>使用@ConfigurationProperties自动绑定</h1><ol><li>先使用<code>@Data</code> 注解来生成<code>getter/setter</code>方法</li><li>在使用<code>@component</code> 注解来将这个类注册为Spring Bean，被Spring管理</li><li>使用<code>@ConfigurationProperties</code>注解来绑定配置参数，<code>prefix</code>属性指定配置参数的前缀</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;r2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R2Config</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要使用的类中使用<code>@Autowired</code>注解来注入这个<code>R2Config</code>类,并且使用<code>get/set</code>方法来获取配置参数</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare R2 Java连接工具类</title>
      <link href="/posts/Cloudflare%20R2.html"/>
      <url>/posts/Cloudflare%20R2.html</url>
      
        <content type="html"><![CDATA[<p>Cloudflare R2是一个基于Amazon S3 API的云存储服务，它允许您存储和检索对象，如图像、视频、音频和文档。</p><p>Cloudflare R2使用Amazon S3 API，因此您可以使用任何Amazon S3 SDK或工具来与R2进行交互。</p><p>引入Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>s3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.27.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.AwsBasicCredentials;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.regions.Region;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.S3Client;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.model.PutObjectResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R2Utils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;&lt;your-access-key-id&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secretAccessKey</span> <span class="operator">=</span> <span class="string">&quot;&lt;your-secret-access-key&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://&lt;your-access-id&gt;.r2.cloudflarestorage.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;&lt;your-bucket-name&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建S3客户端</span></span><br><span class="line">        <span class="type">S3Client</span> <span class="variable">s3</span> <span class="operator">=</span> S3Client.builder()</span><br><span class="line">                .endpointOverride(URI.create(endpoint))</span><br><span class="line">                .region(Region.US_EAST_1)  <span class="comment">// Cloudflare R2区域（选择合适的区域）</span></span><br><span class="line">                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(accessKeyId, secretAccessKey)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件</span></span><br><span class="line">        <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span> PutObjectRequest.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .key(file.getOriginalFilename())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">PutObjectResponse</span> <span class="variable">response</span> <span class="operator">=</span> s3.putObject(</span><br><span class="line">                putObjectRequest,</span><br><span class="line">                software.amazon.awssdk.core.sync.RequestBody.fromBytes(file.getBytes())</span><br><span class="line">        );</span><br><span class="line">        log.info(<span class="string">&quot;File uploaded successfully: &#123;&#125;&quot;</span> , response.eTag());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭S3客户端</span></span><br><span class="line">        s3.close();</span><br><span class="line">        <span class="comment">// 拼接URL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://&lt;your-domain&gt;/&quot;</span>+file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb常用注解</title>
      <link href="/posts/JavaWeb%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html"/>
      <url>/posts/JavaWeb%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/springbootfilrtree.png" alt="SpringBoot-Web文件目录"></p><h1 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加数据库</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/nodaoli</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">nodaoli</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">nodaoli</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 添加MyBatis的日志，可以使用@Slf4j注解,log.info()静态方法输出日志</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 添加MyBatis的驼峰命名自动转换</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置单个文件的最大上传大小</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="comment"># 配置多个文件的最大上传大小</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Controller层注解"><a href="#Controller层注解" class="headerlink" title="Controller层注解"></a>Controller层注解</h1><p>对于类的注解，<code>@Controller</code>和<code>@RestController</code>的区别：</p><blockquote><p><code>@Controller</code> 和 <code>@RestController</code>都是用于定义控制器的注解，它们的作用相同，都是用于定义控制器，但<code>@RestController</code>注解是<code>@Controller</code>和<code>@ResponseBody</code>的组合注解，用于定义控制器，并返回JSON数据。</p></blockquote><p>对于方法的注解，<code>@RequestMapping</code>以及<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>的区别：</p><blockquote><p><code>@RequestMapping</code>用于定义请求映射，用于映射请求的URL和请求的方法。<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>是<code>@RequestMapping</code>的子注解，用于定义请求映射，并指定请求的方法。</p></blockquote><h2 id="当传入的参数是访问路径、可变参数的时候"><a href="#当传入的参数是访问路径、可变参数的时候" class="headerlink" title="当传入的参数是访问路径、可变参数的时候"></a>当传入的参数是访问路径、可变参数的时候</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id=&#123;&#125;&quot;</span>,id;</span><br><span class="line">    <span class="comment">// 访问路径：/user/1</span></span><br><span class="line">    <span class="comment">// 返回：id=1</span></span><br><span class="line">    <span class="comment">// 访问路径：/user/2</span></span><br><span class="line">    <span class="comment">// 返回：id=2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@PathVariable(“id”) 是把传入的参数取别名，并设置为可变参数<br>{}相当于一个占位符，可以替换为任意字符串</p></blockquote><h2 id="使用共同请求的路径"><a href="#使用共同请求的路径" class="headerlink" title="使用共同请求的路径"></a>使用共同请求的路径</h2><p>这样所有请求带有<code>/user</code>前缀都会被映射到UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给参数添加默认值"><a href="#给参数添加默认值" class="headerlink" title="给参数添加默认值"></a>给参数添加默认值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id=&#123;&#125;&quot;</span>,id;</span><br><span class="line">    <span class="comment">// 访问路径：/user/1</span></span><br><span class="line">    <span class="comment">// 返回：id=1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@RequestParam(defaultValue &#x3D; “1”) 是给参数设置一个默认值，如果没有传入参数，则使用默认值</p></blockquote><h1 id="Service层注解"><a href="#Service层注解" class="headerlink" title="Service层注解"></a>Service层注解</h1><p>在接口和实现类都添加<code>@Service</code>注解就好了</p><h1 id="Mapper-Dao层注解"><a href="#Mapper-Dao层注解" class="headerlink" title="Mapper&#x2F;Dao层注解"></a>Mapper&#x2F;Dao层注解</h1><p>在类上添加<code>@Mapper</code>注解，在方法上添加<code>@Select</code>、<code>@Insert</code>、<code>@Update</code>、<code>@Delete</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动递增的主键id，在新增时才能获取到数据库生成的id，不然为空</span></span><br><span class="line"><span class="meta">@Options(keyProperty = &quot;id&quot;,useGeneratedKeys = true)</span></span><br></pre></td></tr></table></figure><h1 id="Mybatis配置注解"><a href="#Mybatis配置注解" class="headerlink" title="Mybatis配置注解"></a>Mybatis配置注解</h1><p>在配置文件中添加</p><div class="note default modern"><p>mybatis.configuration.map-underscore-to-camel-case&#x3D;true</p></div><p>可以自动将数据库中的下划线转换为驼峰命名</p><p>在配置文件中添加</p><div class="note default modern"><p>mybatis.configuration.log-impl&#x3D;org.apache.ibatis.logging.stdout.StdOutImpl</p></div><p>可以打印MyBatis的日志</p><p>在类使用<code>@Slf4j</code>注解，可以自动注入一个日志对象，使用<code>log.info()</code>方法输出日志</p><h1 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h1><p>在类上添加<code>@Component</code>注解，在方法上添加<code>@Autowired</code>注解，就可以自动装配了</p><h1 id="自动转换JSON对象忽略密码"><a href="#自动转换JSON对象忽略密码" class="headerlink" title="自动转换JSON对象忽略密码"></a>自动转换JSON对象忽略密码</h1><p>在类上添加<code>@JsonIgnoreProperties(&#123;&quot;password&quot;&#125;)</code>注解，就可以自动转换JSON对象忽略密码了</p><p>或者在方法上添加<code>@JsonIgnore</code>注解，就可以自动转换JSON对象忽略密码了</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash for Windows 便携版</title>
      <link href="/posts/Clash%20for%20Windows%20%E4%BE%BF%E6%90%BA%E7%89%88.html"/>
      <url>/posts/Clash%20for%20Windows%20%E4%BE%BF%E6%90%BA%E7%89%88.html</url>
      
        <content type="html"><![CDATA[<p>当软件可执行文件当前目录中新建一个名为<code>data</code>的文件夹，便携模式会将此文件夹将作为基础启动文件夹，作为<code>Home Directory</code></p><p>在不同系统上，可执行文件位置有所不同：</p><blockquote><p>Windows：安装目录中Clash for Windows.exe<br>macOS：软件包目录中&#x2F;Contents&#x2F;MacOS&#x2F;Clash for Windows</p></blockquote><p>当文件夹存在时，重启软件即可进入便携模式，此时软件将会读取&#x2F;写入数据至该目录</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 依赖注入</title>
      <link href="/posts/Spring%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html"/>
      <url>/posts/Spring%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>个人理解:注入是在一个配置文件中设置类,对象的属性值。</p></div><div class="tip info"><p>通俗理解:</p><ol><li>原生注入就是在源码封装的类中使用<code>set</code>和<code>get</code>方法</li><li>Spring bean注入就是在<code>Spring配置文件.xml</code>中的<code>&lt;bean&gt;</code>标签,使用<code>&lt;property&gt;</code>设置属性值</li></ol></div><h1 id="原生set注入方法"><a href="#原生set注入方法" class="headerlink" title="原生set注入方法"></a>原生set注入方法</h1><p>我们封装了一个类,创建对象的时候,通过<strong>原生</strong>的<code>set</code>和<code>get</code>方法设置访问对象</p><p>或者通过构造器注入(也就是自动构造器)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">book</span><span class="params">(String bname, String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bname = bname;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBname</span><span class="params">(String bname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBauthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBauthor</span><span class="params">(String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">book</span>();</span><br><span class="line">        <span class="comment">// 原生的set方法,注入属性值</span></span><br><span class="line">        book1.setBname(<span class="string">&quot;我的世界&quot;</span>);</span><br><span class="line">        book1.setBauthor(<span class="string">&quot;nodaoli&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(book1.getBname());</span><br><span class="line">        System.out.println(book1.getBauthor());</span><br><span class="line"></span><br><span class="line">        <span class="type">book</span> <span class="variable">book2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">book</span>(<span class="string">&quot;富爸爸和穷爸爸&quot;</span>,<span class="string">&quot;icewolf-li&quot;</span>);</span><br><span class="line">        <span class="comment">// 构造器参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-bean注入-基于set方法注入"><a href="#Spring-bean注入-基于set方法注入" class="headerlink" title="Spring bean注入(基于set方法注入)"></a>Spring bean注入(基于set方法注入)</h1><p>在Spring配置文件<code>bean-di.xml</code>中</p><div class="note danger modern"><p>必须有<code>set</code>和<code>get</code>方法,name的值是属性名,value的值是属性值</p><p>ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.nodaoli.spring6.iocxml.di.book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;永劫无间&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;网易&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><div class="tabs" id="依赖注入"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="依赖注入-1">book.java</button><button type="button" class="tab " data-href="依赖注入-2">bean-di.xml</button></ul><div class="tab-contents"><div class="tab-item-content active" id="依赖注入-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nodaoli.spring6.iocxml.di;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">book</span><span class="params">(String bname, String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bname = bname;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBname</span><span class="params">(String bname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBauthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBauthor</span><span class="params">(String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;book_name:\t&quot;</span> + <span class="built_in">this</span>.bname + <span class="string">&quot;\n book_author:\t&quot;</span> + <span class="built_in">this</span>.bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">book</span>();</span><br><span class="line">        book.setBname(<span class="string">&quot;我的世界&quot;</span>);</span><br><span class="line">        book.setBauthor(<span class="string">&quot;nodaoli&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(book.getBname());</span><br><span class="line">        System.out.println(book.getBauthor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="依赖注入-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    1. 基于set方法注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.nodaoli.spring6.iocxml.di.book&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        在这里输入set方法的属性名和属性值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;永劫无间&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;网易&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    2. 基于构造器注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookCon&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.nodaoli.spring6.iocxml.di.book&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        使用name和value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java开发&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        使用下标索引和value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nodaoli&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="特殊注入"><a href="#特殊注入" class="headerlink" title="特殊注入"></a>特殊注入</h1><h2 id="注入map"><a href="#注入map" class="headerlink" title="注入map"></a>注入map</h2><p>在<code>student.java</code>有个属性</p><blockquote><p>private Map&lt;String ,Teacher&gt; teacherMap;</p></blockquote><p>在Spring的配置文件中<code>bean-di-map.xml</code>,定义bean:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.nodaoli.spring6.iocxml.dimap.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选择map类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个 entry 为一组 键值对 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置键值对key的值,而不是value的值 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置键值对value的值,这里是引用bean,非字面字符 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherone&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teachertwo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 简写在一条语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacherthree&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>命令</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">map</td><td align="center">map类型</td></tr><tr><td align="center">entry</td><td align="center">一组键值对</td></tr><tr><td align="center">key</td><td align="center">键值对的键</td></tr><tr><td align="center">value</td><td align="center">键值对的值</td></tr><tr><td align="center">ref</td><td align="center">引用</td></tr><tr><td align="center">key-ref</td><td align="center"></td></tr><tr><td align="center">value-ref</td><td align="center"></td></tr></tbody></table><h2 id="引用集合类型的bean"><a href="#引用集合类型的bean" class="headerlink" title="引用集合类型的bean"></a>引用集合类型的bean</h2><p>添加<code>xml命名空间</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>util:类型</code>定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;lessonone&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;lessontwo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teachers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherone&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teachertwo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在bean中使用<code>ref</code>引用就行</p><h1 id="引入外部属性文件"><a href="#引入外部属性文件" class="headerlink" title="引入外部属性文件"></a>引入外部属性文件</h1><div class="tip info"><p>个人理解:<br>就像是配置文件一样,在外部定义属性和值</p></div><p>把一些固定的外部值,方便修改,不用动Spring的配置,例如数据库配置文件</p><p>首先需要在 XML 配置的一级标签 中添加 context 相关的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>resources</code>创建<code>jdbc.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IoC控制反转</title>
      <link href="/posts/IoC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC.html"/>
      <url>/posts/IoC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/IOC.png"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Spring 通过 IoC 容器来管理所有 Java 对象的<code>实例化和初始化</code>，控制对象与对象之间的依赖关系。</p><p>我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象<code>没有任何区别</code>。</p><p><code>bean定义信息</code>：我在配置文件中（xml）中配置好我需要的类的信息（我需要什么对象），把这个信息交给IoC容器（告诉IOC我要的对象），让IOC给我返回</p><hr><p><code>DI（Dependency Injection）</code>：依赖注入，依赖注入实现了控制反转的思想</p><p>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</p><hr><p>获取Bean的三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id获取</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;id获取&quot;</span>+user1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型(class)获取</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">System.out.println(<span class="string">&quot;类型获取&quot;</span>+user2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// id和类型获取</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">System.out.println(<span class="string">&quot;id和类型获取&quot;</span>+user3);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j2 笔记</title>
      <link href="/posts/Log4j2%20%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/Log4j2%20%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="在maven中导入依赖"><a href="#在maven中导入依赖" class="headerlink" title="在maven中导入依赖"></a>在<code>maven</code>中导入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>一般<code>maven</code>项目放在<code>resources</code>目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Log4j 2 configuration file. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在Log4j 2的XML配置文件中，&lt;Configuration status=&quot;WARN&quot;&gt;这一行用于配置Log4j 2自身的日志级别。status属性设置的是Log4j 2内部事件的日志级别，这会影响Log4j 2在启动和运行时记录自身状态和内部信息的行为。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Appenders: 定义日志的输出目的地 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Console Appender: 输出日志到控制台 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Pattern Layout: 定义日志的输出格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-3level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;log&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;log/test.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Rolling File Appender: 输出日志到文件，并具有分割功能 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;logs/app.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;logs/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Pattern Layout: 定义日志的输出格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Policies: 定义触发日志分割的策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Size-Based Triggering Policy: 根据文件大小触发分割 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10 MB&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Time-Based Triggering Policy: 根据时间触发分割 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义同一文件夹内最多多少个 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Loggers: 定义日志记录器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Root Logger: 设置根日志记录器的级别和输出目的地 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引用上面定义的 Appender --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="手动添加日志"><a href="#手动添加日志" class="headerlink" title="手动添加日志"></a>手动添加日志</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getLogger()参数必须是 类名.class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">        helloworld.sayHello();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射</title>
      <link href="/posts/Java%20%E5%8F%8D%E5%B0%84.html"/>
      <url>/posts/Java%20%E5%8F%8D%E5%B0%84.html</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>类似JavaScript的DOM操作</p></div><p>可以理解为通过反射把一个类的属性,方法,拆分出来,作为一个对象来使用</p><p>例如拆分成</p><ul><li>Class对象：代表类的类型信息，可以用来获取类的静态属性，创建对象实例等。</li><li>Field对象：代表类中的字段（成员变量），可以用来获取或设置字段的值。</li><li>Method对象：代表类中的方法，可以用来调用方法。</li><li>Constructor对象：代表类的构造器，可以用来创建对象实例。</li></ul><p>假设您有一个名为Person的类，其中有一个名为name的字段和一个名为sayHello的方法。使用反射，您可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载Person类</span></span><br><span class="line">            Class&lt;?&gt; personClass = Class.forName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Person类的实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">personInstance</span> <span class="operator">=</span> personClass.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取name字段</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置name字段的值</span></span><br><span class="line">            nameField.setAccessible(<span class="literal">true</span>); <span class="comment">// 如果字段是私有的，需要这样做</span></span><br><span class="line">            nameField.set(personInstance, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取sayHello方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">sayHelloMethod</span> <span class="operator">=</span> personClass.getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用sayHello方法</span></span><br><span class="line">            sayHelloMethod.invoke(personInstance);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, my name is &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射Class.forName()</title>
      <link href="/posts/Java%20%E5%8F%8D%E5%B0%84Class.forName().html"/>
      <url>/posts/Java%20%E5%8F%8D%E5%B0%84Class.forName().html</url>
      
        <content type="html"><![CDATA[<p><strong>问题</strong></p><div class="tip warning"><p>为什么反射加载不知道的类,在使用<code>Class.forName()</code>方法时，需要指定一个类的名称,那这不就是知道了类吗?</p></div><div class="note default simple"><p>当我们使用<code>new</code>关键字创建对象时，我们的代码<strong>必须</strong>知道具体的类，编译器会在编译时检查这个类是否存在，这种方式是<span class='p red'>静态</span>的，在编译时就需要确定所有的类和对象。但是，当我们使用反射时，我们可以在程序运行时才决定使用哪个类，这样程序就可以更加灵活地响应在编译时无法预知的变化。</p><p>使用<code>Class.forName()</code>的典型场景包括：</p><ul><li>插件系统：应用程序可以加载不同的插件，而这些插件的具体类在编译时是不确定的。</li><li>配置驱动的应用程序：类的名称可以从配置文件中读取，程序根据配置来加载对应的类。</li><li>动态代理：在运行时创建接口的代理实例，这些接口的实现类是在运行时确定的。</li><li>数据库驱动加载：JDBC中经常使用Class.forName()来动态加载数据库驱动。</li></ul><p>在这些情况下，尽管我们使用<code>Class.forName()</code>时知道要加载的<span class='p red'>类名</span>，但这个类名很可能是<strong>用户输入、配置文件、或者网络传输</strong>等在程序运行时才能确定的信息，而不是在编写代码时就能固定的。因此，反射提供了一种运行时动态处理类的机制，增加了程序的灵活性和扩展性。</p></div><p>一般情况下，我们使用某个类时必定知道它<strong>是什么类</strong>，是用来<strong>做什么的</strong>。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作</p><p>假如我们有一个插件系统,让用户自己选择使用那些插件(类),所以我们不知道要加载那些类</p><p>使用一个变量作为参数传给<code>Class.forName()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要加载的类名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">            <span class="comment">// 假设这个类有一个无参的构造方法</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">            <span class="comment">// 接下来可以使用instance来调用类的方法等</span></span><br><span class="line">            System.out.println(<span class="string">&quot;类已加载并实例化：&quot;</span> + instance.getClass().getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;找不到指定的类：&quot;</span> + className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows11 任务栏程序图标丢失</title>
      <link href="/posts/windows11%20%E4%BB%BB%E5%8A%A1%E6%A0%8F%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87%E4%B8%A2%E5%A4%B1.html"/>
      <url>/posts/windows11%20%E4%BB%BB%E5%8A%A1%E6%A0%8F%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87%E4%B8%A2%E5%A4%B1.html</url>
      
        <content type="html"><![CDATA[<p>快捷键 <kbd>win</kbd> + <kbd>R</kbd>，在打开的运行窗口中输入 <code>%localappdata%</code>，回车。<br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/%25localappdata%25.png"></p><p>勾选“查看”-》“显示”-》“隐藏的项目”，展示隐藏文件</p><p>删除<code>IconCache.db</code><br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/IconCache.webp"></p><p>重启资源管理器就好了<br><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/restart_explorer.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win软件环境管理 chocolatey</title>
      <link href="/posts/win%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%20chocolatey.html"/>
      <url>/posts/win%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%20chocolatey.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://community.chocolatey.org/packages">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/community.chocolatey.org.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Chocolate</div>            <div class="tag-link-sitename"> chocolate的仓库链接</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div class="tip info"><p><code>cmd</code>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&quot;<span class="variable">%SystemRoot%</span>\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe&quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.<span class="built_in">Net</span>.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot; &amp;&amp; <span class="built_in">SET</span> &quot;<span class="built_in">PATH</span>=<span class="variable">%PATH%</span>;<span class="variable">%ALLUSERSPROFILE%</span>\chocolatey\bin&quot;</span><br></pre></td></tr></table></figure><p><code>powershell</code>安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol <span class="operator">-bor</span> <span class="number">3072</span>; <span class="built_in">iex</span> ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://community.chocolatey.org/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure></div><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Chocolatey 是一种软件管理解决方案，不同于您在 Windows 上体验过的任何解决方案。 可以这样想 - 您使用一个小 PowerShell 创建一个软件部署包，然后您可以将它部署到任何拥有 Windows 的地方(例如 Puppet、SCCM、Altiris、Connectwise Automate 等)。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><code>choco</code>是程序名</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找</span></span><br><span class="line">choco search &lt;packname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">choco install &lt;packname&gt; &lt;<span class="literal">-y</span> 自动确认安装&gt; &lt;<span class="literal">--version</span> x.y.z 指定版本&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">choco uninstall &lt;packname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他用法</span></span><br><span class="line">choco install jdk8 googlechrome vscode <span class="number">7</span>zip //一次安装多个软件包</span><br><span class="line">choco install nodejs.install <span class="literal">--version</span> <span class="number">0.10</span>.<span class="number">35</span> //安装指定版本</span><br><span class="line">choco install dev<span class="literal">-package</span>.config //安装dev<span class="literal">-package</span>.config文件内描述的所有软件包</span><br></pre></td></tr></table></figure><p>dev-package.config：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">&quot;jdk8&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">&quot;googlechrome&quot;</span> <span class="attr">version</span>=<span class="string">&quot;71.0.3578.98&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">&quot;vscode&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">&quot;7zip&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件名称随意，但是扩展名必须是<code>.config</code>。</p><p>通过<code>.config</code>的方式，就可以配置一个团队统一的开发环境，软件和版本都可以统一。这样可以为开发带来很多好处，避免由于开发环境不一样引起的各种不同错误。</p><h1 id="更改安装位置"><a href="#更改安装位置" class="headerlink" title="更改安装位置"></a>更改安装位置</h1><p><code>cmd</code>执行更改系统环境变量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setx ChocolateyInstall D:\Chocolatey /M</span><br></pre></td></tr></table></figure><h1 id="图形化工具"><a href="#图形化工具" class="headerlink" title="图形化工具"></a>图形化工具</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install chocolateygui <span class="literal">-y</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 软件 </category>
          
          <category> 包管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 筑基突破</title>
      <link href="/posts/Vue%20%E7%AD%91%E5%9F%BA%E7%AA%81%E7%A0%B4.html"/>
      <url>/posts/Vue%20%E7%AD%91%E5%9F%BA%E7%AA%81%E7%A0%B4.html</url>
      
        <content type="html"><![CDATA[<h1 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>notepad<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.global.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个文本框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.content&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加按钮 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 调用data对象的list属性,使用数组的push方法,content是双向绑定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.list.push(data.content)&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 直接把数组定义为空数组,就可以达到清空的效果 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.list = []&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 循环输出数组内容,并返回下表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.list&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- splice方法接受两个参数,第一个是下表,第二个是删除个数 --&gt;</span></span><br><span class="line">                &#123;&#123;value&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.list.splice(index,1)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印数组长度 --&gt;</span></span><br><span class="line">        &#123;&#123; data.list.length &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; createApp,reactive &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 定义一个data对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">content</span>:<span class="string">&quot;icewolf-li.top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">list</span>: [<span class="string">&#x27;不讲道李&#x27;</span>,<span class="string">&#x27;苹果&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    data</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图片轮播"><a href="#图片轮播" class="headerlink" title="图片轮播"></a>图片轮播</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片轮播<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.global.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;`img/$&#123;num&#125;.jpg`&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in 4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;jump(value)&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; createApp,ref,reactive &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                   num.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(num.<span class="property">value</span> &gt; <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        num.<span class="property">value</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                    &#125; </span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> <span class="title function_">prev</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(num.<span class="property">value</span> &lt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        num.<span class="property">value</span> = <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> <span class="title function_">jump</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span> = value</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    num,</span></span><br><span class="line"><span class="language-javascript">                    next,</span></span><br><span class="line"><span class="language-javascript">                    prev,</span></span><br><span class="line"><span class="language-javascript">                    jump</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 对象</title>
      <link href="/posts/JavaScript%20%E5%AF%B9%E8%B1%A1.html"/>
      <url>/posts/JavaScript%20%E5%AF%B9%E8%B1%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>JavaScript 中的 Array对象用于创建数组</li><li>定义<blockquote><p>var 变量名 &#x3D; new Array(元素列表); &#x2F;&#x2F; 方式一<br>var 变量名 &#x3D; [元素列表]; &#x2F;&#x2F; 方式二</p></blockquote></li><li>访问<blockquote><p>变量名[索引]&#x3D;值;</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特点：长度可变，类型可变</span></span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">b[<span class="number">10</span>] = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3, 空 ×7, 50]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line">b[<span class="number">8</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">b[<span class="number">9</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// [1, 2, 3, 空 ×5, &#x27;A&#x27;, true, 50]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><h2 id="属性、方法"><a href="#属性、方法" class="headerlink" title="属性、方法"></a>属性、方法</h2><blockquote><p><code>length</code> :设置或返回数组中元素的数量。</p></blockquote><blockquote><p><code>forEach()</code> :遍历数组中的每个有值元素，并调用一个传入的函数。<br><code>push()</code> :向数组的末尾添加一个或多个元素，并返回新的长度。<br><code>splice()</code> :从数组中删除元素。</p></blockquote><h3 id="遍历数组、lambda表达式"><a href="#遍历数组、lambda表达式" class="headerlink" title="遍历数组、lambda表达式"></a>遍历数组、lambda表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach()</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda,和java只有箭头不同，其余相同</span></span><br><span class="line">b.<span class="title function_">forEach</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h1><p><strong>概念：</strong><span class='p red'>J</span>ava<span class='p red'>S</span>cript <span class='p red'>O</span>bject <span class='p red'>N</span>otation,JavaScript对象标记法。</p><p><code>JSON</code>是通过<code>JavaScript对象标记法</code>书写的文本。</p><h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><p>定义格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">    属性名<span class="number">1</span>: 属性值<span class="number">1</span>,</span><br><span class="line">    属性名<span class="number">2</span>: 属性值<span class="number">2</span>,</span><br><span class="line">    属性名<span class="number">3</span>: 属性值<span class="number">3</span>,</span><br><span class="line">    函数名: <span class="keyword">function</span>(<span class="params">形参列表</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用格式</p><blockquote><p>对象名.属性名;<br>对象名.函数名(实参列表);</p></blockquote><p><strong>例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;TOM&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>);</span><br><span class="line">  user.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TOM&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="note primary modern"><p>JSON属性名必须加双引号</p></div><div class="note danger modern"><p>JSON格式与JavaScript对象格式相同，但是JSON格式不能调用函数。</p></div><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>使用单引号括起来</p><blockquote><p>var 变量名 &#x3D; ‘{“key1”:value1,”key2”:value2}’;</p></blockquote><p>示例，这是一个JSON字符串，不是JSON对象</p><blockquote><p>var jsonstr &#x3D; ‘{“name”:”Jerry”,”age”:18,”add”:[“北京”,”上海”,”广西”]}’</p></blockquote><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;TOM&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>);</span><br><span class="line">  user.<span class="title function_">eat</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义JSON</span></span><br><span class="line">  <span class="keyword">var</span> jsonstr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;Jerry&quot;,&quot;age&quot;:18,&quot;add&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;广西&quot;]&#125;&#x27;</span>;</span><br><span class="line">  <span class="comment">// 内置JSON的parse方法把 字符串--&gt;JS对象</span></span><br><span class="line">  <span class="keyword">var</span> jsObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonstr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(jsObject.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内置JSON的stringify方法把 JS对象--&gt;JSON字符串</span></span><br><span class="line">  <span class="keyword">var</span> jsonstr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsObject);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonstr);</span><br></pre></td></tr></table></figure><h1 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h1><p>BOM对象是浏览器对象模型，它提供了关于浏览器窗口的信息，以及控制浏览器窗口javascript对象。</p><div class="note simple"><p><strong>概念：</strong><span class='p red'>B</span>rowser <span class='p red'>O</span>bject <span class='p red'>M</span>odel,浏览器对象模型。</p><p>BOM对象有：</p><ul><li>window对象      浏览器窗口对象</li><li>location对象    地址栏对象</li><li>history对象     历史记录对象</li><li>navigator对象   浏览器对象</li><li>screen对象      屏幕对象</li></ul></div><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/windows%E5%AF%B9%E8%B1%A1.webp"></p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// alert</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// confirm 返回boolean</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="title function_">confirm</span>(<span class="string">&quot;是否删除？&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval 定时器</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是定时器，每隔3秒&quot;</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout 这是延时器</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在第5秒出现延时器&quot;</span>)</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h1 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h1><p>DOM对象是文档对象模型，它提供了对HTML文档的编程访问，它定义了如何获取、修改、添加或删除HTML元素。</p><div class="note simple"><p><strong>概念：</strong><span class='p red'>D</span>ocument <span class='p red'>O</span>bject <span class='p red'>M</span>odel,文档对象模型。</p><p>DOM对象有：</p><ul><li>Document对象    整个文档对象</li><li>Element对象     元素对象</li><li>Attribute对象   属性对象</li><li>Text对象        文本对象</li><li>Comment对象     注释对象</li></ul></div><h2 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h2><ol><li>根据id属性值获取，返回<strong>单</strong>个Element对象<blockquote><p>document.getElementById(“id”);</p></blockquote></li><li>根据标签名称获取，返回Element对象<strong>数组</strong><blockquote><p>document.getElementsByTagName(“标签名”);</p></blockquote></li><li>根据name属性值获取，返回Element对象<strong>数组</strong><blockquote><p>document.getElementsByName(“name”);</p></blockquote></li><li>根据class.属性值获取，返回Elementi对象数组<blockquote><p>document.getElementsByClassName(“class”);</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 练气大陆</title>
      <link href="/posts/Vue%20%E7%BB%83%E6%B0%94%E5%A4%A7%E9%99%86.html"/>
      <url>/posts/Vue%20%E7%BB%83%E6%B0%94%E5%A4%A7%E9%99%86.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://storage.googleapis.com/vue-mastery.appspot.com/flamelink/media/vue-mastery-logo.png">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">cn.vuejs.org</div>            <div class="tag-link-sitename"></div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h1 id="开始练气"><a href="#开始练气" class="headerlink" title="开始练气"></a>开始练气</h1><p><strong>使用CDN载入</strong></p><div class="note primary modern"><p>还是建议把js文件下载到本地使用</p></div><h2 id="全局构建版本"><a href="#全局构建版本" class="headerlink" title="全局构建版本"></a><code>全局构建版本</code></h2><div class="note info modern"><p>我的理解是:在全局中有一个<code>Vue对象</code>,使用赋值语句,会自动把<code>Vue对象</code>里相同的属性值赋给用户,这样就可以不用在每个Vue语法前加<code>Vue</code>关键字</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp, ref &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 可以使用 Vue.createApp(&#123;&#125;).mount()</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello vue!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        message</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ES-模块构建版本"><a href="#ES-模块构建版本" class="headerlink" title="ES 模块构建版本"></a><code>ES 模块构建版本</code></h2><div class="note info modern"><p>因为是模块化,所以需要使用<code>import</code>关键字导入功能</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello Vue!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        message</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info modern"><p>两者的区别在于一个是引用全局模块的<code>Vue对象</code>,另一个是从外部js文件引入<code>Vue功能模块</code></p></div><h2 id="响应式数据的实现方式"><a href="#响应式数据的实现方式" class="headerlink" title="响应式数据的实现方式"></a>响应式数据的实现方式</h2><h2 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref() 函数"></a>ref() 函数</h2><p>这是<code>组合式Api</code>推荐使用的<strong>声明响应式状态</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>ref()</code> 接收参数，并将其包裹在一个带有 <code>.value</code> 属性的 ref 对象中返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// &#123; value: 0 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><hr><p>可以在监听事件中改变一个<code>ref</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="reactive-函数"><a href="#reactive-函数" class="headerlink" title="reactive() 函数"></a>reactive() 函数</h2><p><code>reactive</code> 则是将一个<code>对象</code>转换成响应式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须是一个对象</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    num : <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">num</span>) <span class="comment">// 0</span></span><br><span class="line">count.<span class="property">num</span>++ <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><div class="note primary simple"><p>总的来说，<code>ref</code> 适用于简单数据类型的响应式处理，而 <code>reactive</code> 则适用于复杂数据类型的响应式处理。<br>此外，<code>ref</code> 可以通过 <code>.value</code> 访问值，而 <code>reactive</code> 则可以直接访问对象的属性。</p></div><h1 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup() 函数"></a>setup() 函数</h1><div class="tip info"><p><code>setup()</code>是在<code>组合式Api</code>中使用的</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const app = createApp(&#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const message = ref(&#x27;nodaoli&#x27;)</span><br><span class="line">        const count = ref(0)</span><br><span class="line">        return &#123;</span><br><span class="line">            message,</span><br><span class="line">            count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><div class="note info modern"><p>我的理解是:<br>用来定义变量并返回一个对象的引用,各种变量和方法在对象里面</p></div><h1 id="绑定-武功秘籍"><a href="#绑定-武功秘籍" class="headerlink" title="绑定 武功秘籍"></a>绑定 武功秘籍</h1><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>我们可以使用 <code>v-on</code> 来监听一下点击的事件:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定到一个methods方法中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-on:click</code> 可以写成<code>@click</code>，是它的<strong>语法糖</strong>写法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-on的语法糖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，我们也可以绑定其他的事件:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定鼠标移动事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">mousemove</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span>div的区域<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们希望一个元素绑定多个事件，这个时候可以传入一个对象:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123;click: btnClick, mousemove: mouseMove&#125;&quot;</span>&gt;</span>特殊按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-on</code> 参数传递</p><p>当通过 methods 中定义方法，以供 <code>@click</code> 调用时，需要注意参数问题</p><ul><li>情况一:如果该方法不需要额外参数，那么方法后的()可以不添加。<br>但是注意:如果方法本身中有一个参数，那么会默认将原生事件 <code>event</code> 参数传递进去</li><li>情况二:如果需要同时传入某个参数，同时需要 <code>event</code> 时，可以通过 <code>$event</code> 传入事件。</li></ul><p>例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;count&#125;&#125;次<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span>&#123;&#123;web.url&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>共计访问次数：&#123;&#123;web.user&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>访问<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 从全局构建版本中引用 createApp ref</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp, ref &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义变量</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello Vue!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义一个对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这是对象的属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>:<span class="string">&#x27;https://icewolf-li.top&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">user</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义一个方法,引用赋值给 edit</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> edit = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                message.<span class="property">value</span> = <span class="string">&#x27;I`m nodaoli&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用lambda表达式的函数定义</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue本体里面就可以直接引用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 在JavaScript需要使用value</span></span></span><br><span class="line"><span class="language-javascript">                web.<span class="property">value</span>.<span class="property">user</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 需要返回变量和函数方法,外部才能调用</span></span></span><br><span class="line"><span class="language-javascript">                web,</span></span><br><span class="line"><span class="language-javascript">                message,</span></span><br><span class="line"><span class="language-javascript">                count,</span></span><br><span class="line"><span class="language-javascript">                edit,</span></span><br><span class="line"><span class="language-javascript">                add</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载在id为app的html标签上,只能挂载一次</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>按<strong>条件显示</strong>一个元素的指令是 <code>v-show</code>,其用法基本一样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;web.show&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-else​"><a href="#v-else​" class="headerlink" title="v-else​"></a>v-else​</h2><p>你也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个“<strong>else 区块</strong>”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-else-if​"><a href="#v-else-if​" class="headerlink" title="v-else-if​"></a>v-else-if​</h2><p>顾名思义，<code>v-else-if</code> 提供的是相应于 <code>v-if</code> 的“<strong>else if 区块</strong>”。它可以连续多次重复使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和 <code>v-else</code> 类似，一个使用 <code>v-else-if</code> 的元素必须紧跟在一个 <code>v-if</code> 或一个 <code>v-else-if</code> 元素后面。</p><h2 id="v-show-VS-v-if"><a href="#v-show-VS-v-if" class="headerlink" title="v-show VS v-if"></a>v-show VS v-if</h2><div class="tip sync"><blockquote><p><code>v-if</code> 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。<br><code>v-if</code> 也是惰性的：如果在初次渲染时条件值为 <code>false</code>，则<strong>不会</strong>做任何事。条件区块只有当条件首次变为 <code>true</code> 时才被<strong>渲染</strong>。<br>相比之下，<code>v-show</code> 简单许多，元素无论初始条件如何，<strong>始终</strong>会被渲染，只有 <code>CSS display</code> 属性会被切换。<br>总的来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 <code>v-show</code> 较好；如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适。</p></blockquote></div><div class="tip info"><p>不同之处在于 <code>v-show</code> 会在 <code>DOM</code> 渲染中保留该元素；<code>v-show</code> 仅切换了该元素上名为 <code>display 的 CSS 属性</code>。</p><p><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用。</p></div><h2 id="v-bind-五系杂灵根"><a href="#v-bind-五系杂灵根" class="headerlink" title="v-bind 五系杂灵根"></a>v-bind 五系杂灵根</h2><p><code>v-bind</code>也成为<strong>动态绑定</strong></p><h3 id="绑定到属性"><a href="#绑定到属性" class="headerlink" title="绑定到属性"></a>绑定到属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>默认用法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;icewolf-li.top&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>绑定value属性<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 语法糖,使用冒号 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;web.name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip info"><p>一般是用来绑定<strong>html标签</strong>的<code>属性</code>,例如<code>src</code>,<code>class</code>,<code>value</code>等等</p><p>作用是更改标签的<code>属性</code>,不使用<code>v-bind</code>绑定的话,值是默认的字符串</p></div><h3 id="绑定到值"><a href="#绑定到值" class="headerlink" title="绑定到值"></a>绑定到值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;`img/$&#123;num&#125;.jpg`&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp,ref,reactive &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        num.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(num.<span class="property">value</span> &gt; <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          num.<span class="property">value</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        num,</span></span><br><span class="line"><span class="language-javascript">        next</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip success"><p>使用反引号和<code>${}</code>来引用变量</p></div><h2 id="v-on-运气"><a href="#v-on-运气" class="headerlink" title="v-on 运气"></a>v-on 运气</h2><p><code>v-on</code> 是绑定监听事件,<code>语法糖@</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法处理函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;functionName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 语法糖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;functionName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model-双修功法"><a href="#v-model-双修功法" class="headerlink" title="v-model 双修功法"></a>v-model 双修功法</h2><p><code>v-model</code> 可以在表单输入元素或组件上创建<strong>双向绑定</strong></p><div class="note warning modern"><p>仅限：</p><ul><li>input</li><li>select</li><li>textarea</li><li>components</li></ul><p>修饰符:</p><ul><li>.lazy - 监听 change 事件而不是 input,<strong>也就是说失去焦点或回车才更改值</strong></li><li>.number - 将输入的合法字符串转为数字</li><li>.trim - 移除输入内容两端空格</li></ul></div><blockquote><p>实时渲染 <code>&lt;input type=&quot;text&quot; v-model=&#39;data.text&#39;&gt;</code><br>非实时渲染 <code>&lt;input type=&quot;text&quot; v-model.lazy=&#39;data.text&#39;&gt;</code></p></blockquote><div class="tip success"><p>单向绑定无法从<code>input</code>传给<code>Vue对象</code>,双向绑定可以</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本框 &#123;&#123; data.text &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>单选框 &#123;&#123; data.radio &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>多选框 &#123;&#123; data.checkbox &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>复选框 &#123;&#123; data.remember &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉框 &#123;&#123; data.select &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单向数据绑定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&#x27;data.text&#x27;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 双向数据绑定 实时渲染--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;data.text&#x27;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 双向数据绑定lazy,失去焦点或回车才渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&#x27;data.text&#x27;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>one</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>tow</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>one</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>tow</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.remember&quot;</span>&gt;</span>记住我</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 下拉框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;data.select&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>tow<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp,reactive &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;icewolf-li.top&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">radio</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">//单选框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">checkbox</span>: [],<span class="comment">//多选框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">remember</span>: <span class="literal">false</span>,<span class="comment">//复选框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">select</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">//下拉框</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        data</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for-一气化三清"><a href="#v-for-一气化三清" class="headerlink" title="v-for 一气化三清"></a>v-for 一气化三清</h2><p><code>v-for</code> 指令基于一个<strong>数组</strong>来渲染一个列表。<code>v-for</code> 指令的值需要使用 <code>item</code> in <code>items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的别名：</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
      <url>/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>推荐在线网站<br><a href="https://regex101.com/">https://regex101.com</a><br><a href="https://geek-docs.com/java/java-tutorial/regex.html">https://geek-docs.com/java/java-tutorial/regex.html</a></p></blockquote><h1 id="Java中的语法参照表"><a href="#Java中的语法参照表" class="headerlink" title="Java中的语法参照表"></a>Java中的语法参照表</h1><p>Java 具有用于处理正则表达式的内置 API。 它位于<code>java.util.regex</code>中。</p><blockquote><p><code>Pattern</code>就是<strong>regex正则表达式的对象</strong>,返回一个Pattern对象<br><code>Matcher</code>是进<strong>行匹配操作的对象</strong>,返回<code>true/false</code></p></blockquote><table><thead><tr><th align="center">正则表达式</th><th align="center">含义</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配任何单个字符。</td><td align="center"><a href="#.">示例</a></td></tr><tr><td align="center">?</td><td align="center">一次匹配或根本不匹配前面的元素。</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">与前面的元素匹配一次或多次。</td><td align="center"></td></tr><tr><td align="center">*</td><td align="center">与前面的元素匹配零次或多次。</td><td align="center"></td></tr><tr><td align="center">^</td><td align="center">匹配字符串中的起始位置。</td><td align="center"></td></tr><tr><td align="center">$</td><td align="center">匹配字符串中的结束位置。</td><td align="center"></td></tr><tr><td align="center">|</td><td align="center">备用运算符。</td><td align="center"></td></tr><tr><td align="center">[abc]</td><td align="center">匹配 a 或 b 或 c。</td><td align="center"></td></tr><tr><td align="center">[a-c]</td><td align="center">范围; 匹配 a 或 b 或 c。</td><td align="center"></td></tr><tr><td align="center">[^abc]</td><td align="center">否定，匹配除 a 或 b 或 c 之外的所有内容。</td><td align="center"></td></tr><tr><td align="center">\s</td><td align="center">匹配空白字符。</td><td align="center"><a href="#s">示例</a></td></tr><tr><td align="center">\w</td><td align="center">匹配单词字符； 等同于[a-zA-Z_0-9]</td><td align="center"><a href="#w">示例</a></td></tr><tr><td align="center">\d</td><td align="center">匹配单词字符； 等同于[0-9]</td><td align="center"><a href="#d">示例</a></td></tr></tbody></table><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id=""><a href="#" class="headerlink" title=". "></a><code>.</code> <a id="."></a></h2><p>正则表达式a.c中间的.可以匹配一个任意字符，例如，下面的字符串都可以被匹配：</p><blockquote><p><code>abc</code>，因为.可以匹配字符b；<br><code>a&amp;c</code>，因为.可以匹配字符&amp;；<br><code>acc</code>，因为.可以匹配字符c。  </p></blockquote><p>但它不能匹配<code>ac</code>、<code>a&amp;&amp;c</code>，因为.匹配一个字符且仅限一个字符。</p><h2 id="s"><a href="#s" class="headerlink" title="\s "></a><code>\s</code> <a id="s"></a></h2><p>a\sc可以匹配：</p><blockquote><p><code>a c</code>，因为\s可以匹配空格字符；<br><code>a c</code>，因为\s可以匹配tab字符\t。  </p></blockquote><p>它不能匹配<code>ac</code>，<code>abc</code>等。</p><h2 id="w"><a href="#w" class="headerlink" title="\w "></a><code>\w</code> <a id="w"></a></h2><p>用<code>\w</code>可以匹配一个字母、数字或下划线，w的意思是word。例如，java\w可以匹配：</p><blockquote><p><code>javac</code>，因为\w可以匹配英文字符c；<br><code>java9</code>，因为\w可以匹配数字字符9；。<br><code>java_</code>，因为\w可以匹配下划线_。</p></blockquote><p>它不能匹配<code>java#</code>，<code>java </code>，因为\w不能匹配#、空格等字符。</p><h2 id="d"><a href="#d" class="headerlink" title="\d "></a><code>\d</code> <a id="d"></a></h2><p>正则表达式00\d可以匹配：</p><blockquote><p><code>007</code>，因为\d可以匹配字符7；<br><code>008</code>，因为\d可以匹配字符8。</p></blockquote><p>它不能匹配<code>00A</code>，<code>0077</code>，因为\d仅限单个数字字符。</p><div class="note primary modern"><p><code>\D</code>大写的D就是反向,不能为数字</p></div><h1 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h1><p>使用<code>()</code>来把匹配的内容分组</p><p><code>(?&lt;name&gt;...)</code><br>自定义捕获组的名称,后面使用<code>$&#123;name&#125;</code>调用</p><blockquote><p>正确答案.*(?<answer>[A-D])</p></blockquote><div class="note default simple"><p>匹配”正确答案”,再匹配它后面的空白符”.*”星号是说明点号多个匹配,捕获组名称为<code>answer</code>,匹配<code>ABCD</code>四种字母</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则表达式匹配 &quot;正确答案&quot; 后面的任意一个字母，并使用捕获组</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;正确答案.*(?&lt;answer&gt;[A-D])&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> p.matcher(line);</span><br><span class="line"><span class="comment">// 如果匹配成功，则替换为自定义的字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replacedLine</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;正确答案: &#123;% hideInline $&#123;answer&#125; %&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Illustrator试题及答案</title>
      <link href="/posts/Illustrator%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88.html"/>
      <url>/posts/Illustrator%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88.html</url>
      
        <content type="html"><![CDATA[<p>Illustrator试题及答案</p><p>一、单选题（共60题）</p><p>1、分别把基本形体按大小、方向、疏密、虚实、色彩等规律进行视觉构成的方法是（  ）构成法。<br>A.近似<br>B.渐变<br>C.发射<br>D.空间<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>2、下列对线的说法错误的是（  ）。<br>A.水平直线安定稳妥，具有平静永恒的性格，保守、寂寞、没有生气。<br>B.垂直线严谨、坚挺、向上，视觉紧张感强烈，是阳刚的线。<br>C.几何曲线打破了空间的稳定性，产生不安定的因素，是有方向感和运动感的线。<br>D.折线有指示性和方向性，具有强烈的运动感和刺激感。<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>3、（  ）是版式设计中最常见的方式，也是最符合视觉心理学，阅读最舒服的方<br>式。<br>A.左对齐<br>B.右对齐<br>C.中对齐<br>D.两端对齐<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>4、（ ）是指对事物进行有规律的组织和安排，在版式设计中指合理安排版面构<br>成元素的布局关系。<br>A.对比法则<br>B.层次法则<br>C.聚拢法则<br>D.网格法则<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>5、（ ）图片在实际应用中一般以透明背景呈现，能有效地排除其他干扰元素，<br>突出主体形象。<br>A.全图<br>B.出血图<br>C.形状图<br>D.退底图<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p> 6、哪个不是平面构成的视觉构成元素（   ）？<br>A.有机形<br>B.偶然形<br>C.自然形<br>D.创意图形<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>7、一些关于点的特征描述，错误的是（   ）？<br>A.点是一个视觉形象，有大有小，真实存在<br>B.在限定范围内，点的大小是有限度的，超过限度点就成为面了<br>C.有位置、方向、长度，形状、宽度的表征因素<br>D.形成点在于它与空间面积的对比大小<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>8、 以下哪项属于色立体的名称（   ）？<br>A.奥斯特瓦德<br>B.CCID<br>C.梦迪<br>D.HVC<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>9、 色彩对比构成规律不包括（    ）?<br>A.明度对比规律<br>B.形状对比规<br>C.肌理对比规律<br>D.面积对比规律<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>10、 下列不是印刷的原始纸张常规规格是（    ）？<br>A. 787mm×1092mm<br>B. 850mm×1168mm<br>C.1024mm×768mm<br>D.880mm×1230mm<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>11、版式设计法则不包括（    ）项？<br>A.统一、节奏<br>B.对齐、平衡<br>C.留白、聚拢<br>D.肌理、结构<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>12、 以下哪项是提炼和挖掘图形意义的手段（    ）？<br>A.数据分析<br>B.象征比拟<br>C.调查问卷<br>D.案例分析<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>13、常见的图形创意表现形式与手法不包括（    ）？<br>A.双关图形法<br>B.异影图形法<br>C.多维图形法<br>D.结构图形法<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>14、字体的自然属性不包括（    ）<br>A.字体单位<br>B.字间距<br>C.字体结构<br>D.字体样式<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>15、以下哪项不是文字编排方式是（    ）？<br>A.线性排列<br>B.点状排列<br>C.面化排列<br>D.左对齐排列<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>16、下面格式中不能在 Photoshop 中直接输出的文件格式是（ ）<br>A.PSD       B.JPEG        C.PDF      D.DOC<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>17、在使用椭圆形工具绘制圆形选区时，在按住（ ）键的同时拖动鼠标可实现<br>正圆形选区的创建。<br>A.Shift       B.空格        C.Alt     D.Ctrl<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>18、我们常用（ ）工具来绘制路径。<br>A.毛笔         B.铅笔       C.钢笔      D.画笔<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>19、 在用选择工具进行选区操作时，要将已经选择区域中祛除部分内容，可以在<br>工具箱中选择某一种选择工具，再在工具属性栏上单击（ ）按钮，然后在图像<br>上进行选择。<br>A.从选区减去     B.新选区   C.与选区交叉    D.添加到选区<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>20、[魔棒工具]和[磁性套索工具]的工作原理都是（ ）。<br>A. 根据取样点的颜色像素来选择图像<br>B. 根据取样点的生成频率来选择图像<br>C. 设定取样点，一次性选取与取样点颜色相同的图像<br>D. 根据[容差]值来控制选取范围，取值范围为“0～255”之间<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>21、在Adobe Illustrator中，若当前文件中的图形复杂，为了加快屏幕刷新速度，最直接快速并且简单的方式是：<br>　　1： 增加运行所需的内存<br>　　2： 增加运行所需的显示内存<br>　　3： 将当前不编辑的部分隐藏<br>　　4： 通过View&gt;Outline(视野&gt;轮廓)命令使图形只显示线条部分<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>　　<br>22、 在Edit&gt;Preference&gt;General(编辑&gt;预置&gt;一般)对话框中可设定Constrain Angle(角度限制)的数值，其默认的内定角度值是:<br>　　A： 0度<br>　　B： 10度<br>　　C： 15度<br>　　D： 45度<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>23、 在Edit&gt;Preference&gt;General(编辑&gt;预置&gt;一般)对话框中可设定Constrain Angle(角度限制)的数值，它是用来：<br>　　A： 设定旋转工具的角度<br>　　B： 设定坐标轴的角度<br>　　C： 设定缩放工具的角度<br>　　D： 设定移动工具的角度<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span><br>　　<br>24、 在Edit&gt;Preference&gt;Units &amp; Undos(编辑&gt;预置&gt;单位和还原)对话框中可设定还原操作的次数，下列叙述正确的是：<br>　　A： Adobe Illustrator 最多可设定50步还原操作<br>　　B： Adobe Illustrator 最多可设定200步还原操作<br>　　C： Adobe Illustrator 最多可设定99步还原操作<br>　　D： 只要你有足够的内存，可设定无限多步还原操作<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span><br>　　<br>25、 在图形文件中进行颜色设定时应以?<br>　　A： 显示器为准<br>　　B： 感觉为准<br>　　C： 颜色数值为准<br>　D： 打样为准<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span><br>　　<br>26、 在执行滤镜命令的过程中，中途取消操作的快捷键是?<br>　　A： Shift<br>　　B： Esc(Windows)&#x2F;Command+.(Mac OS)<br>　　C： Alt(Windows)&#x2F;Option(Mac OS)<br>　　D： Return<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>27、 不论你当前正在使用何种工具，当按下列哪一个键就可切换到上次使用过的选择工具?<br>　　A： Shift键<br>　　B： Command(Mac OS)&#x2F;Ctrl(Windows)键<br>　　C： 空格键<br>　　D： Tab键<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span><br>　　<br>28、 按住下列哪个键的同时，单击工具箱中的工具图标可切换隐含的工具?<br>　　A： Tab键<br>　　B： Shift键<br>　　C： Esc键<br>　　D： Option(Mac OS)&#x2F;Alt(Windows)键<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>29、 按下列哪个键可将桌面上所有的浮动调板全部隐藏?<br>　　A： Shift键<br>　　B： Option(Mac OS)&#x2F;Alt(Windows)键<br>　　C： Return键<br>　　D： Tab键<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>　　<br>30、 在Illustrator工具箱的最底部可设定三种不同的窗口显示模式：标准模式、带菜单栏的全屏显示模式和不带菜单栏的全屏显示模式，请问在英文状态下，按下列哪个键可在三种模式之间进行切换?<br>　　A： Tab键<br>　　B： 字母F键<br>　　C： 字母S键<br>　　D： Shift键<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span><br>31、 在Adobe Illustrator中，若要改变标尺的单位，可将鼠标放在标尺处，按住下列哪个快捷键的同时单击鼠标就可弹出标尺单位菜单?<br>　　A： Shift键<br>　　B： Caps lock(大写锁定)键<br>　　C： 鼠标右键(Windows)&#x2F;Ctrl(Mac OS)<br>　　D： Ctrl(Windows)&#x2F;Command(Mac OS)<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>32、 在Adobe Illustrator 中，敲击下列哪个键可关闭除了工具箱之外的所有其它调板?<br>　　A： Tab键<br>　　B： Shift+Tab键<br>　　C： Shift键<br>　　D： Option(Mac OS)&#x2F;Alt(Windows)键<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>33、 在Adobe Illustrator 中，当使用其它工具时，若要临时切换为放大镜工具，可按住下列哪个键?<br>　　A： Shift键<br>　　B： Option(Mac OS)&#x2F;Alt(Windows)键<br>　  C： Tab+Shift键<br>　　D： 空格键+Command(Mac OS) &#x2F;空格键+Ctrl(Windows)<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>34、 当敲击下列哪一个键就可将工具箱隐藏?<br>　　A： Shift键<br>　　B： Command(Mac)&#x2F;Ctrl(Win)键<br>　　C： 空格键<br>　　D： Tab键<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>35、 在Adobe Illustrator 中，下列关于参考线的描述哪个是不正确的?<br>　　A： 任意形状的路径都可以转换为参考线<br>　　B： 参考线可以设定成实线显示，也可设定为虚线显示<br>　　C： 参考线是不能被锁定的<br>　　D： 参考线可以转变成普通的路径<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>36、 在Adobe Illustrator 中，当对一个有填充色的颜色块执行Object&gt;Rasterize(图形&gt;光栅化)命令时，在弹出的对话框中，Color Model(颜色模型)中只有RGB、Grayscale(灰度)、Bitmap(点阵)三种可以选择，请问是下列哪种原因造成的?<br>　　A： 当前选中的颜色块的填充色是RGB模型的颜色<br>　　B： 当前文件的色彩模式是RGB、Grayscale(灰度)、Bitmap(点阵)中一种<br>　　C： 当前文件的色彩模式是RGB<br>　　D： 当前选中的颜色块的填充色是RGB或Grayscale(灰度)模型的颜色<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>37、 在Adobe Illustrator 中，下列描述哪个是不正确的?<br>　　A： Illustrator 的文件置入的图像分为嵌入和链接两种方式<br>　　B： Illustrator 文件中的图形可以通过Object&gt;Rasterize(图形&gt;光栅化)命令转换为像素图<br>　　C： Illustrator 的文件置入的图像只能是链接的方式<br>　　D： Illustrator 中的图形转化成像素图后可以执行Effect(效果)菜单下的Photoshop滤镜效果<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>38、 下列有关Pen Tool(钢笔工具)的描述不正确的是：<br>　　A： 使用钢笔工具绘制直线路径时，确定起始点需要按住鼠标键拖拉出一个方向线后，再确定下一个节点<br>　　B： 选中工具箱中的钢笔工具，将光标移到页面上， 钢笔工具右下角显示“X”符号，表示将开始画一个新路径<br>　　C： 当用钢笔工具绘制曲线时，曲线上节点的方向线和方向点的位置确定了曲线段的形状<br>　　D： 在使用钢笔工具绘制直线的过程中，按住Shift键，可以得到0度，45度或45度的’整数倍方向的直线<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>39、 在路径绘制中，可以增加锚点、删除锚点以及转换锚点，下列关于锚点编辑描述不正确的是：<br>　　A： 增加锚点工具在路径上任意位置单击就可以增加一个锚点，但是只可以在闭合路径上使用<br>　　B： 使用钢笔工具在锚点上单击，就可以删除该锚点<br>　　C： 如果要在路径上均匀地增加锚点，则选择Object(图形)&gt;Path(路径)&gt;Add Anchor Points(增加锚点)菜单命令，原有的两个锚点中间就增加了一个锚点<br>　　D： 转换锚点工具可将直线点转变成曲线点，也可以将曲线点转换为直线点<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>40、 下列有关旋转工具(Rotate Tool)的使用那些是不正确的?<br>　　A： 如果要精确控制旋转的角度，可以打开旋转工具(Rotate Tool)对话框，在Angle(角度)后面的数字框中输入旋转的角度值即可<br>　　B： 使用旋转工具(Rotate Tool)旋转图形时，旋转基准点就是图形的中心点，是不可以改变的<br>　　C： 使用旋转工具(Rotate Tool)旋转图形时，旋转基准点的位置是可以改变的<br>　　D： 在使用旋转工具(Rotate Tool)进行旋转图形的过程中，按住Option(Mac OS)&#x2F;Alt(Windows)键可以同时进行图形的复制<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>41、 下列有关镜像对称工具(Reflect Tool)的叙述哪些是不正确的?<br>　　A： 通过打开镜像对称工具对话框的方式来精确定义对称轴的角度<br>　　B： 在使用镜像对称工具时，需要先确定轴心<br>　　C： 对称轴的轴心位置必须在图形内部<br>　　D： 对称轴可以是水平的、垂直的也可以是任意角度的<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>42、 下列有关倾斜工具(Shear Tool)的叙述那些是不正确的?<br>　　A： 利用倾斜工具使图形发生倾斜前，应先确定倾斜的基准点<br>　　B： 用鼠标拖拉一个矩形倾斜的过程中，按住Option(Mac OS)&#x2F;Alt(Windows)键，原来的矩形保持位置不变，新复制的矩形相对于原来的矩形倾斜了一个角度<br>　　C： 在倾斜工具的对话框中，Shear Angle(倾斜角度)和Axis(轴)中的Angle(角度)定义的角度必须完全相同<br>　　D： 精确定义倾斜的角度，需打开倾斜工具的对话框，设定Shear Angle(倾斜角度)及Axis(倾斜轴)的Angle(角度)<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>43、 关于Object&gt;Transform&gt;Transform again(图形&gt;变换&gt;再次变换)命令，下面的描述哪些是不正确的?<br>　　A： “再次变换”命令可以完成物体的多次固定距离的移动(Move)及复制<br>　　B： “再次变换”命令可以完成物体的多次固定数值的旋转(Rotate)及复制<br>　　C： “再次变换”命令可以完成物体的多次固定数值的倾斜(Shear)及复制<br>　　D： “再次变换”命令可以完成物体的多次固定数值的涡形旋转(Twirl)及复制<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>44、ILLusrator 包括几种视图模式（  ）<br> A．2种      B. 3种      C.4种         D.5种<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>45、下列哪个模式可以将绘制的矢量图像转换为位图显示（  ）<br> A矢量化预览模式<br>B预览模式<br>C像素预览模式<br>D叠印预览模式<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>46、节点分为哪两种类型（  ）<br> A折点和圆点<br>B 平滑点和角点<br>C角点和圆点<br>D平滑点和圆点<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>47、复合角点是一条直线和一条曲线的交点，这种节点有几条控制线（   ）<br>A、3条    B、多条     C、2条      D、1条<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>48、下列哪个不是钢笔工具组中的工具（   ）<br>    A增加锚点工具<br>B转换锚点工具<br>C锚点透明工具<br>D删除锚点工具<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>49、选择菜单栏“文件”|“打开”命令，或按快捷键 ( ) 键。<br>A、Ctrl+A B、Ctrl+O C、Ctrl+B D、Alt+O<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>50、路径是由（   ）、线段、控制柄和控制点组成的。<br>A、终点    B、锚点    C、中点    D、起点<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>51、线形工具组包括“直线段”工具、“弧线”工具、“螺旋线”工具、“矩形网格”工具和（  ）工具。<br>A、椭圆      B、曲线     C、直角坐标    D、极坐标网格<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>52、在“变形选项”对话框中。“类型”选项的下拉列表中提供了多少种封套类型（）<br>A、16种    B、10种   C、8种   D、15种<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>53、选择网格工具，按住哪个键，单击对象上的网格点和网格线，可以减少网格封套的行数和列数。（ D ）<br>A.CTRL      B.SHIFT     C.ALT      D.DELETE<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>54、应用下列哪个选项混合图像的重叠顺序将被改变（ A ）<br>A变换每个    B排到最后面     C由前至后反转     D排到最前面<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>55、HSB模式是利用色彩的色相、（  ）和亮度来表现色彩的。<br> A、饱和度      B、表青      C、 品红      D、黄<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>56、Illustrator默认纸张大小是 （    ）<br>A、A4      B、A3      C、B5      D、32开<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>57、按（   ）键,可以显示或隐藏标尺。<br>A. CtrL+R      B. Shift+I       C. CtrL+B     D. CtrL+U<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>58、按（  ）键，可以显示或隐藏智能参考线。<br>A. Ctrl+B     B. Shift+U    C.ALT+C      D. Ctrl+U <br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>59、使用“矩形工具”或“椭圆工具”时，按（    ）键可是绘制正方形或正圆形。<br>A.Enter           B.Shift        C. Ctrl        D. Alt<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>60、 下列（   ）命令不属于“风格化”效果。<br>A.添加箭头        B.羽化       C.栅格化        D.投影<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">A</span></span></p><p>二、多选题（共40题）</p><p>1、下列是Illustrator中关于颜色定义的描述，其中正确的是：<br>　A： HSB颜色模型用色相(Hue)、饱和度(Saturation)和亮度(Bright)三个特征来描述颜色<br>　  B： Color(颜色)调板中可通过Grayscale(灰度)、HSB、RGB、CMYK、Web safe RGB(网络安全RGB)等不同的色彩模型来定义颜色<br>　　C： Grayscale(灰度)模型就是采用不同浓淡的黑色来表现层次<br>　　D： 专色是预先混合好的油墨，由印刷业使用一个标准的颜色匹配系统配置，如印刷中常用的烫金就是专色应用的例子<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>　　<br>2、下面关于Adobe Illustrator 的描述正确的是：<br>　　A： 可以制作Flash(SWF)和SVG图形<br>　　B： 可以打开Photoshop文件，但是不能保留Photoshop文件的图层、蒙板、透明和可编辑的文字<br>　　C： 可以指定专色和原色，但不可以指定Web颜色<br>　　D： 可将透明特性赋予任何物体<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>　　<br>3、 Adobe Illustrator和Photoshop之间可互相交流，但两个软件有本质的不同，下列哪种叙述是正确的?<br>　　A： Illustrator是以处理矢量图形为主的图形绘制软件，而Photoshop是以处理像素图为主的图像处理软件<br>　　B： Illustrator可存储为EPS格式，而Photoshop不可以<br>　　C： Illustrator可打开PDF格式的文件，而Photoshop不可以<br>　　D： Illustrator也可以对图形进行像素化处理，但同样的文件均存储为EPS格式后，Photoshop存储的文件要小很多，原因是它们描述信息的方式不同<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>　　<br>4、 对页面显示进行缩放的方法有下列哪几种?<br>　　A： 使用放大镜工具<br>　　B： 使用View(视野)菜单下的Zoom In(放大)、Zoom Out(缩小)命令<br>　　C： 使用Navigator(浏览器)调板<br>　　D： 使用Info(信息)调板<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span><br>　　<br>5、 下列关于标尺和参考线描述正确的是：<br>　　A： 将光标放到水平或垂直标尺上，按下鼠标，从标尺上拖出参考线到页面上，一旦将参考线放到某个位置，就再也不能移动<br>　　B： 参考线的颜色可以任意更改<br>　　C： 路径和参考线之间可以任意转化<br>　　D： 在缺省状态下，参考线是被锁定的，可以通过菜单命令解除参考线的锁定状态，解除锁定后的参考线可以通过Release Guide(释放参考线)命令将参考线转化为路径<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>　　<br>6、 下列关于图形复制的描述哪个是正确的?<br>　　A： 执行Copy(拷贝)命令后的图形，通过Paste(粘贴)命令可将图形粘贴到原图形的上面，和原图形完全重叠<br>　　B： 执行Copy(拷贝)命令后的图形，通过Paste(粘贴)命令可将图形粘贴到当前窗口的中间<br>　  C： 执行Copy(拷贝)命令后的图形，通过Paste In Front(粘贴到前面)命令可将图形粘贴到原图形的上面，和原图形完全重叠<br>　　D： 按住Option(Mac OS)&#x2F;Alt(Windows)键的同时用鼠标拖拉图形可将其复制到任何位置<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>7、下面关于Adobe Illustrator 的界面描述正确的是：<br>　　A： 启动Adobe Illustrator 后，软件就会自动建立一个大小为A4，色彩模式为RGB的新文件<br>　　B： 创建新文件时，在New Document(新文件)对话框中只有RGB和CMYK两种色彩模式可以设定<br>　　C： 创建新文件时，在New Document(新文件)对话框中可任意设定文件的大小，并且输入的时候数字及度量单位可以同时输入，如可直接输入12cm<br>　　D： 如果工具箱中某工具图标的右下角有黑色小三角，表示还有隐含的工具<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>8、 下列有关图形复制操作的描述哪些是正确的?<br>　　A： Paste In Front(粘贴在前面)命令可以原位复制物体<br>　　B： 系统的剪贴板(Clipboard)所能存储的拷贝内容和内存没有关系<br>　　C： 系统的剪贴板(Clipboard)可以同时保留两次不同的复制信息<br>　　D： 选中物体后，按住Option(Mac OS)&#x2F;Alt(Windows)键的同时拖拉物体，可将该物体复制，通过Object&gt;Transform&gt;Transform again(物体&gt;变换&gt;再次变换)命令可重复上次的复制操作<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>9、 下列描述正确的是：<br>　　A： 如果要观察图形的线条状态，可选择View &gt; Outline(视野&gt;线条)命令。用线条状态显示的好处是可以减少屏幕刷新的速度，尤其对于复杂的图形可大大提高工作效率<br>　　B： 如果要观察图形完整的绘制信息，包括颜色、渐变等，可选择View&gt;Preview(视野&gt;预视)命令<br>　　C： 可通过Window&gt;New Window(窗口&gt;新窗口)命令，对同一个文件建立两个窗口，分别显示线条状态和预视状态<br>　　D： Window&gt;New Window(窗口&gt;新窗口)命令，对同一个文件只能建立两个窗口，当创建第三个窗口时，第二个窗口会自动被替换<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>10、 在Adobe Illustrator 中，下列关于参考线的描述哪个是不正确的?<br>　　A： 参考线是不能被隐藏的<br>　　B： 参考线的颜色可以被改变<br>　　C： 参考线是不能被删除的<br>　　D： 参考线是不能被移动的<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>11、 下列哪种方式用来删除参考线?<br>　　A： 通过View&gt;Guide&gt;Clear Guide(视野&gt;参考线&gt;清除参考线)命令<br>　　B： 选中参考线后直接用键盘上的delete键<br>　　C： 选中参考线后，通过Edit&gt;Clear(编辑&gt;清除)命令<br>　　D： 通过View&gt;Guide&gt;Hide Guide(视野&gt;参考线&gt;隐藏参考线)命令<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>12、 下列关于颜色模式的描述，哪些是不正确的?<br>　　A： 在建立新文件的时候一旦选择了文件的色彩模式，就不可以修改<br>　　B： 当创建新文件的时候只能选择RGB或CMYK模式，通过File&gt;Document Color Mode(文件&gt;文档色彩模式)命令可随时更改为Grayscale(灰度)模式<br>　　C： 如果创建的文件是CMYK模式，即使置入的图像原来是RGB模式的，很多对RGB才有效的滤镜效果也不可以用<br>　　D： 如果创建的文件是RGB模式，就无法进行正确分色，而且软件也没有提供模式转换的命令，只能重新创建一个新的CMYK模式的文件重新制作<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>13、 Adobe Illustrator 中可以建立“视图”(View)以方便局部的观察，下列描述不正确的是?<br>　　A： Adobe Illustrator 只能建立一个“视图”<br>　　B： 你可以通过“编辑视图”(View&gt;Edit View)命令改变所建“视图”的名称或将其删除<br>　　C： 你可以通过“编辑视图”(View&gt;Edit View)命令改变所建“视图”的内容<br>　　D： Adobe Illustrator 中“视图”一旦建立，不会随此部分编辑内容的变化而再发生任何变化<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>14、 下列关于参考线的描述不正确的是?<br>　　A： 参考线始终在所有图形的前面<br>　　B： 参考线和图形的前后关系与绘制图形及拖拉参考线的时间先后有关<br>　　C： 参考线一般在图形的前面，但可以将参考线放在单独的层上，通过改变层的位置来改变参考线和图形的前后关系<br>　　D： 参考线始终在所有图形的后面<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>15、 下面关于开放路径和闭合路径描述不正确的是：<br>　　A： 开放路径不可以进行填充<br>　　B： 开放路径可以填充颜色，但不能填充图案和渐变色<br>　　C： 开放路径和闭合路径都可以填充颜色、图案和渐变色<br>　　D： 虽然开放路径和闭合路径一样可进行各种填充，但最后输出成胶片的时候会有问题，所以通常不建议大家对开放路径进行填充<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>16、 下列关于铅笔工具(Pencil Tool)的描述正确的是：<br>　　A： 在使用铅笔工具绘制任意路径的过程中，你无法控制锚点的位置，但可以在路径绘制完成后进行修改，如增加或删除锚点<br>　　B： 铅笔工具绘制的路径上的锚点数是由路径的长度、路径的复杂程度以及Pencil Tool Preferences(铅笔工具预置)对话框中Fidelity(精确度)和Smoothness(平滑度)的数值决定的<br>　　C： 当使用铅笔工具绘制完路径后，根据默认的设定，路径保持选中状态<br>　　D： 铅笔工具不可以绘制封闭的路径<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>17、 使用Smooth Tool(平滑工具)时，影响平滑程度的因素有：<br>　　A： 路径上节点数量的多少<br>　　B： Smooth Tool Preference(平滑工具预置)对话框中Fidelity(精确度)的数值的设定<br>　　C： 路径是否为封闭路径或者开放路径<br>　　D： 在Smooth Tool Preference(平滑工具预置))对话框中Smoothness(平滑度)的数值的设定<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>18、 下列有关橡皮工具(Erase Tool)描述不正确的是：<br>　　A： 橡皮工具只能擦除开放路径<br>　　B： 橡皮工具只能擦除路径的一部分，不能将路径全部擦除<br>　　C： 橡皮工具可以擦除文本或渐变网格<br>　　D： 橡皮工具可以擦除路径上的任意部分<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>19、 连接开放路径的两个端点使之封闭的方法有下列哪几种?<br>　　A： 使用钢笔工具连接路径<br>　　B： 使用铅笔工具连接路径<br>　　C： 选择Object&gt;Path&gt;Join(图形&gt;路径&gt;连接)命令连接路径<br>　　D： 使用PathFinder(路径寻找器)中的的Unite(交集)命令<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>20、 下列哪种工具可以将封闭的路径断开?<br>　　A： 使用Direct Selection Tool(直接选择工具)选中单个锚点后，将其拖动到其他位置即可<br>　　B： 使用Scissor Tool(剪刀工具)在路径上任意一点单击<br>　　C： 使用Knife Tool(裁刀工具)在路径上任意一点单击<br>　　D： 使用Erase Tool(橡皮工具)沿路径拖拉<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>21、 关于矩形、椭圆及圆角矩形工具的使用，下列的叙述哪些是正确的?<br>　　A： 在绘制矩形时，起始点为右下角，鼠标只需向左上角拖移，便可绘制一个矩形<br>　　B： 如果以鼠标击点为中心绘制矩形、椭圆及圆角矩形，使用工具的同时按Shift键就可实现<br>　　C： 在绘制圆角矩形时，如果希望长方形的两边呈对称的半圆形，可在Rounded Rectangle(圆角矩形)对话框中使圆角半径值大于高度的一半<br>　　D： 如果欲显示图形的中心点，首先确定图形处于选择状态，然后在Attributes(属性)调板上单击Show Center(显示中心)按钮<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>22、 下列关于各种选择工具的描述，哪个是对的?<br>　　A： 使用选择工具(注：工具箱中的黑色箭头)在路径上任何处单击就可选中整个图形或整个路径<br>　　B： 使用直接选择工具(注：工具箱中的白色箭头)可以选择路径上的单个锚点及部分路径，并且可显示锚点的方向线<br>　　C： 使用群组选择工具(注：工具箱中带加号的白色箭头)可选择成组物体中任何路径上的单个锚点，并且可显示锚点的方向线<br>　　D： 使用选择工具(注：工具箱中的黑色箭头)可选择路径上的单个锚点或部份路径，并且可显示锚点的方向线<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>23、 下列有关缩放工具(Scale Tool)的叙述那些是不正确的?<br>　　A： 缩放工具只可以对矢量图形进行缩放，不能对Illustrator中置入的像素图进行缩放<br>　　B： 缩放工具和旋转工具不同的是，旋转工具需要先确定基准点，缩放工具不需要确定基准点<br>　　C： 缩放工具和旋转工具都需要先确定基准点，并且基准点的位置可用鼠标任意移动<br>　　D： 如果想调出Scale(缩放)对话框，按住Option(Mac OS)&#x2F;Alt(Windows)键的同时单击鼠标即可，鼠标的击点将成为缩放的基准点<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>24、 下列有关Twirl Tool(涡形旋转工具)的叙述哪些是正确的?<br>　　A： 如果要制作一个风火轮的图形，只需绘制出一个正六边形，再使用Twirl Tool(涡形旋转工具)，对正六边形进行涡形旋转<br>　　B： 使用Twirl Tool(涡形旋转工具)对图形进行涡形旋转时，图形路径上的锚点属性不会发生变化<br>　　C： 如果要精确定义涡形旋转的角度，首先按住Option(Mac)&#x2F;Alt(Win)键，单击鼠标，此时就会弹出一个Twirl(涡形旋转)对话框，在Angle(角度)后面的角度框中输入相应的角度值<br>　　D： 使用Twirl Tool(涡形旋转工具)不存在对称轴的问题<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>25、 下列关于变形工具(Reshape Tool)和自由变换工具(Free Transform Tool)的描述哪些是不正确的?<br>　　A： 变形工具(Reshape Tool)可在保持图形形状的同时移动锚点<br>　　B： 使用自由变换工具(Free Transform Tool)可以使图形发生旋转(Rotate)和倾斜(Shear)<br>　　C： 自由变换工具(Free Transform Tool)可以代替涡形旋转工具(Twirl Tool)的使用<br>　　D： 变形工具(Reshape Tool)和自由变换工具(Free Transform Tool)虽然使用方法不同，但本质相同，都是用来使图形发生扭曲变形<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>26、 下列有关Transform(变换)调板的叙述哪些是不正确的?<br>　　A： 通过Transform(变换)调板可以移动、缩放、旋转和倾斜图形<br>　　B： Transform(变换)调板最下面的两个数值框的数值分别表示旋转的角度值和缩放的比例<br>　　C： 通过Transform(变换)调板移动、缩放、旋转和倾斜图形时，只能以图形的中心点为基准点<br>　　D： 在Transform(变换)调板中X和Y后面的数值分别代表图形在页面上的横坐标和纵坐标的数值<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>27、 下面有关路径操作的描述哪些是不正确的?<br>　　A： 边线只能以单一的路径形式出现，不可能转化为图形<br>　　B： 偏移路径(Object&gt;Path&gt;Offset Path)就是路径在水平或者垂直方向发生位移<br>　　C： 路径是不能填充渐变色的，但可以将路径执行描边命令(Object&gt;Path&gt;Outline Stroke)后，就可以填充渐变色<br>　　D： 偏移路径(Object&gt;Path&gt;Offset Path)就是以原路径为中心生成新的封闭图形<br>　　正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">B</span></span></p><p>28、下列哪些操作可用来进行图形的精确移动?<br>　　A： 使用鼠标拖动页面上的图形使之移动<br>　　B： 选中图形后，用键盘上的上下左右箭头键进行移动<br>　　C： 通过Info(信息)调板对图形进行精确的移动<br>　　D： 通过Move(移动)对话框对图形进行精确的移动<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>29、常用的互动区的需求分析包括以下几种？（  ）<br>A.效能分析<br>B.动线分析<br>C.场景分析<br>D.应用分析<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span><br>30、具象形态构成通常是对形态的整体或局部（  ） ，重新构成一个新的形态。<br>A.变形<br>B.打散<br>C.重组<br>D.拆分<br>  正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>31、平面设计的韵律包括以下哪几种？（  ）<br>A.连续韵律<br>B.渐变韵律<br>C.交错韵律<br>D.起伏韵律<br>  正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>32、基本形构成主要是对形和态的两方面进行调整，形是指图形的外部轮廓，态是指外部轮廓所包围的面的以下几种元素？（  ）<br>A.方向<br>B.颜色<br>C.肌理<br>D.质感<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>33、平面构成方法中的特异构成法包括以下哪几种？（  ）<br>A.框架特异<br>B.形状特异<br>C.类别特异<br>D.色彩特异<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>34、关于扁平化风格图标的表述正确的有（    ）<br>A、简约风格<br>B、有利于提高系统性能<br>C、不强调质感与细节的描摹<br>D、强调功能性<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>35、在开展设计工作之前，我们力求做到知己知彼，这里的“彼”指（   ）<br>A. 对所服务的客户的认知，和客户保持良好的沟通<br>B. 对网站目标用户的深入理解<br>C. 对竞争对手的了解<br>D. 对网站目标用户的深入理解<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>36、关于全局导航的描述正确的有（    ）<br>A. 出现在网站所有的页面中<br>B. 位置一定在网页的顶部<br>C. 体现网站最重要的内容层次结构<br>D. 帮助用户在网站中迅速定位<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>37、对于用户导向原则在网站界面设计中的具体体现描述准确的是（ABCD ）<br>A. 明确体现网站的核心功能和服务<br>B. 符合用户在使用网站时的心智模型和场景中的思维状态<br>C. 尊重人机交互中用户的生理特征<br>D. 符合用户的认知习惯<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>38、下列关于心智模型表述准确的有（   ）<br>A. 根据用户的心智模型来选择信息的组织方式是优秀网站成功的重要因素。<br>B. 人们通常基于自身经验和现有知识来理解新事物。<br>C. 有助于用户理解如何使用网站的设计属于符合心智模型的设计。<br>D. 重视情景因素对用户行为的影响。<br> 正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>39、文字图层中的文字信息哪些可以进行修改和编辑？(    )<br>A. 文字颜色<br>B. 文字内容，如加字或减字<br>C. 文字大小<br>D. 将文字图层转换为像素图层后可以改变文字的字体<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">C</span></span></p><p>40、下列可以帮助加强色彩对比的方法有（    ）<br>A. 色相互补<br>B. 明度差异大<br>C. 色相临近<br>D. 饱和度差异大<br>正确答案: <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">D</span></span></p><p>三、.判断题（共20题）<br>1、Illustrator是由Adobe公司开发的一款图形绘制功能强大的平面设计软件（√）<br>2、路径由节点和线段组成，可以通过调整路径上的节点或线段来改变它的形状（√）<br>3、位图图像，它是以数学式的方法记录图像的内容。（×）<br>4、常用的颜色模式有RGB模式、CMYK模式、HSB模式。（√）<br>5、Web安全RGB模式是网页浏览器所支持的216种颜色，与显示平台无关。（×）</p><p>6、参考线的类型可分为两种：一种是普通参考线；另一种是智能参考线。（√）</p><p>7、图形对象之间存在着堆叠的关系，后绘制的图像总是显示在先绘制的图像 之上，堆叠顺序是固定的，不能对其进行改变（×）<br>8、矢量图像的显示效果与分辨率有关。（√）<br>9、钢笔工具只能绘制直线和曲线，不能绘制任意形状的路径。（√）<br>10、文本绕图对整个文本块起作用，对于文本块中的部分文本，以及点文本，路径文本都不能进行文本绕图。（√）</p><p>11、图稿存储为五种基本文件格式：AI、PDF、EPS、FXG 和SVG 。（√）<br>12、使用自由变换工具可以使对象发生旋转、倾斜、透视等效果。（√）<br>13、在Adobe illustrator中，可通过执行创建轮廓的操作将文字转换为对象。（√）<br>14、在Adobe illustrator中，“全屏模式”只在全屏窗口中显示图稿，不带标题栏或菜单栏。（√）<br>15、控制面板中显示的选项是固定的，不会因所选的对象或工具类型而变化。（Х）<br>16、Adobe illustrator提供6种选择工具来选择对象及画板，包括：选择工具、直接选择工具、编组选择工具、魔棒工具、套索工具、“画板”工具。（√）<br>17、在Ai中绘制在画布上的对象只要屏幕上是可见的就可以打印输出，而不受画板区域的限制。（Х）<br>18、如果一个锚点连接两条线段，则移动该锚点将总是更改两条线段。（√）<br>19、AI软件中，可以同时选取多个对象并可以轻松的实现跨过多对象同时应用渐变填充的功能。（√）<br>20、图层只能与“图层”面板中相同层级上的其他图层合并。如，子图层只能与同图层同一级上的其他子图层合并、对象无法与其他对象合并。（√）</p>]]></content>
      
      
      <categories>
          
          <category> 复习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Illustrator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础笔记</title>
      <link href="/posts/JavaScript%20%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/JavaScript%20%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本数据-变量"><a href="#基本数据-变量" class="headerlink" title="基本数据 变量"></a>基本数据 变量</h1><h2 id="定义变量和常量"><a href="#定义变量和常量" class="headerlink" title="定义变量和常量"></a>定义变量和常量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> =<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th align="center">类型</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">字符串</td><td align="center">String</td></tr><tr><td align="center">数字</td><td align="center">Number</td></tr><tr><td align="center">布尔</td><td align="center">Boolean</td></tr><tr><td align="center">未定义</td><td align="center">Undefined</td></tr><tr><td align="center">空</td><td align="center">Null</td></tr></tbody></table><div class="note warning modern"><p>JavaScript 拥有动态类型,随时都可以变类型</p></div><div class="tip info"><p>在JavaScript中，undefined表示一个变量自然的、最原始的状态值，而null表示一个变量被人为的设置为空对象，而不是原始状态。具体区别如下：</p><ol><li>undefined 是一个全局对象的属性，而 null 是一个关键字。在变量声明时，没有赋值的变量默认为 undefined，而不是 null。  </li><li>undefined 是一个假值，在布尔上下文中会被视为 false，而 null 不是假值。</li><li>null 表示明确设置了一个变量或属性没有值，而 undefined 表示变量或属性没有被赋值或不存在。</li><li>在很多情况下，js会自动产生undefined，所以显式地写一个 undefined 是多此一举，如果需要传递一个空值，用 null 更合适。</li></ol></div><p>null 和 undefined 的值相等，但类型不等:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>             <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// object</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>           <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>            <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h1><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if else 语句"></a>if else 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    当条件为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    当条件不为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        执行代码块 <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        执行代码块 <span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        与 <span class="keyword">case</span> <span class="number">1</span> 和 <span class="keyword">case</span> <span class="number">2</span> 不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (循环数;条件;参数) &#123; </span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for&#x2F;in语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">fname</span>:<span class="string">&quot;Bill&quot;</span>,<span class="attr">lname</span>:<span class="string">&quot;Gates&quot;</span>,<span class="attr">age</span>:<span class="number">56</span>&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person) &#123;</span><br><span class="line">    txt=txt + person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>定义语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">function</span> &lt;functionName&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">const</span> &lt;functionName&gt; = <span class="keyword">function</span>(<span class="params"></span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info simple"><p><code>const f = function() {};</code> 是<strong>函数表达式</strong>，它遵循常规变量赋值规则，只有当执行到该行代码时才会被解析和赋值，所以在声明之前引用它将会报错</p><p><code>function f() {};</code> 是<strong>函数声明</strong>，它会提升作用域，这意味着无论它可以在代码的任何位置都可以调用它。</p><ul><li>如果需要一个在全局或局部作用域内可立即访问且在整个作用域生命周期内都不会更改的函数，通常使用函数声明；</li><li>如果想将函数作为一个值赋给变量，并可能利用闭包或者其他需要表达式特性的场景，会 使用函数表达式。此外，使用const定义函数可以确保函数引用不会被意外覆盖。</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 网络编程笔记</title>
      <link href="/posts/java%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/java%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>一个<strong>Socket</strong>就是由<strong>IP</strong>地址和端口号（范围是0～65535）组成，可以把<strong>Socket</strong>简单理解为<strong>IP</strong>地址加端口号。端口号总是由操作系统分配，它是一个<code>0～65535</code>之间的数字，其中，小于<code>1024</code>的端口属于特权端口，需要管理员权限，大于<code>1024</code>的端口可以由任意用户的应用程序打开。</p><p>使用Socket进行网络编程时，本质上就是两个进程之间的网络通信。其中一个<strong>进程必须充当服务器端</strong>，它会主动监听某个指定的端口，另一个<strong>进程必须充当客户端</strong>，它必须主动连接服务器的IP地址和指定端口，如果连接成功，服务器端和客户端就成功地建立了一个<code>TCP</code>连接，双方后续就可以随时发送和接收数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建服务器Socket对象，并绑定6666端口</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6666</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端使用Socket对象访问服务器</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">6666</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;client is running...&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>使用<code>Socket</code>对象进行通信，需要先获取<code>Socket</code>对象的输入输出流，然后就可以通过输入输出流来发送和接收数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取输入输出流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">os.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> is.read(buffer);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">is.close();</span><br><span class="line">os.close();</span><br><span class="line">s.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 窗口组件</title>
      <link href="/posts/java%20%E7%AA%97%E5%8F%A3%E7%BB%84%E4%BB%B6.html"/>
      <url>/posts/java%20%E7%AA%97%E5%8F%A3%E7%BB%84%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">关键字</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">JLabel</td><td align="center">标签</td></tr><tr><td align="center">setIcon</td><td align="center">使用JLabel显示图片</td></tr><tr><td align="center">JButton</td><td align="center">按钮</td></tr><tr><td align="center">JCheckBox</td><td align="center">复选框</td></tr><tr><td align="center">JRadioButton</td><td align="center">单选框</td></tr><tr><td align="center">ButtonGroup</td><td align="center">按钮组</td></tr><tr><td align="center">JComboBox</td><td align="center">下拉框</td></tr><tr><td align="center">JOptionPane</td><td align="center">对话框</td></tr><tr><td align="center">JTextField</td><td align="center">文本框</td></tr><tr><td align="center">JPasswordField</td><td align="center">密码框</td></tr><tr><td align="center">JTextArea</td><td align="center">文本域</td></tr><tr><td align="center">JProgressBar</td><td align="center">进度条</td></tr><tr><td align="center">JFileChooser</td><td align="center">文件选择器</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 组件 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        new 标签();</span></span><br><span class="line"><span class="comment">//        new 图片();</span></span><br><span class="line"><span class="comment">//        new 复选框();</span></span><br><span class="line"><span class="comment">//        new 单选框();</span></span><br><span class="line"><span class="comment">//        new 下拉框();</span></span><br><span class="line"><span class="comment">//        new 对话框();</span></span><br><span class="line"><span class="comment">//        new 文本框();</span></span><br><span class="line"><span class="comment">//        new 密码框();</span></span><br><span class="line"><span class="comment">//        new 文本域();</span></span><br><span class="line">        <span class="keyword">new</span> 文件选择器();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 标签&#123;</span><br><span class="line">    <span class="keyword">public</span> 标签() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;label&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        f.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;这是一个标签&quot;</span>);</span><br><span class="line">        <span class="comment">// 前景色 也就是文字颜色</span></span><br><span class="line">        l.setForeground(Color.RED);</span><br><span class="line">        l.setBounds(<span class="number">50</span>,<span class="number">10</span>,<span class="number">280</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        f.add(l);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java GUI 显示图片是通过在label上设置图标实现的</span></span><br><span class="line">class 图片&#123;</span><br><span class="line">    <span class="keyword">public</span> 图片() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">200</span>, <span class="number">220</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        f.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">        <span class="comment">// 设置图片</span></span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">img</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;src/main/resources/GUI/组件/avj.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//设置ImageIcon</span></span><br><span class="line">        l.setIcon(img);</span><br><span class="line">        <span class="comment">//label的大小设置为ImageIcon,否则显示不完整</span></span><br><span class="line">        l.setBounds(<span class="number">0</span>,<span class="number">0</span>,img.getIconWidth(),img.getIconHeight());</span><br><span class="line"></span><br><span class="line">        f.add(l);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 复选框&#123;</span><br><span class="line">    <span class="keyword">public</span> 复选框() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;复选框&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">580</span>, <span class="number">200</span>);</span><br><span class="line">        f.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建复选框</span></span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">bCheckBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;键盘&quot;</span>);</span><br><span class="line">        bCheckBox.setSelected(<span class="literal">true</span>);</span><br><span class="line">        bCheckBox.setBounds(<span class="number">50</span>, <span class="number">50</span>, <span class="number">130</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">bCheckBox1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;鼠标&quot;</span>);</span><br><span class="line">        bCheckBox1.setBounds(<span class="number">50</span>, <span class="number">100</span>, <span class="number">130</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 建立一个线程判断“鼠标”是否被选择</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">        l.setBounds(<span class="number">300</span>,<span class="number">50</span>,<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">        l.setForeground(Color.BLUE);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                l.setText(String.valueOf(bCheckBox1.isSelected()));</span><br><span class="line">                        ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        f.add(bCheckBox);</span><br><span class="line">        f.add(bCheckBox1);</span><br><span class="line">        f.add(l);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 单选框&#123;</span><br><span class="line">    <span class="keyword">public</span> 单选框() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;单选框&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">580</span>, <span class="number">200</span>);</span><br><span class="line">        f.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建复选框</span></span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;有线&quot;</span>);</span><br><span class="line">        b1.setSelected(<span class="literal">true</span>);</span><br><span class="line">        b1.setBounds(<span class="number">50</span>, <span class="number">50</span>, <span class="number">130</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;无线鼠标&quot;</span>);</span><br><span class="line">        b2.setBounds(<span class="number">50</span>, <span class="number">100</span>, <span class="number">130</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;键盘&quot;</span>);</span><br><span class="line">        b3.setBounds(<span class="number">50</span>,<span class="number">150</span>,<span class="number">130</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用ButtonGroup 按钮组把单选按钮合并到一个组</span></span><br><span class="line">        <span class="type">ButtonGroup</span> <span class="variable">bg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line">        <span class="comment">// 把b1，b2放在 同一个 按钮分组对象里 ，这样同一时间，只有一个 按钮 会被选中</span></span><br><span class="line">        bg.add(b1);</span><br><span class="line">        bg.add(b2);</span><br><span class="line"></span><br><span class="line">        f.add(b1);</span><br><span class="line">        f.add(b2);</span><br><span class="line">        f.add(b3);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 下拉框&#123;</span><br><span class="line"><span class="comment">//    使用getSelectedItem来获取被选中项</span></span><br><span class="line"><span class="comment">//    使用setSelectedItem() 来指定要选中项</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 下拉框() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;涩涩方法&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">580</span>, <span class="number">240</span>);</span><br><span class="line">        f.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义下拉框数组</span></span><br><span class="line">        String[] control = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;阴纹Slave&quot;</span>, <span class="string">&quot;傀儡仆人&quot;</span>, <span class="string">&quot;糖果超甜&quot;</span>, <span class="string">&quot;Command Card&quot;</span>&#125;;</span><br><span class="line">        <span class="type">JComboBox</span> <span class="variable">cb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>(control);</span><br><span class="line"></span><br><span class="line">        cb.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">160</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        f.add(cb);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 对话框&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    JOptionPane 用于弹出对话框</span></span><br><span class="line"><span class="comment">    JOptionPane.showConfirmDialog(f, &quot;是否 使用外挂 ？&quot;);</span></span><br><span class="line"><span class="comment">    表示询问，第一个参数是该对话框以哪个组件对齐</span></span><br><span class="line"><span class="comment">    JOptionPane.showInputDialog(f, &quot;请输入yes，表明使用外挂后果自负&quot;);</span></span><br><span class="line"><span class="comment">    接受用户的输入</span></span><br><span class="line"><span class="comment">    JOptionPane.showMessageDialog(f, &quot;你使用外挂被抓住！ 罚拣肥皂3次！&quot;);</span></span><br><span class="line"><span class="comment">    显示消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> 对话框() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;LoL&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">580</span>, <span class="number">240</span>);</span><br><span class="line">        f.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示询问，第一个参数是该对话框以哪个组件对齐</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">option</span> <span class="operator">=</span> JOptionPane.showConfirmDialog(f, <span class="string">&quot;是否对目标使用&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (option == JOptionPane.OK_OPTION) &#123;</span><br><span class="line">            <span class="comment">// 接受用户的输入,返回String</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> JOptionPane.showInputDialog(<span class="string">&quot;请输入 ok&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (answer !=<span class="literal">null</span> &amp;&amp; answer.equals(<span class="string">&quot;ok&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 显示信息</span></span><br><span class="line">                JOptionPane.showMessageDialog(f,<span class="string">&quot;目标执行成功&quot;</span>);</span><br><span class="line">                <span class="comment">// 关闭窗口并释放内存</span></span><br><span class="line">                f.dispose();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(f,<span class="string">&quot;目标执行失败&quot;</span>);</span><br><span class="line">                f.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 文本框&#123;</span><br><span class="line">    <span class="keyword">public</span> 文本框() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;文本框&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">lName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;账号：&quot;</span>);</span><br><span class="line">        <span class="comment">// 输入框</span></span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">tfName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        tfName.setText(<span class="string">&quot;请输入账号&quot;</span>);</span><br><span class="line">        tfName.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">80</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">lPassword</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">        <span class="comment">// 输入框</span></span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">tfPassword</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        tfPassword.setText(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">        tfPassword.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">80</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">        f.add(lName);</span><br><span class="line">        f.add(tfName);</span><br><span class="line">        f.add(lPassword);</span><br><span class="line">        f.add(tfPassword);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示让密码输入框获取焦点,默认焦点位于密码文本框</span></span><br><span class="line">        tfPassword.grabFocus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 密码框&#123;</span><br><span class="line"><span class="comment">//    与文本框不同，获取密码框里的内容，推荐使用 getPassword ，该方法会返回一个字符数组，而非字符串</span></span><br><span class="line">    <span class="keyword">public</span> 密码框() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;密码框&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">        <span class="comment">// 密码框</span></span><br><span class="line">        <span class="type">JPasswordField</span> <span class="variable">pf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        pf.setText(<span class="string">&quot;&amp;48kdh4@#&quot;</span>);</span><br><span class="line">        pf.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">80</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 与文本框不同，获取密码框里的内容，推荐使用getPassword，该方法会返回一个字符数组，而非字符串</span></span><br><span class="line"><span class="comment">//        String password = pf.getText();</span></span><br><span class="line">        <span class="type">char</span>[] password = pf.getPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> String.valueOf(password);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        f.add(l);</span><br><span class="line">        f.add(pf);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 文本域&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    JTextArea：文本域。</span></span><br><span class="line"><span class="comment">    和文本框JTextField不同的是，文本域可以输入多行数据</span></span><br><span class="line"><span class="comment">    如果要给文本域初始文本，通过\n来实现换行效果</span></span><br><span class="line"><span class="comment">    JTextArea通常会用到append来进行数据追加</span></span><br><span class="line"><span class="comment">    如果文本太长，会跑出去，可以通过setLineWrap(true) 来做到自动换行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> 文本域() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;LoL&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;文本域：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line">        <span class="comment">// 手动设置大小</span></span><br><span class="line">        ta.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">200</span>, <span class="number">150</span>));</span><br><span class="line">        <span class="comment">// \n换行符</span></span><br><span class="line">        ta.setText(<span class="string">&quot;听说你很勇哦\n我超勇的！\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 追加数据</span></span><br><span class="line">        ta.append(<span class="string">&quot;给我看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看看&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置自动换行</span></span><br><span class="line">        ta.setLineWrap(<span class="literal">true</span>);</span><br><span class="line">        f.add(l);</span><br><span class="line">        f.add(ta);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 进度条&#123;</span><br><span class="line">    <span class="keyword">public</span> 进度条() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;进度条&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建进度条</span></span><br><span class="line">        <span class="type">JProgressBar</span> <span class="variable">pb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JProgressBar</span>();</span><br><span class="line">        <span class="comment">//进度条最大100</span></span><br><span class="line">        pb.setMaximum(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//当前进度是50</span></span><br><span class="line">        pb.setValue(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//显示当前进度</span></span><br><span class="line">        pb.setStringPainted(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        f.add(pb);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 文件选择器&#123;</span><br><span class="line">    <span class="keyword">public</span> 文件选择器() &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;文件选择器&quot;</span>);</span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件选择器对象</span></span><br><span class="line">        <span class="type">JFileChooser</span> <span class="variable">fc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFileChooser</span>();</span><br><span class="line">        <span class="comment">// 创建一个文件过滤器</span></span><br><span class="line">        fc.setFileFilter(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File f)</span> &#123;</span><br><span class="line">                <span class="comment">// 给定的文件是否被这个过滤器接受,如果文件被接受，则为True</span></span><br><span class="line">                <span class="keyword">return</span> f.getName().toLowerCase().endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 该过滤器的描述</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个按钮</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">bOpen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;打开文件&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">bSave</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;保存文件&quot;</span>);</span><br><span class="line">        f.add(bOpen);</span><br><span class="line">        f.add(bSave);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        f.setSize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">        f.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按钮监听事件</span></span><br><span class="line">        bOpen.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">open</span> <span class="operator">=</span> fc.showOpenDialog(f);</span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> fc.getSelectedFile();</span><br><span class="line">                <span class="keyword">if</span> (open == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">                    JOptionPane.showMessageDialog(f,<span class="string">&quot;准备打开&quot;</span>+file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        bSave.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">open</span> <span class="operator">=</span> fc.showSaveDialog(f);</span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> fc.getSelectedFile();</span><br><span class="line">                <span class="keyword">if</span> (open == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">                    JOptionPane.showMessageDialog(f,<span class="string">&quot;准备保存&quot;</span>+file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 窗口布局器 定位</title>
      <link href="/posts/java%20%E7%AA%97%E5%8F%A3%E5%B8%83%E5%B1%80%E5%99%A8%20%E5%AE%9A%E4%BD%8D.html"/>
      <url>/posts/java%20%E7%AA%97%E5%8F%A3%E5%B8%83%E5%B1%80%E5%99%A8%20%E5%AE%9A%E4%BD%8D.html</url>
      
        <content type="html"><![CDATA[<p>布局器是用在容器上的。 用来决定容器上的组件摆放的位置和大小</p><h1 id="绝对定位-null"><a href="#绝对定位-null" class="headerlink" title="绝对定位 null"></a>绝对定位 null</h1><p>绝对定位，就是把组件放在容器上，不考虑容器的布局器，不使用布局器，组件的摆放位置和大小都是自己设置的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 绝对定位<span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;这是绝对定位窗口&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 设置布局器为null，即进行绝对定位，容器上的组件都需要指定位置和大小</span></span><br><span class="line">        f.setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定位置和大小</span></span><br><span class="line">        b1.setBounds(<span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">        b2.setBounds(<span class="number">150</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮3&quot;</span>);</span><br><span class="line">        b3.setBounds(<span class="number">250</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 没有指定位置和大小，不会出现在容器上</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        f.add(b1);</span><br><span class="line">        f.add(b2);</span><br><span class="line">        f.add(b3);</span><br><span class="line">        <span class="comment">// b4没有指定位置和大小，不会出现在容器上</span></span><br><span class="line">        f.add(b4);</span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h1><p>设置布局器为FlowLayout,顺序布局器</p><p>容器上的组件<code>水平摆放</code></p><p>加入到容器即可，无需单独指定大小和位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 顺序布局器FlowLayout &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;这是顺序布局器&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 设置布局器为FlowLayerout</span></span><br><span class="line">        <span class="comment">// 容器上的组件水平摆放</span></span><br><span class="line">        <span class="comment">// 更改窗口宽度查看演示</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入到容器即可，无需单独指定大小和位置</span></span><br><span class="line">        f.add(b1);</span><br><span class="line">        f.add(b2);</span><br><span class="line">        f.add(b3);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="边界布局-BorderLayout"><a href="#边界布局-BorderLayout" class="headerlink" title="边界布局 BorderLayout"></a>边界布局 BorderLayout</h1><p>设置布局器为BorderLayout<br>容器上的组件按照<code>上北</code> <code>下南</code> <code>左西</code> <code>右东</code> <code>中</code>的顺序摆放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 边界布局BorderLayout &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;LoL&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 设置布局器为BorderLayerout</span></span><br><span class="line">        <span class="comment">// 容器上的组件按照上北下南左西右东中的顺序摆放</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;洪七&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;段智兴&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;欧阳锋&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;黄药师&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;周伯通&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入到容器的时候，需要指定位置</span></span><br><span class="line">        f.add(b1, BorderLayout.NORTH);</span><br><span class="line">        f.add(b2, BorderLayout.SOUTH);</span><br><span class="line">        f.add(b3, BorderLayout.WEST);</span><br><span class="line">        f.add(b4, BorderLayout.EAST);</span><br><span class="line">        f.add(b5, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网格布局器-GridLayout"><a href="#网格布局器-GridLayout" class="headerlink" title="网格布局器 GridLayout"></a>网格布局器 GridLayout</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 网格布局GridLayout &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;LoL&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 设置布局器为GridLayerout，即网格布局器</span></span><br><span class="line">        <span class="comment">// 该GridLayerout的构造方法表示该网格是2行3列</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;洪七&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;段智兴&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;欧阳锋&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;黄药师&quot;</span>);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">b5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;周伯通&quot;</span>);</span><br><span class="line"></span><br><span class="line">        f.add(b1);</span><br><span class="line">        f.add(b2);</span><br><span class="line">        f.add(b3);</span><br><span class="line">        f.add(b4);</span><br><span class="line">        f.add(b5);</span><br><span class="line"></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="setPreferredSize"><a href="#setPreferredSize" class="headerlink" title="setPreferredSize"></a>setPreferredSize</h1><p>即便使用布局器 ，也可以 通过<code>setPreferredSize</code>，向布局器建议该组件显示的大小.</p><div class="note danger modern"><p>只对部分布局器起作用，比如<code>FlowLayout</code>可以起作用。 比如<code>GridLayout</code>就不起作用，因为网格布局器必须<strong>对齐</strong></p></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 多线程笔记</title>
      <link href="/posts/java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="进程-Processor-和线程-Thread-的区别"><a href="#进程-Processor-和线程-Thread-的区别" class="headerlink" title="进程(Processor)和线程(Thread)的区别"></a>进程(Processor)和线程(Thread)的区别</h1><blockquote><p>进程是操作系统分配资源的最小单位，一个进程可以包含一个或多个线程。<br>线程是进程的子集，是进程中的子进程，是CPU调度的最小单位。<br>进程是资源分配的最小单位，线程是CPU调度的最小单位。  </p></blockquote><h1 id="创建线程的三种方式"><a href="#创建线程的三种方式" class="headerlink" title="创建线程的三种方式"></a>创建线程的三种方式</h1><div class="tabs" id="线程"><ul class="nav-tabs no-default"></ul><div class="tab-contents"></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="start-和run"><a href="#start-和run" class="headerlink" title="start()和run()"></a>start()和run()</h1><p>直接调用run()方法，相当于调用了一个普通的Java方法，当前线程并<strong>没有任何改变</strong>，也不会启动新线程。上述代码实际上是在<code>main()</code>方法内部又调用了<code>run()</code>方法，打印hello语句是在main线程中执行的，<strong>没有任何新线程被创建</strong>。</p><p>必须调用Thread实例的<code>start()</code>方法才能<strong>启动新线程</strong>，如果我们查看Thread类的源代码，会看到<code>start()</code>方法内部调用了一个<code>private native void start0()</code>方法，native修饰符表示这个方法是由JVM虚拟机内部的C代码实现的，不是由Java代码实现的。</p><h1 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h1><p>可以对线程设定优先级，设定优先级的方法是：</p><blockquote><p>Thread.setPriority(int n) &#x2F;&#x2F; 1~10, 默认值5</p></blockquote><p>JVM自动把1（低）~10（高）的优先级映射到操作系统实际优先级上（不同操作系统有不同的优先级数量）。优先级高的线程被操作系统调度的优先级较高，操作系统对高优先级线程可能调度更频繁，但我们决不能通过设置优先级来确保高优先级的线程一定会先执行。</p><h1 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h1><p>当main线程对线程对象t调用<code>join()</code>方法时，<strong>主线程将等待变量t表示的线程运行结束</strong>，即join就是指等待该<strong>线程结束</strong>，然后才继续往下执行自身线程。所以，上述代码打印顺序可以肯定是main线程先打印start，t线程再打印hello，main线程最后再打印end。</p><blockquote><p>start–&gt;hello–&gt;end</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        t.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="守护线程（Daemon-Thread）"><a href="#守护线程（Daemon-Thread）" class="headerlink" title="守护线程（Daemon Thread）"></a>守护线程（Daemon Thread）</h1><p>守护线程是指为其他线程服务的线程。在JVM中，所有<code>非守护线程</code>都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。</p><p>因此，JVM退出时，不必关心守护线程是否已结束。</p><h2 id="创建守护线程"><a href="#创建守护线程" class="headerlink" title="创建守护线程"></a>创建守护线程</h2><p>在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="color: red">注意事项</summary><div class="toggle-content"><p>守护线程的优先级永远是5，不能通过<code>setPriority()</code>方法来改变。</p><p>守护线程不能启动新线程，否则会抛出<code>IllegalThreadStateException</code>异常。</p><p>守护线程不能访问非守护线程的成员变量，因为当守护线程结束后，JVM退出，非守护线程的成员变量也就不存在了。</p><p>守护线程不能抛出<code>UncaughtException</code>异常，因为JVM退出时，会先销毁守护线程，如果守护线程抛出异常，将导致JVM退出。</p><p>守护线程不能调用<code>interrupt()</code>方法，因为JVM退出时，会先销毁守护线程，如果守护线程调用<code>interrupt()</code>方法，将导致JVM退出。</p><p>守护线程不能调用<code>join()</code>方法，因为JVM退出时，会先销毁守护线程，如果守护线程调用<code>join()</code>方法，将导致JVM退出。</p><p>守护线程不能调用<code>setUncaughtExceptionHandler()</code>方法，因为JVM退出时，会先销毁守护线程，如果守护线程调用<code>setUncaughtExceptionHandler()</code>方法，将导致JVM退出。</p><p>守护线程不能调用<code>setName()</code>方法，因为JVM退出时，会先销毁守护线程，如果守护线程调用<code>setName()</code>方法，将导致JVM退出。</p><p>守护线程不能调用<code>setPriority()</code>方法，因为JVM退出时，会先销毁守护线程，如果守护线程调用<code>setPriority()</code>方法，将导致JVM退出。</p><p>守护线程不能调用<code>setDaemon()</code>方法，因为JVM退出时，会先销毁守护线程，如果守护线程调用<code>setDaemon()</code>方法，将导致JVM退出。</p><p>守护线程不能调用<code>setContextClassLoader()</code>方法，因为JVM退出时，会先销毁守护线程，如果守护线程调用<code>setContextClassLoader()</code>方法，将导致JVM退出。</p></div></details><h1 id="为什么使用synchronized需要创建一个Object对象作为锁？"><a href="#为什么使用synchronized需要创建一个Object对象作为锁？" class="headerlink" title="为什么使用synchronized需要创建一个Object对象作为锁？"></a>为什么使用synchronized需要创建一个Object对象作为锁？</h1><p><code>synchronized</code>修饰的方法或代码块，必须指定一个锁对象，这个锁对象可以是<strong>任意对象</strong>，只要确保这个对象是<strong>唯一的</strong>。</p><p>我的理解是：这是一个<span class='p '>yellow 遥控器</span>，被访问的对象就是<span class='p '>green 电视机</span>，只有拿到<span class='p '>yellow 遥控器</span>才能控制<span class='p '>green 电视机</span>，所以遥控器就是<code>锁对象</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java Collections工具类</title>
      <link href="/posts/java%20Collections%E5%B7%A5%E5%85%B7%E7%B1%BB.html"/>
      <url>/posts/java%20Collections%E5%B7%A5%E5%85%B7%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Collections是一个类，容器的工具类,就如同Arrays是数组的工具类</p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><table><thead><tr><th>关键字</th><th>简介</th></tr></thead><tbody><tr><td>revere</td><td>反转</td></tr><tr><td>shuffle</td><td>混淆</td></tr><tr><td>sort</td><td>排序</td></tr><tr><td>swap</td><td>交换</td></tr><tr><td>rotate</td><td>滚动</td></tr><tr><td>synchronizedList</td><td>线程安全化</td></tr></tbody></table><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.icewolf.medium.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionExam</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转</span></span><br><span class="line">        Collections.reverse(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;翻转后集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 混淆（其实就是打乱）</span></span><br><span class="line">        Collections.shuffle(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;混淆后集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交换</span></span><br><span class="line">        Collections.swap(numbers,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换0和5下标的数据后，集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滚动</span></span><br><span class="line">        Collections.rotate(numbers,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;把集合向右滚动2个单位，标的数据后，集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender渐变色</title>
      <link href="/posts/blender%E6%B8%90%E5%8F%98%E8%89%B2.html"/>
      <url>/posts/blender%E6%B8%90%E5%8F%98%E8%89%B2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/blenderGradient.png"></p><p>我的理解是：<mark class="hl-label pink">纹理坐标</mark> 生成基础的颜色，拆分xyz，然后通过<mark class="hl-label orange">颜色渐变</mark> 来生成渐变色。</p><h3 id="EEVEE辉光"><a href="#EEVEE辉光" class="headerlink" title="EEVEE辉光"></a>EEVEE辉光</h3><p><img src="https://nodaoli.oss-cn-guangzhou.aliyuncs.com/blender%E6%B8%90%E5%8F%98%E8%BE%89%E5%85%89.png"></p>]]></content>
      
      
      <categories>
          
          <category> blender </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 着色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows快捷开关代理</title>
      <link href="/posts/windows%E5%BF%AB%E6%8D%B7%E5%BC%80%E5%85%B3%E4%BB%A3%E7%90%86.html"/>
      <url>/posts/windows%E5%BF%AB%E6%8D%B7%E5%BC%80%E5%85%B3%E4%BB%A3%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="转载："><a href="#转载：" class="headerlink" title="转载："></a>转载：</h1><p><a href="https://chengjingchao.com/2021/09/07/%E5%BF%AB%E6%8D%B7%E5%88%87%E6%8D%A2-Windows-%E4%BB%A3%E7%90%86%E5%BC%80%E5%85%B3/">https://chengjingchao.com/2021/09/07/%E5%BF%AB%E6%8D%B7%E5%88%87%E6%8D%A2-Windows-%E4%BB%A3%E7%90%86%E5%BC%80%E5%85%B3/</a></p><p>设置 &#x3D;&gt; 网络和 Internet &#x3D;&gt; 代理 &#x3D;&gt; 开&#x2F;关</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><a href="https://github.com/ElectricRCAircraftGuy/">https://github.com/ElectricRCAircraftGuy/</a></p><p>下载放到 C:\Users\YOUR_USERNAME\Windows_Proxy_Toggler 目录下<br>点击目录下的 toggle_proxy_on_off.vbs 会直接创建桌面快捷方式</p><p><strong>注意事项</strong></p><p>下载的文件目录名称是否为 Windows_Proxy_Toggler<br>放在当前用户目录下<br>这时可以点击桌面快捷方式直接切换代理开关</p><p>更进一步为快捷方式绑定快捷键（右键桌面快捷方式 &#x3D;&gt; 属性）</p><p>这时会发现按下快捷键后会有 3s 左右的延迟</p><p>windows11：<code>微软输入法-词库和自学习-自学习</code>，关闭了就好</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_44275286/article/details/103988806">https://blog.csdn.net/qq_44275286/article/details/103988806</a><br><a href="https://itectec.com/superuser/">https://itectec.com/superuser/</a><br><a href="https://stackoverflow.com/questions/26708347/windows-desktop-widget-to-turn-proxy-on-and-off/26708451#26708451">https://stackoverflow.com/questions/26708347/windows-desktop-widget-to-turn-proxy-on-and-off/26708451#26708451</a><br><a href="https://blog.csdn.net/fly_view/article/details/136494007?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-136494007-blog-106956887.235%5Ev43%5Epc_blog_bottom_relevance_base6&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-136494007-blog-106956887.235%5Ev43%5Epc_blog_bottom_relevance_base6&utm_relevant_index=5">https://blog.csdn.net/fly_view/article/details/136494007?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-136494007-blog-106956887.235%5Ev43%5Epc_blog_bottom_relevance_base6&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-136494007-blog-106956887.235%5Ev43%5Epc_blog_bottom_relevance_base6&amp;utm_relevant_index=5</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java IO、File、Stream</title>
      <link href="/posts/java%20IO%E6%96%87%E4%BB%B6%E6%B5%81File.html"/>
      <url>/posts/java%20IO%E6%96%87%E4%BB%B6%E6%B5%81File.html</url>
      
        <content type="html"><![CDATA[<h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><p>在Java中，IO、File、Stream是处理输入输出、文件操作和流传输的关键概念。</p><ol><li><strong>Java IO（输入&#x2F;输出）</strong>:<ul><li>Java的IO操作是通过流（Stream）来实现的，流是一个用于读取和写入数据的序列。Java IO提供了用于读取和写入不同类型数据（如字节、字符、对象等）的<strong>接口</strong>和<strong>类</strong>。</li><li>Java IO主要包括两大类流：<code>字节流</code>（InputStream和OutputStream）和<code>字符流</code>（Reader和Writer）。字节流用于处理二进制数据，而字符流用于处理文本数据。</li><li>Java IO类库以装饰者模式设计，允许通过装饰者类来增强基本流的功能，例如添加缓冲、数据压缩、加密等功能。</li></ul></li><li><strong>Java File（文件）</strong>:<ul><li><code>java.io.File</code> 类是Java IO类库中用于处理文件和目录路径的类。它提供了创建、删除、重命名文件和目录、获取文件属性等操作的<strong>方法</strong>。</li><li><div class="tip info"><p><code>File</code> 类本身不提供文件内容的读写操作，它只是表示文件或目录的路径信息。要读写文件内容，需要使用流（如<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>FileReader</code>、<code>FileWriter</code>等）。</p></div></li></ul></li><li><strong>Java Stream（流）</strong>:<ul><li>在Java中，流是一个用于数据传输的抽象概念。流可以看作是一个数据的序列，它可以是输入流，也可以是输出流。</li><li>Java中的流分为两大类：<ul><li><strong>字节流</strong>：处理字节（8位）数据的流，主要用于处理<mark class="hl-label pink">二进制数据</mark> ，如图片、音频、视频等。主要的字节流类有<code>InputStream</code>和<code>OutputStream</code>。</li><li><strong>字符流</strong>：处理字符（16位）数据的流，主要用于处理<mark class="hl-label pink">文本数据</mark> 。主要的字符流类有<code>Reader</code>和<code>Writer</code>。</li></ul></li><li>Java 8 引入了新的流API——<code>java.util.stream</code>，它是用于处理对象序列的流，不同于IO流处理字节和字符数据。新的流API主要用于集合框架，提供了一种高效且易于使用的处理数据的方法。</li></ul></li></ol><p><img src="https://stepimagewm.how2j.cn/5678.png" alt="关系图"></p><h1 id="文件输入输出流"><a href="#文件输入输出流" class="headerlink" title="文件输入输出流"></a>文件输入输出流</h1><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。</p><p>有多种构造方法可用来创建对象。</p><p>可以使用字符串类型的文件名来创建一个输入流对象来读取文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:/java/hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/java/hello&quot;</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br></pre></td></tr></table></figure><h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><p>该类用来创建一个文件并向文件中写数据。</p><p>如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。</p><p>有两个构造方法可以用来创建 <code>FileOutputStream</code> 对象。</p><p>使用字符串类型的文件名来创建一个输出流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:/java/hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/java/hello&quot;</span>);</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">fOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br></pre></td></tr></table></figure><h2 id="下面是一个演示-InputStream-和-OutputStream-用法的例子："><a href="#下面是一个演示-InputStream-和-OutputStream-用法的例子：" class="headerlink" title="下面是一个演示 InputStream 和 OutputStream 用法的例子："></a>下面是一个演示 InputStream 和 OutputStream 用法的例子：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件流测试类</span></span><br><span class="line"><span class="comment"> * 该类用于演示如何使用Java的文件输入输出流（FileInputStream和FileOutputStream）来读写文件。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fileStreamTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * 该方法首先将字节数据写入文件，然后从文件中读取并打印这些数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数（未使用）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 要写入文件的字节数据</span></span><br><span class="line">            <span class="type">byte</span> bWrite[] = &#123; <span class="number">11</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            <span class="comment">// 创建文件输出流并打开文件用于写入</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 循环写入字节数据到文件</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; bWrite.length; x++) &#123;</span><br><span class="line">                os.write(bWrite[x]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关闭文件输出流</span></span><br><span class="line">            os.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建文件输入流并打开文件用于读取</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取文件的可用字节数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> is.available();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环读取并打印文件中的字节数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) is.read() + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关闭文件输入流</span></span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 捕获和处理IO异常</span></span><br><span class="line">            System.out.print(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>在Java中，路径有两种形式：<code>绝对路径</code>和<code>相对路径</code>。</p><div class="tip cogs"><p>绝对路径：绝对路径是指从根目录开始的路径，如：C:\Java\test.txt。</p></div><div class="tip cogs"><p>相对路径：相对路径是指相对于当前目录的路径，如：test.txt。</p></div><blockquote><p>从当前项目src同级目录开始<code>.\\test.txt</code><br>从项目所在的磁盘更目录开始<code>\\text.txt</code></p></blockquote><div class="note info simple"><p>window 下使用<code>\\</code>，linux下使用<code>/</code></p></div><h3 id="文件异常"><a href="#文件异常" class="headerlink" title="文件异常"></a>文件异常</h3><p>以字节流的形式向文件写入数据，当test.txt文件不存在的时候，是会自动创建test.txt。<br>但是，如果是写入数据到d:&#x2F;xyz&#x2F;test.txt，而目录xyz又不存在的话，就会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以字节流的形式向文件写入数据，当test.txt文件不存在的时候，是会自动创建test.txt。</span></span><br><span class="line"><span class="comment">         * 但是，如果是写入数据到d:/xyz/test.txt，而目录xyz又不存在的话，就会抛出异常。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 新建一个相对路径，是从src同级目录开始</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.\\src\\main\\java\\top\\icewolf\\medium\\IoFileStream\\aaa\\test&quot;</span>); <span class="comment">// 在src同级目录下开始</span></span><br><span class="line">            <span class="comment">// 判断目录是否存在。不存在就创建目录</span></span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建一个名为test.txt的文件对象，用路径加文件名拼合</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建一个输出流，file是目录路径dir和文件名test.txt的组合</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            <span class="comment">// 写入数据</span></span><br><span class="line">            fileOutputStream.write(<span class="string">&quot;I Love You!&quot;</span>.getBytes());</span><br><span class="line">            <span class="comment">// 关闭数据流</span></span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>try-with-resources</code>，可以不用关闭流。<br><code>File对象</code>不用关闭，<code>FileOutputStream</code>需要关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tryFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">DIR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.\\src\\main\\java\\top\\icewolf\\medium\\IoFileStream\\aaa\\test&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(DIR, <span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// 判断目录是否存在。不存在就创建目录</span></span><br><span class="line">            <span class="keyword">if</span> (!DIR.exists()) &#123;</span><br><span class="line">                DIR.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 写入数据</span></span><br><span class="line">            fileOutputStream.write(<span class="string">&quot;Hello nodaoli!&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h1><p>以介质是硬盘为例，字节流和字符流的弊端：<br>在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。</p><p>为了解决以上弊端，采用缓存流。<br>缓存流在读取的时候，<span class='p '>yellow 会一次性读较多的数据到缓存中</span>，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。</p><p>就好比吃饭，<span class='p '>yellow 不用缓存就是每次都要到锅里去铲</span>。用缓存就是先把饭盛到碗里，碗里的吃完了，再到锅里去铲</p><p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区达到<span class='p '>yellow 一定的量</span>，才把这些数据，一起写入到硬盘中去。按照这种操作模式，就不会像字节流，字符流那样每写一个字节都访问硬盘，从而减少了IO操作</p><p><strong>缓存流必须建立在一个现有的流上</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入缓存流建立在文件输入流之上</span></span><br><span class="line"><span class="comment">// FileReader fr = new FileReader(&quot;input.txt&quot;);</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出缓存流建立在文件输出流之上</span></span><br><span class="line"><span class="comment">// FileWriter fw = new FileWriter(&quot;output.txt&quot;);</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos)</span><br></pre></td></tr></table></figure><h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><p><strong>BufferedReader</strong> 是一个带缓冲的字符输入流，它从字符输入流中读取文本，并缓冲字符以减少读取操作的次数。它提供了读取一行文本的方法 <code>readLine()</code>，这对于读取文本文件特别有用。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备文件lol.txt其中的内容是</span></span><br><span class="line">        <span class="comment">// garen kill teemo</span></span><br><span class="line">        <span class="comment">// teemo revive after 1 minutes</span></span><br><span class="line">        <span class="comment">// teemo try to garen, but killed again</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/lol.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建文件字符流</span></span><br><span class="line">        <span class="comment">// 缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f); </span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">        ) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 一次读一行</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == line)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><p><strong>BufferedWriter</strong> 是一个带缓冲的字符输出流，它向字符输出流中写入文本，并缓冲字符以减少写入操作的次数。它提供了 <code>newLine()</code> 方法来写入一个新行，这对于跨平台写入文本文件很有用。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;example.txt&quot;</span>))) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.write(<span class="string">&quot;This is a buffered writer example.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h2><p><strong>BufferedInputStream</strong> 是一个带缓冲的字节输入流，它从字节输入流中读取数据，并缓冲字节以减少读取操作的次数。它适用于读取任何类型的字节流，包括文件、网络数据等。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedInputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;example.bin&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h2><p><strong>BufferedOutputStream</strong> 是一个带缓冲的字节输出流，它向字节输出流中写入数据，并缓冲字节以减少写入操作的次数。它适用于写入任何类型的字节流，包括文件、网络数据等。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedOutputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;example.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">            bos.write(content.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>BufferedReader 和 BufferedWriter 用于缓冲字符流，适用于文本数据的读写。</li><li>BufferedInputStream 和 BufferedOutputStream 用于缓冲字节流，适用于任何类型的字节数据的读写。</li></ul><p>使用这些缓冲流可以显著提高 IO 操作的性能，特别是在处理大量数据或频繁的读写操作时。</p><h2 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h2><p>缓存字符输出流， 可以一次写出一行数据</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向文件lol2.txt中写入三行语句</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/lol2.txt&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">// 创建文件字符流</span></span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f);</span><br><span class="line">                <span class="comment">// 缓存流必须建立在一个存在的流的基础上               </span></span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw);               </span><br><span class="line">        ) &#123;</span><br><span class="line">            pw.println(<span class="string">&quot;garen kill teemo&quot;</span>);</span><br><span class="line">            pw.println(<span class="string">&quot;teemo revive after 1 minutes&quot;</span>);</span><br><span class="line">            pw.println(<span class="string">&quot;teemo try to garen, but killed again&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PrintWriter和BufferedOutputStream的区别"><a href="#PrintWriter和BufferedOutputStream的区别" class="headerlink" title="PrintWriter和BufferedOutputStream的区别"></a>PrintWriter和BufferedOutputStream的区别</h3><ul><li>PrintWriter 是一个字符输出流，用于输出文本数据，并提供自动刷新缓冲区的功能。  </li><li>BufferedOutputStream 是一个字节输出流，用于提供缓冲功能，以提高输出性能。</li></ul><p>如果你需要输出文本数据，并且希望简化格式化过程，使用 <strong>PrintWriter</strong> 是一个不错的选择。如果你需要输出字节数据，并且希望提高输出性能，使用 <strong>BufferedOutputStream</strong> 来包装一个字节输出流是合适的。</p><h2 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h2><p>有的时候，需要<span class='p '>yellow 立即把数据写入到硬盘</span>，而不是等缓存满了才写出去。 这时候就需要用到flush</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//向文件lol2.txt中写入三行语句</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/lol2.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建文件字符流</span></span><br><span class="line">        <span class="comment">//缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileWriter</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f);<span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fr);) &#123;</span><br><span class="line">            pw.println(<span class="string">&quot;garen kill teemo&quot;</span>);</span><br><span class="line">            <span class="comment">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span></span><br><span class="line">                pw.flush();            </span><br><span class="line">            pw.println(<span class="string">&quot;teemo revive after 1 minutes&quot;</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line">            pw.println(<span class="string">&quot;teemo try to garen, but killed again&quot;</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java异常笔记</title>
      <link href="/posts/java%E5%BC%82%E5%B8%B8%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/java%E5%BC%82%E5%B8%B8%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="什么是异常？"><a href="#什么是异常？" class="headerlink" title="什么是异常？"></a>什么是异常？</h2><p>导致程序的正常流程被中断的事件，叫做<strong>异常</strong></p><h2 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h2><h3 id="捕获-try-catch-finlly"><a href="#捕获-try-catch-finlly" class="headerlink" title="捕获 try catch finlly"></a>捕获 try catch finlly</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>try</code>中放入可能会抛出异常的代码，用<code>catch</code>放入异常的处理代码</p><p><strong>父类异常是可以<code>catch</code>到子异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多个异常既可以分开捕获，也可以一起捕获<br><code>catch (FileNotFoundException | ParseException e)</code></p><p><strong>无论是否出现异常，<code>finally</code>中的代码都会被执行</strong></p><h3 id="抛出"><a href="#抛出" class="headerlink" title="抛出"></a>抛出</h3><p>一般是<strong>方法</strong>抛出异常，由方法的<strong>调用者</strong>捕获异常</p><p>简单来说就是：谁用谁捕获，方法只给出可能抛出的异常</p><p><code>throws</code>与<code>throw</code>这两个关键字接近，不过意义不一样，有如下区别：</p><ol><li>throws 出现在方法声明上，而throw通常都出现在方法体内。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</li><li>两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</li></ol><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p><img src="https://stepimagewm.how2j.cn/742.png"></p><h3 id="检查型异常-CheckedException"><a href="#检查型异常-CheckedException" class="headerlink" title="检查型异常 CheckedException"></a>检查型异常 CheckedException</h3><p>可查异常即必须进行处理的异常，要么<code>try catch</code>住,要么往外抛，谁调用，谁处理，比如 <code>FileNotFoundException</code></p><h3 id="运行时异常-RuntimeException"><a href="#运行时异常-RuntimeException" class="headerlink" title="运行时异常 RuntimeException"></a>运行时异常 RuntimeException</h3><p>不是必须进行try catch的异常</p><h3 id="错误-Error"><a href="#错误-Error" class="headerlink" title="错误 Error"></a>错误 Error</h3><p>指的是系统级别的异常，通常是内存用光了<br>在默认设置下，一般java程序启动的时候，最大可以使用16m的内存<br>如例不停的给<code>StringBuffer</code>追加字符，很快就把内存使用光了。抛出<code>OutOfMemoryError</code><br>与运行时异常一样，错误也是不要求强制捕捉的</p><h2 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoGirlFriendException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NoGirlFriendException</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NoGirlFriendException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA便携配置</title>
      <link href="/posts/IDEA%E4%BE%BF%E6%90%BA%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/IDEA%E4%BE%BF%E6%90%BA%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p>IDEA可以在配置文件中用相对路径设置配置文件位置</p><p>在<code>bin</code>目录下有个<code>idea.properties</code>文件</p><p>其中路径配置为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用$&#123;idea.homepath&#125;宏指定相对于IDE安装home的位置。</span></span><br><span class="line"><span class="comment">#使用$&#123;xxx&#125;，其中xxx是任何Java属性(包括在此文件的前几行中定义的)来引用其值。</span></span><br><span class="line"><span class="attr">Windows用户注意</span>:<span class="string">请确保使用正斜杠:C:/dir1/dir2。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#如果你想自定义settings目录的路径，取消注释此选项。</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">idea.config.path</span>=<span class="string">$&#123;idea.home.path&#125;/.IdeaIC/config</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#如果你想自定义缓存目录的路径，取消注释此选项。</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">idea.system.path</span>=<span class="string">$&#123;idea.home.path&#125;/.IdeaIC/system</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#如果您想自定义用户安装插件目录的路径，请取消注释此选项。</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">idea.plugins.path</span>=<span class="string">$&#123;idea.config.path&#125;/plugins</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#如果你想自定义日志目录的路径，取消注释此选项。</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">idea.log.path</span>=<span class="string">$&#123;idea.system.path&#125;/log</span></span><br></pre></td></tr></table></figure><p>这样在根目录下就会有个<code>.IdeaIC</code>文件夹，里面就是配置文件和插件，可以放在U盘里面随时用</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置git路径</title>
      <link href="/posts/vscode%E9%85%8D%E7%BD%AEgit%E8%B7%AF%E5%BE%84.html"/>
      <url>/posts/vscode%E9%85%8D%E7%BD%AEgit%E8%B7%AF%E5%BE%84.html</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>vscode</strong> 在设置里查找<code>git.path</code></p></li><li><p>点击<code>在settings.json中编辑</code></p></li><li><p>可以设置成相对路径</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./git/bin/git&quot;</span></span><br></pre></td></tr></table></figure><p>在vscode根目录下放置git文件夹</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父模块git submodule update和子模块git pull区别</title>
      <link href="/posts/%E7%88%B6%E6%A8%A1%E5%9D%97git%20submodule%20update%E5%92%8C%E5%AD%90%E6%A8%A1%E5%9D%97git%20pull%E5%8C%BA%E5%88%AB.html"/>
      <url>/posts/%E7%88%B6%E6%A8%A1%E5%9D%97git%20submodule%20update%E5%92%8C%E5%AD%90%E6%A8%A1%E5%9D%97git%20pull%E5%8C%BA%E5%88%AB.html</url>
      
        <content type="html"><![CDATA[<p>当你在子模块内部执行 <code>git pull</code> 时，你是在直接从子模块的远端仓库拉取最新的提交。这个操作仅影响子模块本身，不会对父模块产生任何影响。如果子模块有新的更新，父模块不会知道这一点，除非你明确地告诉父模块更新子模块的引用。</p><p>而 <code>git submodule update</code> 命令则是从父模块的视角来更新子模块。当你执行这个命令时，Git会检查父模块记录的子模块提交<strong>SHA-1</strong>值，并尝试将子模块的本地工作目录更新到这个特定的提交。这个操作会考虑父模块中 <em>.gitmodules</em> 文件和 <em>.git&#x2F;config</em> 文件里记录的子模块的URL和分支。如果子模块有更新，并且父模块已经更新了子模块的引用（通常通过 <code>git submodule update --remote</code> 或者手动编辑 <em>.gitmodules</em> 文件），那么 <code>git submodule update</code> 会拉取这些更新。</p><p><strong>简而言之，两者的主要区别在于</strong>：</p><p><code>git pull</code> 在子模块内部执行，仅更新子模块的内容，而不影响父模块。<br><code>git submodule update</code> 在父模块中执行，根据父模块记录的子模块提交<strong>SHA-1</strong>值来更新子模块。<br>通常，如果你想要更新子模块到其远端仓库的最新状态，你需要在子模块中执行 <code>git pull</code>，然后将子模块的新提交<strong>SHA-1</strong>值更新到父模块中（通过 <code>git add</code> 和 <code>git commit</code>），最后在父模块中执行 <code>git submodule update</code> 来确保所有使用父模块的人都能获取到更新后的子模块状态。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>假设我们有一个父模块 <strong>SuperProject</strong> 和一个子模块 <strong>SubProject</strong>。</p><p>以下是操作步骤：</p><p>初始化子模块在父模块中，我们首先添加子模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://example.com/SubProject.git</span><br></pre></td></tr></table></figure><p>这会在父模块中创建一个名为 SubProject 的子目录，并在其中初始化一个 Git 仓库，指向子模块的远端仓库。<br>提交更改我们提交这次更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Add SubProject as a submodule&quot;</span></span><br></pre></td></tr></table></figure><p>克隆父模块现在另一个人克隆了父模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://example.com/SuperProject.git</span><br></pre></td></tr></table></figure><p>这时会包含子模块的目录，但目录为空。他们需要初始化并更新子模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>这会拉取子模块的最新提交，并检出父模块记录的子模块提交SHA-1值。<br>使用 <code>git pull</code> 更新子模块<br>假设子模块的远端仓库有新的提交。在子模块目录中，我们执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> SubProject</span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><p>这会拉取远端仓库的最新提交，并更新子模块的本地工作目录。</p><p>使用 git submodule update 更新子模块<br>现在，我们回到父模块的目录，并执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update</span><br></pre></td></tr></table></figure><p>这个命令会根据父模块记录的子模块提交SHA-1值来更新子模块。但由于我们没有更新父模块记录的子模块提交SHA-1值，子模块将不会更新到最新的提交。</p><p>为了更新父模块记录的子模块提交SHA-1值，我们需要执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure><p>或者直接在子模块目录中手动更新到最新提交，然后回到父模块提交更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> SubProject</span><br><span class="line">git pull origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git commit -a -m <span class="string">&quot;Update SubProject to the latest commit&quot;</span></span><br></pre></td></tr></table></figure><p>这样，当我们执行 <code>git submodule update</code> 时，子模块就会更新到最新的提交。</p><p>总结一下，<code>git pull</code> 在子模块内部执行，仅更新子模块的内容。而 <code>git submodule update</code> 在父模块中执行，根据父模块记录的子模块提交<strong>SHA-1</strong>值来更新子模块。要确保子模块更新到最新状态，我们需要在子模块中执行 <code>git pull</code>，然后更新父模块记录的子模块提交<strong>SHA-1</strong>值，最后在父模块中执行 <code>git submodule update</code>。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>群晖科学</title>
      <link href="/posts/%E7%BE%A4%E6%99%96%E7%A7%91%E5%AD%A6.html"/>
      <url>/posts/%E7%BE%A4%E6%99%96%E7%A7%91%E5%AD%A6.html</url>
      
        <content type="html"><![CDATA[<p>使用<code>docker</code>部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line">services:</span><br><span class="line">  clash:</span><br><span class="line">    image: dreamacro/clash:latest</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /volume1/docker/clashBetter/clash/:/root/.config/clash/:rw</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  subconverter:</span><br><span class="line">    image: tindy2013/subconverter:0.8.1</span><br><span class="line">    networks:</span><br><span class="line">      - clashBridge</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;25500:25500&quot;</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  yacd:</span><br><span class="line">    image: haishanh/yacd:latest</span><br><span class="line">    networks:</span><br><span class="line">      - clashBridge</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;7899:80&quot;</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  clashBridge:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 国内搜索工具</title>
      <link href="/posts/Maven%E4%BB%93%E5%BA%93%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7.html"/>
      <url>/posts/Maven%E4%BB%93%E5%BA%93%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7.html</url>
      
        <content type="html"><![CDATA[<h2 id="来自鲁班大叔-007的maven搜索工具"><a href="#来自鲁班大叔-007的maven搜索工具" class="headerlink" title="来自鲁班大叔_007的maven搜索工具"></a>来自鲁班大叔_007的maven搜索工具</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="http://mvn.coderead.cn/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/mvn.coderead.cn.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">鲁班大叔_007 搜索工具</div>            <div class="tag-link-sitename"> </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>可以在idea中搜索插件并使用<code>maven-search</code></p><h2 id="阿里云云效"><a href="#阿里云云效" class="headerlink" title="阿里云云效"></a>阿里云云效</h2><p>较为常用的镜像仓库</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://developer.aliyun.com/mvn/view">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">阿里云云效 Maven</div>            <div class="tag-link-sitename"> </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java比较时间</title>
      <link href="/posts/java%E6%AF%94%E8%BE%83%E6%97%B6%E9%97%B4.html"/>
      <url>/posts/java%E6%AF%94%E8%BE%83%E6%97%B6%E9%97%B4.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用Date"><a href="#使用Date" class="headerlink" title="使用Date"></a>使用Date</h1><p><code>before</code>,<code>after</code>这两个可以简单比较时间先后，返回<code>boolean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;  </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeChecker</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ParseException &#123;  </span><br><span class="line">  </span><br><span class="line">      <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">  <span class="type">Date</span> <span class="variable">expiratDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2024-03-07&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">  <span class="type">Date</span> <span class="variable">nowDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();  </span><br><span class="line">  </span><br><span class="line">  System.out.println(expiratDate.before(nowDate));  </span><br><span class="line">  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java调用cmd命令</title>
      <link href="/posts/java%E8%B0%83%E7%94%A8cmd%E5%91%BD%E4%BB%A4.html"/>
      <url>/posts/java%E8%B0%83%E7%94%A8cmd%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="内置"><a href="#内置" class="headerlink" title="内置"></a>内置</h1><p>直接使用<code>Runtime.getRuntime().exec(command)；</code>，其中<code>command</code>是<code>cmd</code>命令<br>但是呢,这样是运行不了的,要进行异常处理，或者将其抛出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里选择异常处理</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Runtime.getRuntime().exec(command);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>· 可以运行exe文件,<br>· 无法运行 gpedit.msc devmgmt.msc 等工具</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd /c command 执行完命令后关闭命令窗口。 </span><br><span class="line">cmd /k command 执行完命令后不关闭命令窗口。 </span><br><span class="line">cmd /c <span class="built_in">start</span> command 会打开一个新窗口后执行命令，原窗口会关闭。 </span><br><span class="line">cmd /k <span class="built_in">start</span> command 会打开一个新窗口后执行命令，原窗口不会关闭。</span><br></pre></td></tr></table></figure><p>使用<code>start</code>会调用一个新的窗口，可以用来查看没有窗口的命令行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;cmd /c  powershell&quot;</span>);       <span class="comment">// 无反应</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;cmd /c  start powershell&quot;</span>); <span class="comment">// 成功调出powershell</span></span><br></pre></td></tr></table></figure><h1 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h1><p>首先,Runtime.getRuntime().exec()会返回被调用的进程,我们需要获取这个进程</p><p>接着,再通过输入流,让java程序读取被调用程序的返回值,再将其输出便可</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记得引入java.io中的相关包 */</span></span><br><span class="line"><span class="comment">// 获取进程</span></span><br><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;cmd /c dir&quot;</span>); <span class="comment">// 运行dir命令</span></span><br><span class="line"><span class="comment">// 获取进程的输入流 流的方向为(唤醒的进程 -&gt; java程序)</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream().<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">String line;</span><br><span class="line"><span class="comment">// 若读取当前行不为空，就将其输出</span></span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将流关闭，避免浪费系统资源</span></span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><p>此时,java程序就会打印出DIR命令的执行结果</p><p>但是注意,cmd不能加start参数,因为加上了会创建新的终端执行,java就得不到执行结果了</p><p>在获取内容时,需要将编码格式设置为<code>GBK</code>,否则会出现乱码</p><blockquote><p>process.getInputStream().”GBK”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H2数据库基础笔记</title>
      <link href="/posts/H2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/H2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> table_name (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    column1 datatype1,</span><br><span class="line">    column2 datatype2,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上述语句中，<code>table_name</code>是表的名称，<code>id</code>是主键列的名称，<code>column1</code>、<code>column2</code>等是其他列的名称，<code>datatype1</code>、<code>datatype2</code>等是列的数据类型。关键字<code>AUTO_INCREMENT</code>用于将主键id设置为自增。</p><h3 id="重置自动递增"><a href="#重置自动递增" class="headerlink" title="重置自动递增"></a>重置自动递增</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>column_name<span class="operator">&gt;</span> restart <span class="keyword">with</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table_name;</span><br></pre></td></tr></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> table_name (column1, column2, ...) <span class="keyword">VALUES</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure><h1 id="创建schema"><a href="#创建schema" class="headerlink" title="创建schema"></a>创建schema</h1><h3 id="schema是什么"><a href="#schema是什么" class="headerlink" title="schema是什么"></a><code>schema</code>是什么</h3><p>数据库中的一个逻辑概念，用于定义和描述数据库中的对象和关系</p><p>在H2数据库中，可以使用CREATE SCHEMA语句创建一个新的schema。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA schema_name <span class="keyword">AUTHORIZATION</span> user_name</span><br></pre></td></tr></table></figure><p>其中<code>schema_name</code>是要创建的<code>schema</code>的名称，<code>user_name</code>是该<code>schema</code>的所有者，也就是具有该<code>schema</code>的所有权限的用户的名称。如果不指定<code>AUTHORIZATION</code>子句，则默认情况下，当前用户是该<code>schema</code>的所有者。</p><p>例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA CHAT <span class="keyword">AUTHORIZATION</span> root</span><br></pre></td></tr></table></figure><p>该语句将创建一个名为<code>CHAT</code>的新schema，并将其所有权授予<code>root</code>用户。</p><h1 id="插入时间"><a href="#插入时间" class="headerlink" title="插入时间"></a>插入时间</h1><p>如果希望向 H2 中插入时间，你可以使用下面的方法插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;2020-10-22 12:47:52.690&#x27;</span><br><span class="line">CURRENT_TIMESTAMP()</span><br></pre></td></tr></table></figure><p>复制<br>需要注意的是，上面有 2 个字符串。</p><p>如果你希望插入字符串定义的时间。你需要的格式：</p><p>‘2020-10-22 12:47:52.690’<br>复制<br>如果你希望插入当前的时间，你可以用时间函数</p><p>CURRENT_TIMESTAMP()</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H2数据库数据类型和常用函数</title>
      <link href="/posts/H2%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html"/>
      <url>/posts/H2%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、H2数据库常用数据类型"><a href="#一、H2数据库常用数据类型" class="headerlink" title="一、H2数据库常用数据类型"></a>一、H2数据库常用数据类型</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">INT类型：对应java.lang.Integer</span><br><span class="line"></span><br><span class="line">REAL类型：对应java.lang.Float</span><br><span class="line"></span><br><span class="line">DOUBLE类型：对应java.lang.Double</span><br><span class="line"></span><br><span class="line">DECIMAL类型：对应java.math.BigDecimal，比如DECIMAL(20,2)</span><br><span class="line"></span><br><span class="line">CHAR类型：对应java.lang.String，比如CHAR(10)</span><br><span class="line"></span><br><span class="line">VARCHAR类型：对应java.lang.String</span><br><span class="line"></span><br><span class="line">VARCHAR_IGNORECASE类型：对应java.lang.String，忽略大小写</span><br><span class="line"></span><br><span class="line">BOOLEAN类型：对应java.lang.Boolean</span><br><span class="line"></span><br><span class="line">TIME类型：对应java.sql.Time，当转换成java.sql.Date时，日期会设置成1970-01-01</span><br><span class="line"></span><br><span class="line">DATE类型：对应java.sql.Date，格式为yyyy-MM-dd，其时间默认为00:00:00</span><br><span class="line"></span><br><span class="line">TIMESTAMP类型：对应java.sql.Timestamp，格式为yyyy-MM-dd hh:mm:ss[.nnnnnnnnn]，也支持java.util.Date</span><br><span class="line"></span><br><span class="line">TINYINT类型：对应java.lang.Byte，-128 to 127</span><br><span class="line"></span><br><span class="line">SMARTINT类型：对应java.lang.Short，-32768 to 32767</span><br><span class="line"></span><br><span class="line">BIGINT类型：对应java.lang.Long</span><br><span class="line"></span><br><span class="line">IDENTITY类型：自增类型，对应java.lang.Long，值范围-9223372036854775808 to 9223372036854775807</span><br><span class="line"></span><br><span class="line">BINARY类型：二进制字节存储，最大不超过2GB，且完全保存在内存，比如BINARY(1000)</span><br><span class="line"></span><br><span class="line">BLOB类型：对应java.sql.Blob，与BINARY相似，但针对很大的数据（如文件或图像），且不完全保存在内存，使用PreparedStatement.setBinaryStream来保存数据。</span><br><span class="line"></span><br><span class="line">CLOB类型：与VARCHAR相似，但适用于保存很大的数据，且数据不完全保存在内存。用于任意尺寸的XML或HTML文档、文本文件等。使用PreparedStatement.setCharacterStream保存数据。</span><br><span class="line"></span><br><span class="line">OTHER类型：对应java.lang.Object，用于存储序列化的Java对象，使用的是字节数组，客户端只能做序列化或反序列化，使用getObject反序列化，使用PreparedStatement.setObject存储数据。</span><br><span class="line"></span><br><span class="line">UUID类型：对应java.util.UUID，128位的值，可以使用PreparedStatement.setBytes或setString或setObject(uuid)保存数据，使用ResultSet.getObject取回数据。</span><br><span class="line">ARRAY类型：对应java.lang.Object[]</span><br></pre></td></tr></table></figure><h1 id="二、H2常用函数"><a href="#二、H2常用函数" class="headerlink" title="二、H2常用函数"></a>二、H2常用函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">CURRENT_DATE：取当前日期</span><br><span class="line"></span><br><span class="line">CURRENT_TIME：取当前时间</span><br><span class="line"></span><br><span class="line">CURRENT_TIMESTAMP：取当前日期时间</span><br><span class="line"></span><br><span class="line">LOWER：字符串小写</span><br><span class="line"></span><br><span class="line">UPPER：字符串大写</span><br><span class="line"></span><br><span class="line">CONCAT：字符串连结</span><br><span class="line"></span><br><span class="line">CHAR：ASCII值转字符</span><br><span class="line"></span><br><span class="line">ASCII：字符转ASCII值</span><br><span class="line"></span><br><span class="line">ENCRYPT：加密函数，支持AES算法，Block尺寸为16字节，</span><br><span class="line"></span><br><span class="line">比如CALL ENCRYPT(&#x27;AES&#x27;, &#x27;00&#x27;, STRINGTOUTF8(&#x27;Test&#x27;))</span><br><span class="line"></span><br><span class="line">DECRYPT：解密函数，支持AES算法，Block尺寸为16字节，</span><br><span class="line"></span><br><span class="line">比如CALL TRIM(CHAR(0) FROM UTF8TOSTRING(</span><br><span class="line"></span><br><span class="line">DECRYPT(&#x27;AES&#x27;, &#x27;00&#x27;, &#x27;3fabb4de8f1ee2e97d7793bab2db1116&#x27;)))</span><br><span class="line"></span><br><span class="line">HASH：哈希函数，只支持SHA256算法，比如CALL HASH(&#x27;SHA256&#x27;, STRINGTOUTF8(&#x27;Password&#x27;), 1000)</span><br><span class="line"></span><br><span class="line">MAX：求最大</span><br><span class="line"></span><br><span class="line">MIN：求最小</span><br><span class="line"></span><br><span class="line">SUM：求和</span><br><span class="line"></span><br><span class="line">CURRENT_USER：返回当前用户</span><br><span class="line"></span><br><span class="line">H2VERSION：返回H2数据库的版本</span><br><span class="line"></span><br><span class="line">DISK_SPACE_USED：返回表使用的磁盘空间尺寸，比如CALL DISK_SPACE_USED(&#x27;my_table&#x27;);</span><br><span class="line"></span><br><span class="line">DATABASE_PATH：返回数据库文件的路径和数据库名，比如CALL DATABASE_PATH();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 笔记</title>
      <link href="/posts/Maven%20%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/Maven%20%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote><p>1.在有maven之前是怎么管理jar包的？<br>jar都在项目里，导致项目都很大。而maven可以使jar包和项目分离。<br>2.maven是干嘛用的？<br>管理包依赖的。相当于python的pip。<br>3.maven是如何管理包的？和pip有什么区别？<br>maven有坐标的概念，相比之下，pip是包名+版本号来定位的，pip更简单一些。</p></blockquote><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/maven%E4%BB%93%E5%BA%93%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%B3%E7%B3%BB-njdzvu.png" alt="maven仓库和项目的关系"></p><h1 id="仓库的概念"><a href="#仓库的概念" class="headerlink" title="仓库的概念"></a>仓库的概念</h1><p>仓库就是存放jar包的地方，即我们前面说的通过pom.xml中通过设置索引来到仓库中寻找jar包<br>仓库分为：本地仓库，第三方仓库，中央仓库</p><p><strong>1本地仓库</strong>  用来存储从远程仓库或者中央仓库下载的插件和jar包，项目使用一些插件或jar包 优先从本地仓库查找 默认本地仓库的位置在 <code>user.dir/.m2/repository</code>,{user.dir}表示 windows 用户目录。</p><p><strong>2第三方仓库</strong> 又称为内部中心仓库，又称为私服 私服：一般由公司自己设立，只为本公司内部共享使用，它既可以作为公司内部构建协作和存档，也可作为公用类库镜像缓存，减少在外部访问和下载的频率使用私服为了减少对中央仓库的访问私服可以使用的是局域网，中央仓库必须使用外网。也就是一般公司都会创建这种第三方仓库，保证项目开发时，项目所需用的jar都从该仓库中拿，每个人的版本就都一样。 注意：连接私服，需要单独配置。如果没有配置私服，默认不使用</p><p><strong>3中央仓库</strong>在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> ，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它含了世界上大部分流行的开源项目构件。</p><p>获取jar包的过程<br>优先从本地仓库查找，如果本地仓库没有该jar包，如果配置了私服，就从私服中查找，私服中没有就从中央仓库中查找，然后下载到本地仓库，下次使用就可以直接从本地仓库中查找，没有配置私服则，直接从中央仓库中查找</p><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/maven%E4%BB%93%E5%BA%93%E5%85%B3%E7%B3%BB-pyutur.png" alt="maven仓库关系.png"></p><h2 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h2><p>本地仓库默认位置在 <code>当前用户名\.m2\repository</code>，这个位置可以自定义，但是不建议大家自定义这个地址，有几个原因：</p><p>虽然所有的本地的 jar 都放在这个仓库中，但是并不会占用很大的空间。<br>默认的位置比较隐蔽，不容易碰到<br>技术上来说，当然是可以自定义本地仓库位置的，在 conf&#x2F;settings.xml 中自定义本地仓库位置：</p><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9HdnRER0tLNHVZbTB2aWFoZWxEaWJPUXp0a0Qwd2FpYzd4ejNCY0lyVUZQR2ZwajdMQjlkRmliUkREMm00eGZZWnAwV1g5cVl3SzA4UWppYWE0SGd3bGxZTVBRLzY0MA-unoirj.png" alt="aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9HdnRER0tLNHVZbTB2aWFoZWxEaWJPUXp0a0Qwd2FpYzd4ejNCY0lyVUZQR2ZwajdMQjlkRmliUkREMm00eGZZWnAwV1g5cVl3SzA4UWppYWE0SGd3bGxZTVBRLzY0MA-unoirj.png"></p><h3 id="远程镜像配置"><a href="#远程镜像配置" class="headerlink" title="远程镜像配置"></a>远程镜像配置</h3><p>由于默认的中央仓库下载较慢，因此，也可以将远程仓库地址改为阿里巴巴的仓库地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段配置，加在 settings.xml 中的 mirrors 节点中：</p><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9HdnRER0tLNHVZbTB2aWFoZWxEaWJPUXp0a0Qwd2FpYzd4enJqOVhicEpKQzczeFNpYWtxaGY0SGw5TFlHbjdUcHMzU0hEY0lrR2xvN2tEaGljaWFpY3ZaMVRlb1EvNjQw-dajrbd.png" alt="aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9HdnRER0tLNHVZbTB2aWFoZWxEaWJPUXp0a0Qwd2FpYzd4enJqOVhicEpKQzczeFNpYWtxaGY0SGw5TFlHbjdUcHMzU0hEY0lrR2xvN2tEaGljaWFpY3ZaMVRlb1EvNjQw-dajrbd.png"></p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>要安装Maven，可以从<a href="https://maven.apache.org/">Maven官网</a>下载最新的Maven 3.8.x，然后在本地解压，设置几个环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M2_HOME=/path/to/maven-3.8.x</span><br><span class="line">PATH=$PATH:$M2_HOME/bin</span><br></pre></td></tr></table></figure><p>Windows可以把 <code>%M2_HOME%\bin</code>添加到系统Path变量中。</p><p>然后，打开命令行窗口，输入 <code>mvn -version</code>，应该看到Maven的版本信息：</p><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/image.png" alt="image.png"></p><h3 id="maven文件目录"><a href="#maven文件目录" class="headerlink" title="maven文件目录"></a>maven文件目录</h3><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/image-saerkv.png" alt="image-saerkv.png"></p><h2 id="maven项目结构"><a href="#maven项目结构" class="headerlink" title="maven项目结构"></a>maven项目结构</h2><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/cc3911a5db1b454ebd60e73a701dcecf~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.webp" alt="cc3911a5db1b454ebd60e73a701dcecf~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter基础用法</title>
      <link href="/posts/Front-matter%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.html"/>
      <url>/posts/Front-matter%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h1><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】页面标题</td></tr><tr><td align="center">date</td><td align="center">【必需】页面创建日期</td></tr><tr><td align="center">type</td><td align="center">【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置</td></tr><tr><td align="center">updated</td><td align="center">【可选】页面更新日期</td></tr><tr><td align="center">description</td><td align="center">【可选】页面描述</td></tr><tr><td align="center">keywords</td><td align="center">【可选】页面关键字</td></tr><tr><td align="center">comments</td><td align="center">【可选】显示页面评论模块(默认 true)</td></tr><tr><td align="center">top_img</td><td align="center">【可选】页面顶部图片</td></tr><tr><td align="center">mathjax</td><td align="center">【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td align="center">katex</td><td align="center">【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td align="center">aside</td><td align="center">【可选】显示侧边栏 (默认 true)</td></tr><tr><td align="center">aplayer</td><td align="center">【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</td></tr><tr><td align="center">highlight_shrink</td><td align="center">【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td></tr><tr><td align="center">top_single_background</td><td align="center">【可选】部分页面的顶部模块背景图片</td></tr></tbody></table><h1 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h1><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】文章标题</td></tr><tr><td align="center">date</td><td align="center">【必需】文章创建日期</td></tr><tr><td align="center">updated</td><td align="center">【可选】文章更新日期</td></tr><tr><td align="center">tags</td><td align="center">【可选】文章标签</td></tr><tr><td align="center">categories</td><td align="center">【可选】文章分类</td></tr><tr><td align="center">keywords</td><td align="center">【可选】文章关键字</td></tr><tr><td align="center">description</td><td align="center">【可选】文章描述</td></tr><tr><td align="center">top_img</td><td align="center">【可选】文章顶部图片</td></tr><tr><td align="center">cover</td><td align="center">【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td align="center">comments</td><td align="center">【可选】显示文章评论模块(默认 true)</td></tr><tr><td align="center">toc</td><td align="center">【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)</td></tr><tr><td align="center">toc_number</td><td align="center">【可选】显示 toc_number(默认为设置中 toc 的 number 配置)</td></tr><tr><td align="center">toc_style_simple</td><td align="center">【可选】显示 toc 简洁模式</td></tr><tr><td align="center">copyright</td><td align="center">【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td align="center">copyright_author</td><td align="center">【可选】文章版权模块的文章作者</td></tr><tr><td align="center">copyright_author_href</td><td align="center">【可选】文章版权模块的文章作者链接</td></tr><tr><td align="center">copyright_url</td><td align="center">【可选】文章版权模块的文章链接链接</td></tr><tr><td align="center">copyright_info</td><td align="center">【可选】文章版权模块的版权声明文字</td></tr><tr><td align="center">mathjax</td><td align="center">【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td align="center">katex</td><td align="center">【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td align="center">aplayer</td><td align="center">【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</td></tr><tr><td align="center">highlight_shrink</td><td align="center">【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td></tr><tr><td align="center">aside</td><td align="center">【可选】显示侧边栏 (默认 true)</td></tr><tr><td align="center">swiper_index</td><td align="center">【可选】首页轮播图配置 index 索引，数字越小越靠前</td></tr><tr><td align="center">top_group_index</td><td align="center">【可选】首页右侧卡片组配置, 数字越小越靠前</td></tr><tr><td align="center">ai</td><td align="center">【可选】文章ai摘要</td></tr><tr><td align="center">main_color</td><td align="center">【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff 不可写成#fff</td></tr></tbody></table><p>首页轮播图配置: swiper_index, 数字越小越靠前<br>首页卡片配置: top_group_index, 数字越小越靠前<br>page 中top_single_background, 可配置部分页面的顶部背景图片</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cron定时任务</title>
      <link href="/posts/cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"/>
      <url>/posts/cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</url>
      
        <content type="html"><![CDATA[<p>Ubuntu自带的定时任务工具是<code>cron</code>。<code>cron</code>是一个在Unix系统上用来定期执行任务的工具。你可以使用<code>crontab</code>命令来编辑和管理<code>cron</code>任务。</p><h2 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h2><p>要编辑当前用户的<code>cron</code>任务列表，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>然后按照提示编辑<code>cron</code>任务列表。每一行代表一个<code>cron</code>任务，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *要执行的任务</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如，要每天凌晨3点执行<code>/path/to/your/script.sh</code>脚本，可以在<code>crontab</code>中添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 * * * /path/to/your/script.sh</span><br></pre></td></tr></table></figure><p>然后保存并退出编辑器即可。<code>cron</code>会按照你设置的时间自动执行该脚本。</p><h2 id="查看任务"><a href="#查看任务" class="headerlink" title="查看任务"></a>查看任务</h2><p>如果要查看当前用户的<code>cron</code>任务列表，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>这样就可以查看当前用户的所有<code>cron</code>任务。</p><h2 id="删除任务"><a href="#删除任务" class="headerlink" title="删除任务"></a>删除任务</h2><p>要删除当前用户的<code>cron</code>任务，可以运行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethtool查看网卡速率</title>
      <link href="/posts/ethtool%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8F%A3%E9%80%9F%E7%8E%87.html"/>
      <url>/posts/ethtool%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8F%A3%E9%80%9F%E7%8E%87.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用ethtool工具查看"><a href="#使用ethtool工具查看" class="headerlink" title="使用ethtool工具查看"></a>使用<code>ethtool</code>工具查看</h1><p>安装<code>ethtool</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ethtool</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看网卡</span><br><span class="line">ip a</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp7s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master vmbr0 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:e0:8b:68:03:83 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>查看网口信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ethtool enp7s0</span><br></pre></td></tr></table></figure><p>输出信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~# ethtool enp7s0</span><br><span class="line">Settings <span class="keyword">for</span> enp7s0:</span><br><span class="line">        Supported ports: [ TP    MII ]</span><br><span class="line">        Supported <span class="built_in">link</span> modes:   10baseT/Half 10baseT/Full</span><br><span class="line">                                100baseT/Half 100baseT/Full</span><br><span class="line">                                1000baseT/Half 1000baseT/Full</span><br><span class="line">        Supported pause frame use: Symmetric Receive-only</span><br><span class="line">        Supports auto-negotiation: Yes</span><br><span class="line">        Supported FEC modes: Not reported</span><br><span class="line">        Advertised <span class="built_in">link</span> modes:  10baseT/Half 10baseT/Full</span><br><span class="line">                                100baseT/Half 100baseT/Full</span><br><span class="line">                                1000baseT/Half 1000baseT/Full</span><br><span class="line">        Advertised pause frame use: Symmetric Receive-only</span><br><span class="line">        Advertised auto-negotiation: Yes</span><br><span class="line">        Advertised FEC modes: Not reported</span><br><span class="line">        Link partner advertised <span class="built_in">link</span> modes:  10baseT/Half 10baseT/Full</span><br><span class="line">                                             100baseT/Half 100baseT/Full</span><br><span class="line">                                             1000baseT/Full</span><br><span class="line">        Link partner advertised pause frame use: Symmetric</span><br><span class="line">        Link partner advertised auto-negotiation: Yes</span><br><span class="line">        Link partner advertised FEC modes: Not reported</span><br><span class="line">        Speed: 1000Mb/s    <span class="comment"># 网卡速率</span></span><br><span class="line">        Duplex: Full</span><br><span class="line">        Auto-negotiation: on<span class="comment"># 自动协商速率</span></span><br><span class="line">        master-slave cfg: preferred slave</span><br><span class="line">        master-slave status: slave</span><br><span class="line">        Port: Twisted Pair</span><br><span class="line">        PHYAD: 0</span><br><span class="line">        Transceiver: external</span><br><span class="line">        MDI-X: Unknown</span><br><span class="line">        Supports Wake-on: pumbg</span><br><span class="line">        Wake-on: d</span><br><span class="line">        Link detected: <span class="built_in">yes</span><span class="comment">#g</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 群晖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iperf3测试内网网速</title>
      <link href="/posts/%E4%BD%BF%E7%94%A8iperf3%E6%B5%8B%E8%AF%95%E5%86%85%E7%BD%91%E7%BD%91%E9%80%9F.html"/>
      <url>/posts/%E4%BD%BF%E7%94%A8iperf3%E6%B5%8B%E8%AF%95%E5%86%85%E7%BD%91%E7%BD%91%E9%80%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="内网速度测试"><a href="#内网速度测试" class="headerlink" title="内网速度测试"></a>内网速度测试</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>测试网线是否是千兆</p><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>两台设备网线直连或连同一个交换机&#x2F;路由器，A和B，通过测试工具<code>iperf</code>发送包，进行测试。</p><p>使用<code>iperf</code>工具，进行测试。</p><p><code>iperf</code>支持所有环境，Windows&#x2F;Linux。</p><h2 id="iperf工具使用实例"><a href="#iperf工具使用实例" class="headerlink" title="iperf工具使用实例"></a><code>iperf</code>工具使用实例</h2><h3 id="1-下载iperf"><a href="#1-下载iperf" class="headerlink" title="1.下载iperf"></a>1.下载<code>iperf</code></h3><p>两个设备都要下载</p><h4 id="windows下载地址：https-iperf-fr-iperf-download-php-windows"><a href="#windows下载地址：https-iperf-fr-iperf-download-php-windows" class="headerlink" title="windows下载地址：https://iperf.fr/iperf-download.php#windows"></a>windows下载地址：<a href="https://iperf.fr/iperf-download.php#windows">https://iperf.fr/iperf-download.php#windows</a></h4><h4 id="ubuntu下载命令：apt-install-iperf3"><a href="#ubuntu下载命令：apt-install-iperf3" class="headerlink" title="ubuntu下载命令：apt install iperf3"></a>ubuntu下载命令：<code>apt install iperf3</code></h4><h3 id="2-下载后解压"><a href="#2-下载后解压" class="headerlink" title="2.下载后解压"></a>2.下载后解压</h3><h3 id="3-测试网速"><a href="#3-测试网速" class="headerlink" title="3.测试网速"></a>3.测试网速</h3><p>​wimdows：使用cmd启动</p><p>​<strong>启动命令</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务端</span><br><span class="line">iperf3 -s</span><br><span class="line"># 客户端连接,ip为服务端ip</span><br><span class="line">iperf3 -c 192.168.x.x</span><br></pre></td></tr></table></figure><h3 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4.测试结果"></a>4.测试结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~# iperf3 -s</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">Server listening on 5201 (<span class="built_in">test</span> <span class="comment">#1)</span></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">Accepted connection from 192.168.0.100, port 56597</span><br><span class="line">[  5] <span class="built_in">local</span> 192.168.0.201 port 5201 connected to 192.168.0.100 port 56598</span><br><span class="line">[ ID] Interval           Transfer     Bitrate</span><br><span class="line">[  5]   0.00-1.00   sec   109 MBytes   912 Mbits/sec</span><br><span class="line">[  5]   1.00-2.00   sec   108 MBytes   909 Mbits/sec</span><br><span class="line">[  5]   2.00-3.00   sec   109 MBytes   916 Mbits/sec</span><br><span class="line">[  5]   3.00-4.00   sec   109 MBytes   912 Mbits/sec</span><br><span class="line">[  5]   4.00-5.00   sec   109 MBytes   914 Mbits/sec</span><br><span class="line">[  5]   5.00-6.00   sec   109 MBytes   911 Mbits/sec</span><br><span class="line">[  5]   6.00-7.00   sec   109 MBytes   917 Mbits/sec</span><br><span class="line">[  5]   7.00-8.00   sec   109 MBytes   915 Mbits/sec</span><br><span class="line">[  5]   8.00-9.00   sec   109 MBytes   916 Mbits/sec</span><br><span class="line">[  5]   9.00-10.00  sec   108 MBytes   904 Mbits/sec</span><br><span class="line">[  5]  10.00-10.01  sec   691 KBytes   883 Mbits/sec</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">[ ID] Interval           Transfer     Bitrate</span><br><span class="line">[  5]   0.00-10.01  sec  1.06 GBytes   913 Mbits/sec                  receiver</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">Server listening on 5201 (<span class="built_in">test</span> <span class="comment">#2)</span></span><br><span class="line">-----------------------------------------------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关闭ubuntu22.04的Daemons using outdated libraries服务重启提示弹窗</title>
      <link href="/posts/%E5%85%B3%E9%97%ADubuntu22.04%E7%9A%84Daemons%20using%20outdated%20libraries%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%90%AF%E6%8F%90%E7%A4%BA%E5%BC%B9%E7%AA%97.html"/>
      <url>/posts/%E5%85%B3%E9%97%ADubuntu22.04%E7%9A%84Daemons%20using%20outdated%20libraries%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%90%AF%E6%8F%90%E7%A4%BA%E5%BC%B9%E7%AA%97.html</url>
      
        <content type="html"><![CDATA[<p>在一个全新安装的Ubuntu 22.04 LTS上，每次使用apt安装或更新软件包时，会出现一个 Daemons using outdated libraries 弹窗，Which service should be restarted ? 大概是下面这个样子：</p><p><img src="https://cdn.beltxman.com/blog/202401/659b5fa1e3ec8.png" alt="img"></p><p>这是Ubuntu 22.04中的新功能。它是由 needrestart 命令带来的新特性，needrestart 现在是Ubuntu中apt-get升级过程的一部分。默认情况下，此设置为 “interactive” （交互式）模式，会导致脚本中断</p><p>修改这个模式配置，我们编辑 <code>/etc/needrestart/needrestart.conf</code> 文件，找到下面的这行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Restart mode: (l)ist only, (i)nteractive or (a)utomatically.</span><br><span class="line">#</span><br><span class="line"># ATTENTION: If needrestart is configured to run in interactive mode but is run</span><br><span class="line"># non-interactive (i.e. unattended-upgrades) it will fallback to list only mode.</span><br><span class="line">#</span><br><span class="line">#$nrconf&#123;restart&#125; = &#x27;i&#x27;;</span><br></pre></td></tr></table></figure><p>三个配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># i: 交互提示重新启动（默认值）</span><br><span class="line">i: prompt interactively for restarts (default value)</span><br><span class="line"># a: 自动重启</span><br><span class="line">a: restart automatically</span><br><span class="line"># l: 列出需要重启的服务</span><br><span class="line">l: list needed restarts</span><br></pre></td></tr></table></figure><p>直接修改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$nrconf&#123;restart&#125; = &#x27;a&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包管理工具</title>
      <link href="/posts/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html"/>
      <url>/posts/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html</url>
      
        <content type="html"><![CDATA[<h1 id="包管理工具总类"><a href="#包管理工具总类" class="headerlink" title="包管理工具总类"></a>包管理工具总类</h1><table><thead><tr><th align="center">编程语言</th><th align="center">管理工具</th></tr></thead><tbody><tr><td align="center">python</td><td align="center">pip</td></tr><tr><td align="center">node.js</td><td align="center">npm</td></tr><tr><td align="center">java</td><td align="center">maven&#x2F;gradle</td></tr></tbody></table><h1 id="共同点和不同点"><a href="#共同点和不同点" class="headerlink" title="共同点和不同点"></a>共同点和不同点</h1><p><code>pip</code>、<code>Naven</code>、<code>npm</code> 都是包管理工具，但它们分别属于不同的编程语言或平台。</p><ol><li><code>pip</code>：是 Python 的包管理工具，用于安装和管理 Python 包。Python 是一种广泛使用的高级编程语言，适用于多种应用场景，包括网站开发、数据分析、人工智能等。</li><li><code>Maven</code>：是一个主要用于 Java 项目的构建、依赖管理和项目信息管理的工具。Java 是一种广泛使用的面向对象的编程语言，特别适用于企业级应用。</li><li><code>npm</code>：是 Node Package Manager 的缩写，是 Node.js 的包管理工具。Node.js 是一个能够在服务器端运行 JavaScript 的平台，适用于构建大型网络应用，特别是实时、高并发的应用。<br>共同点：</li></ol><ul><li><strong>依赖管理</strong>：这三个工具都提供了依赖管理的功能，允许开发者轻松地管理项目所需的库和模块。</li><li><strong>社区支持</strong>：它们都有庞大的社区支持，提供了大量的包和库供开发者使用。</li><li><strong>版本控制</strong>：它们都能够处理包的不同版本，允许开发者指定项目所依赖的包的版本。</li><li><strong>自动化工具</strong>：这三个工具都提供了自动化脚本和生命周期管理功能，帮助开发者自动化构建、测试、部署等流程。<br>不同点：</li><li><strong>所属语言或平台</strong>：<code>pip</code> 属于 Python，<code>Maven</code> 属于 Java，<code>npm</code> 属于 Node.js。</li><li><strong>配置文件</strong>：它们使用的配置文件不同，例如 <code>pip</code> 使用 <code>requirements.txt</code>，<code>Maven</code> 使用 <code>pom.xml</code>，<code>npm</code> 使用 <code>package.json</code>。</li><li><strong>设计理念和目标</strong>：这三个工具的设计理念和目标也有所不同，它们各自针对其所属语言或平台的特点进行了优化。<br>希望这些信息对您有所帮助。如果您有其他问题，欢迎继续提问。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 包管理工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单片机-协议了解</title>
      <link href="/posts/%E5%8D%95%E7%89%87%E6%9C%BA-%E5%8D%8F%E8%AE%AE%E4%BA%86%E8%A7%A3.html"/>
      <url>/posts/%E5%8D%95%E7%89%87%E6%9C%BA-%E5%8D%8F%E8%AE%AE%E4%BA%86%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="UDP-TCP通信"><a href="#UDP-TCP通信" class="headerlink" title="UDP&#x2F;TCP通信"></a>UDP&#x2F;TCP通信</h1><h3 id="UDP（User-Datagram-Protocol）"><a href="#UDP（User-Datagram-Protocol）" class="headerlink" title="UDP（User Datagram Protocol）:"></a>UDP（User Datagram Protocol）:</h3><ol><li><strong>连接性：</strong> UDP是一种面向无连接的协议。发送端只是把数据包发送到网络上，而不考虑目标是否存在或是否准备好接收数据。</li><li><strong>可靠性：</strong> UDP不提供数据包的可靠交付。数据包被发送出去，但发送端不会对是否被接收到或接收顺序进行确认。因此，UDP更适用于一些实时性要求高、对数据可靠性要求相对较低的应用，如实时视频、音频传输。</li><li><strong>开销：</strong> 由于不需要建立连接，UDP的开销相对较小，传输速度更快。</li><li><strong>流式传输：</strong> UDP不支持流式传输，每个数据包都是独立的。</li></ol><h3 id="TCP（Transmission-Control-Protocol）"><a href="#TCP（Transmission-Control-Protocol）" class="headerlink" title="TCP（Transmission Control Protocol）:"></a>TCP（Transmission Control Protocol）:</h3><ol><li><strong>连接性：</strong> TCP是一种面向连接的协议。在数据传输之前，需要先建立连接，然后再进行数据传输，最后释放连接。</li><li><strong>可靠性：</strong> TCP提供可靠的数据传输。它保证数据的顺序和可靠性，通过使用确认机制和重传机制来确保数据的正确性。</li><li><strong>开销：</strong> 由于需要建立连接、进行确认和重传机制，TCP的开销相对较大，传输速度相对较慢。</li><li><strong>流式传输：</strong> TCP是面向流的，数据是以流的形式传输的，而不是分割成独立的数据包。</li></ol><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h1 id="webSocket协议"><a href="#webSocket协议" class="headerlink" title="webSocket协议"></a>webSocket协议</h1><p>WebSocket（通常缩写为WS）是一种在单个TCP连接上进行全双工通信的协议，它允许在客户端和服务器之间进行双向实时通信。与传统的HTTP协议不同，WebSocket协议的设计目标是在保持低延迟的同时提供高效的全双工通信。</p><p>以下是WebSocket协议的一些关键特点：</p><ol><li><strong>建立连接：</strong> WebSocket连接始于通过HTTP协议进行的握手阶段。客户端发起一个HTTP请求，其中包含了对WebSocket的协议升级请求，服务器同意升级后，连接就被升级为WebSocket。</li><li><strong>全双工通信：</strong> 一旦建立了WebSocket连接，客户端和服务器之间可以同时发送和接收数据，而不需要等待对方的响应。这使得实时性要求高的应用，如在线聊天、实时游戏和股票市场报价等能够更高效地进行通信。</li><li><strong>轻量级：</strong> WebSocket协议是一种相对轻量级的协议，协议头部相对较小，减少了额外的网络开销。</li><li><strong>支持跨域：</strong> WebSocket支持跨域通信，因为在建立连接时，可以在HTTP协议的握手阶段进行跨域请求处理。</li><li><strong>持久连接：</strong> WebSocket连接是持久的，可以在连接建立后保持活动状态，而不需要在每次通信时都重新建立连接。这有助于减少网络延迟和提高性能。</li></ol><p>在客户端，JavaScript提供了WebSocket API，使得在浏览器中轻松使用WebSocket。在服务器端，有许多编程语言和框架支持WebSocket，如Node.js、Python的WebSocket库等。</p><p>WebSocket的使用场景包括实时消息推送、在线游戏、实时协作应用、股票市场报价等需要实时性和双向通信的应用程序。</p><h1 id="MQTT协议"><a href="#MQTT协议" class="headerlink" title="MQTT协议"></a>MQTT协议</h1><p>MQTT（Message Queuing Telemetry Transport）是一种轻量级的、开放的、基于发布&#x2F;订阅模式的消息传输协议。它设计用于在低带宽、高延迟或不稳定的网络环境中，实现设备与设备之间的可靠通信。以下是MQTT协议的一些关键特点：</p><ol><li><strong>发布&#x2F;订阅模式：</strong> MQTT采用发布&#x2F;订阅模式，其中客户端可以发布（发送）消息到特定的主题（Topic），而其他客户端则可以订阅（接收）这些主题上的消息。这种模式使得设备之间的通信更为灵活和松散耦合。</li><li><strong>轻量级：</strong> MQTT协议设计为轻量级，协议头部相对较小，适用于受限的网络带宽和资源有限的设备，例如物联网设备。</li><li><strong>保持连接：</strong> MQTT客户端与服务器之间的连接是持久的，可以保持长时间的活动状态，避免了频繁的连接和断开操作。</li><li><strong>遗嘱消息：</strong> 客户端可以指定一个遗嘱消息，在连接异常中断时，服务器将自动向其他订阅了相应主题的客户端发送遗嘱消息，以通知它们设备的状态。</li><li><strong>服务质量等级（QoS）：</strong> MQTT支持不同的服务质量等级，包括最多一次传递、至少一次传递和只有一次传递。这些等级允许客户端和服务器在消息传递的可靠性和效率之间进行权衡选择。</li><li><strong>安全性：</strong> MQTT协议支持基于TLS&#x2F;SSL的加密和认证机制，以确保通信的安全性。</li><li><strong>广泛应用：</strong> MQTT在物联网（IoT）领域得到了广泛应用，因为它适用于连接数众多、网络带宽受限的设备，同时提供了可靠的消息传递机制。</li></ol><p>总体而言，MQTT是一种适用于物联网和其他低带宽、高延迟环境下的通信协议，其设计注重轻量级和灵活性</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行下巧妙解压7z分卷</title>
      <link href="/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%A7%A3%E5%8E%8B7z%E5%88%86%E5%8D%B7.html"/>
      <url>/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%A7%A3%E5%8E%8B7z%E5%88%86%E5%8D%B7.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令行下巧妙解压7z分卷"><a href="#命令行下巧妙解压7z分卷" class="headerlink" title="命令行下巧妙解压7z分卷"></a>命令行下巧妙解压7z分卷</h2><p>今天下载了一些压缩文件，都是7z的压缩文件，文件名大概为：</p><p>file.7z.001<br>file.7z.002<br>file.7z.003</p><p>在使用7z命令无果后，甚是无奈。。。</p><p>新方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy /b file.7z.00* file.7z</span><br></pre></td></tr></table></figure><p>这条命令是合并各个7z的分卷，合并完成后file.7z可以成功解压（使用winrar或者winzip或者7z命令行均可）。</p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态中的向上转型与向下转型</title>
      <link href="/posts/%E5%A4%9A%E6%80%81%E4%B8%AD%E7%9A%84%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E4%B8%8E%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B.html"/>
      <url>/posts/%E5%A4%9A%E6%80%81%E4%B8%AD%E7%9A%84%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E4%B8%8E%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a><strong>什么是多态？</strong></h2><p>多态（Polymorphism）即同一操作作用于不同的对象，可以有不同的解释，产生不同的结果。</p><h2 id="多态的分类"><a href="#多态的分类" class="headerlink" title="多态的分类"></a><strong>多态的分类</strong></h2><p>多态一般分为两种：</p><h3 id="重载式多态"><a href="#重载式多态" class="headerlink" title="重载式多态"></a>重载式多态</h3><ul><li>重载式多态，也叫编译时多态。也就是说这种多态在编译时已经确定好了。方法名相同而参数列表不同的一组方法就是重载。在调用这种重载的方法时，通过传入不同的参数最后得到不同的结果。</li></ul><h3 id="重写式多态"><a href="#重写式多态" class="headerlink" title="重写式多态"></a>重写式多态</h3><ul><li>重写式多态，也叫运行时多态。这种多态通过动态绑定（dynamic binding）技术来实现，是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。也就是说，只有程序运行起来，你才知道调用的是哪个子类的方法。这种多态通过函数的重写以及向上转型来实现。</li></ul><h2 id="多态实现的必要条件"><a href="#多态实现的必要条件" class="headerlink" title="多态实现的必要条件"></a><strong>多态实现的必要条件</strong></h2><ol><li>继承或实现接口</li></ol><blockquote><p>在多态中必须存在有继承关系的子类和父类或者接口及其实现类</p></blockquote><ol start="2"><li>重写</li></ol><blockquote><p>子类对父类中某些方法进行重新定义，再调用这些方法时就会调用子类的方法</p></blockquote><ol start="3"><li>向上转型</li></ol><blockquote><p>父类引用指向子类对象叫做向上转型。</p></blockquote><h2 id="向上转型与向下转型"><a href="#向上转型与向下转型" class="headerlink" title="向上转型与向下转型"></a><strong>向上转型与向下转型</strong></h2><p>向上转型，上面已经说了。向下转型是子类引用指向父类对象（父类型，实例是子类的实例化），通常需要进行强制类型转换。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//水果类，拥有一个show()方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruits</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我水果之父，打钱!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 苹果类，实现父类水果，并重写show()方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Fruits</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我苹果，打钱!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">color</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是红色的苹果。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 香蕉类，实现父类水果，并重写show()方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banana</span> <span class="keyword">extends</span> <span class="title class_">Fruits</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我香蕉，打钱!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">color</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是黄色的香蕉。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        <span class="type">Fruits</span> <span class="variable">fruit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line"></span><br><span class="line">        fruit.show();</span><br><span class="line"></span><br><span class="line">        fruit = <span class="keyword">new</span> <span class="title class_">Banana</span>();</span><br><span class="line"></span><br><span class="line">        fruit.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment">    我苹果，打钱!</span></span><br><span class="line"><span class="comment">    我香蕉，打钱!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这就是向上转型，<code>Fruits fruit = new Apple();</code>将子类对象Apple转化为父类对象Fruits，这个时候fruit引用指向的是子类对象，所以调用的方法是子类方法。</p><h3 id="向上转型的好处"><a href="#向上转型的好处" class="headerlink" title="向上转型的好处"></a><strong>向上转型的好处</strong></h3><ul><li>减少重复代码</li><li>提高代码扩展性</li></ul><h3 id="向上转型需要注意的问题"><a href="#向上转型需要注意的问题" class="headerlink" title="向上转型需要注意的问题"></a><strong>向上转型需要注意的问题</strong></h3><p>向上转型时，子类单独定义的方法会丢失。比如，上面案例中的Apple类和Banana类都定义了自己的color方法，当进行了向上转型后，fruit引用指向Apple类的实例时是访问不到color方法的，<code>fruit.color()</code>会报错。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a><strong>向下转型</strong></h3><p>子类引用指向父类对象（父类型，实例是子类的实例化），通常需要进行强制类型转换，但是这里有个需要注意的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//还是上面的Fruits、Apple、Banana</span></span><br><span class="line"> </span><br><span class="line"> <span class="type">Fruits</span> <span class="variable">fruit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(); <span class="comment">//向上转型</span></span><br><span class="line"> </span><br><span class="line"> <span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> (Apple) fruit; <span class="comment">//向下转型，强制类型转换</span></span><br><span class="line">子类类型 子类引用名 = (子类类型) f </span><br><span class="line"></span><br><span class="line"> apple.color();  <span class="comment">//输出：我是红色的苹果。</span></span><br><span class="line"> </span><br><span class="line"> <span class="type">Banana</span> <span class="variable">banana</span> <span class="operator">=</span> (Banana) fruit; <span class="comment">//报错：java.lang.ClassCastException</span></span><br><span class="line"><span class="comment">// fruit向上转型是Apple类，向下转型回去也必须是Apple类</span></span><br><span class="line"> </span><br><span class="line"> <span class="type">Fruits</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fruits</span>();</span><br><span class="line"> </span><br><span class="line"> <span class="type">Apple</span> <span class="variable">a1</span> <span class="operator">=</span> (Apple) f1;  <span class="comment">//报错：java.lang.ClassCastException</span></span><br></pre></td></tr></table></figure><p>为什么<code>Apple apple = (Apple)fruit;</code>没有报错可以转换成功呢？因为apple本身就是Apple对象，所以理所当然可以向下转型为Apple，所以自然也就不能转换成Banana，人可以干出指鹿为马的事情，但是编译器不行，不会指着苹果说是香蕉。</p><p>而f1是Fruits对象，它也不能被向下转型为任何子类对象，就好比你买了一个不知名的水果，你只知道它是一种水果，但是你不能直接说这个水果是苹果或者香蕉。</p><h3 id="向下转型需要注意的问题"><a href="#向下转型需要注意的问题" class="headerlink" title="向下转型需要注意的问题"></a><strong>向下转型需要注意的问题</strong></h3><ul><li>向下转型的前提是父类引用指向的是子类对象，也就是说，向下转型之前，它得先进行过向上转型。</li><li>向下转型只能转型为本类对象（苹果是不能变成香蕉的）。</li></ul><h3 id="多态的经典案例"><a href="#多态的经典案例" class="headerlink" title="多态的经典案例"></a><strong>多态的经典案例</strong></h3><p>简单的多态和转型，相信大家都会，最后来个复杂的，一个经典案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(D obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;A and D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(A obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;A and A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(B obj)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;B and B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(A obj)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;B and A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="type">A</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        <span class="type">D</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1--&quot;</span> + a1.show(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;2--&quot;</span> + a1.show(c));</span><br><span class="line">        System.out.println(<span class="string">&quot;3--&quot;</span> + a1.show(d));</span><br><span class="line">        System.out.println(<span class="string">&quot;4--&quot;</span> + a2.show(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;5--&quot;</span> + a2.show(c));</span><br><span class="line">        System.out.println(<span class="string">&quot;6--&quot;</span> + a2.show(d));</span><br><span class="line">        System.out.println(<span class="string">&quot;7--&quot;</span> + b.show(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;8--&quot;</span> + b.show(c));</span><br><span class="line">        System.out.println(<span class="string">&quot;9--&quot;</span> + b.show(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">    1--A and A</span></span><br><span class="line"><span class="comment">    2--A and A</span></span><br><span class="line"><span class="comment">    3--A and D</span></span><br><span class="line"><span class="comment">    4--B and A</span></span><br><span class="line"><span class="comment">    5--B and A</span></span><br><span class="line"><span class="comment">    6--A and D</span></span><br><span class="line"><span class="comment">    7--B and B</span></span><br><span class="line"><span class="comment">    8--B and B</span></span><br><span class="line"><span class="comment">    9--A and D</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>结果1、2、3还好理解，从4开始就糊涂了，4为什么不是“B and B”呢？</p><p>这里我们先看一句话：**当父类对象引用变量引用子类对象时，被引用对象的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在父类中定义过的，也就是说被子类覆盖的方法。**这句话对多态进行了一个概括，其实在继承中对象方法的调用存在一个优先级：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</p><p>现在来分析一下4，<code>a2.show(b)</code>：</p><ul><li>a2是A类型的引用变量，this就代表了A，但是a2所引用的是B对象（new B()），那么按照上面那句话的意思，<code>a2.show(b)</code>就应该要调用B类中的<code>show(B obj)</code>，产生的结果就是”B and B“，但是运行结果明显不是，别忘了上面的话后面还有一句，必须是父类中定义过的方法才行，然而B的父类A中并没有<code>show(B obj)</code>，难道上面的话是错误的？其实不是，因为它仍然要按照继承链中调用方法的优先级来确定，所以它才会在A类中找到<code>show(A obj)</code>，由于B中重写了该方法，所以才会调用B类中的方法，所以得到的结果是<code>B and A</code>。</li><li>上面的解释可能有点绕，很多大佬在博客中也是这么写的，现在我来说说自己的理解。<code>A a2 = new B();</code>这行代码进行了向上转型，前面说过向上转型之后，子类单独定义的方法会丢失（不能被调用），那么这个时候a2可以调用的方法就剩下A类中的<code>show(D obj)、show(A obj)</code>以及B类中的<code>show(A obj)</code>，那么按照继承链中调用方法的优先级来判断，先到类A中找到<code>show(A obj)</code>，由于B类中进行了重写 ，所以调用的是B类中的<code>show(A obj)</code>。</li></ul><p>那么按照我的理解，来分析下5，<code>a2.show(c)</code>。</p><ul><li>首先<code>A a2 = new B();</code>进行向上转型，那么，a2能调用的方法还是A类中的<code>show(D obj)、show(A obj)</code>以及B类中的<code>show(A obj)</code>，按照继承链中调用方法的优先级，a2是A类型的引用变量，所以继承链方法调用优先级中<code>this.show(O)</code>的this就代表了A，显然A类中的方法不满足这个要求，跳过，所以接下来是<code>super.show(O)</code>，A类没有父类（除了Object类），再次跳过，然后是<code>this.show((super)O)</code>，C继承于B，B继承于A，所以<code>show(A obj)</code>满足要求，由于a2变量引用的对象类型是B类型，而B类型又重写了该方法，所以最终调用的是B类中的<code>show(A obj)</code>，所以最后输出为<code>B and A</code>。</li></ul><p>能够分析出4和5，那么接下来的就很简单了</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把安知鱼主题作为hexo的子模块</title>
      <link href="/posts/%E6%8A%8A%E5%AE%89%E7%9F%A5%E9%B1%BC%E4%B8%BB%E9%A2%98%E4%BD%9C%E4%B8%BAhexo%E7%9A%84%E5%AD%90%E6%A8%A1%E5%9D%97.html"/>
      <url>/posts/%E6%8A%8A%E5%AE%89%E7%9F%A5%E9%B1%BC%E4%B8%BB%E9%A2%98%E4%BD%9C%E4%B8%BAhexo%E7%9A%84%E5%AD%90%E6%A8%A1%E5%9D%97.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先致谢🙏<a href="https://blog.anheyu.com/">安知鱼</a>，好好看的主题</p><p>之所以要把<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu">安知鱼主题</a>作为子模块，是因为推送到github上面时发现不会推送安知鱼主题上去，不方便换环境，除非把主题配置文件（_config.anzhiyu.yml）放到根目录， 并且不魔改主题的情况下，就可用管</p><p>把主题当做子模块可以方便更新主题</p><p>有关父子模块介绍请看：<a class="btn-anzhiyu " href="/posts/%E6%8A%8A%E5%AE%89%E7%9F%A5%E9%B1%BC%E4%B8%BB%E9%A2%98%E4%BD%9C%E4%B8%BAhexo%E7%9A%84%E5%AD%90%E6%A8%A1%E5%9D%97.html#%E9%AD%94%E6%94%B9%E4%B8%BB%E9%A2%98%E3%80%81commit%E3%80%81push"   title="父子模块"><span>父子模块</span></a><br>密码样式的文本：<psw>这里没有验证码</psw></p><h1 id="在安装主题时创建子模块"><a href="#在安装主题时创建子模块" class="headerlink" title="在安装主题时创建子模块"></a>在安装主题时创建子模块</h1><p>在hexo根目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><h1 id="魔改主题、commit、push"><a href="#魔改主题、commit、push" class="headerlink" title="魔改主题、commit、push"></a>魔改主题、commit、push</h1><p>如果主题里的文件发生变化，这是子模块的区域，所有的git操作应在子模块中运行</p><h1 id="删除主题子模块"><a href="#删除主题子模块" class="headerlink" title="删除主题子模块"></a>删除主题子模块</h1><p>如果不再需要子模块，您可以：</p><ol><li><strong>删除子模块目录</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached themes/anzhiyu</span><br><span class="line"><span class="built_in">rm</span> -rf themes/anzhiyu</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>编辑 <code>.gitmodules</code> 文件</strong>，删除与子模块相关的条目。</li><li><strong>编辑 <code>.git/config</code> 文件</strong>，删除与子模块相关的部分。</li><li><strong>提交更改</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;删除子模块&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="错误信息-“fatal-‘themes-anzhiyu’-already-exists-in-the-index”-表示您尝试添加子模块的路径-themes-anzhiyu-已经在-Git-的索引中存在。这通常发生在您已经创建了这个目录但没有将其添加到-Git-版本控制中，或者您之前尝试添加子模块但失败了。"><a href="#错误信息-“fatal-‘themes-anzhiyu’-already-exists-in-the-index”-表示您尝试添加子模块的路径-themes-anzhiyu-已经在-Git-的索引中存在。这通常发生在您已经创建了这个目录但没有将其添加到-Git-版本控制中，或者您之前尝试添加子模块但失败了。" class="headerlink" title="错误信息 “fatal: ‘themes&#x2F;anzhiyu’ already exists in the index” 表示您尝试添加子模块的路径 themes/anzhiyu 已经在 Git 的索引中存在。这通常发生在您已经创建了这个目录但没有将其添加到 Git 版本控制中，或者您之前尝试添加子模块但失败了。"></a>错误信息 “fatal: ‘themes&#x2F;anzhiyu’ already exists in the index” 表示您尝试添加子模块的路径 <code>themes/anzhiyu</code> 已经在 Git 的索引中存在。这通常发生在您已经创建了这个目录但没有将其添加到 Git 版本控制中，或者您之前尝试添加子模块但失败了。</h2><p>要解决这个问题，请按照以下步骤操作：</p><ol><li><strong>检查 <code>themes/anzhiyu</code> 目录的状态</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>   如果 <code>themes/anzhiyu</code> 目录被列为 “Untracked files”，那么您需要将其从 Git 索引中移除。<br>2. <strong>移除 <code>themes/anzhiyu</code> 目录</strong>：<br>如果目录是未跟踪的，您可以直接删除它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf themes/anzhiyu</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>如果目录已跟踪，请将其从 Git 索引中删除</strong>：<br>如果目录已经被 Git 跟踪，您需要使用 <code>git rm</code> 命令来删除它：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached themes/anzhiyu</span><br></pre></td></tr></table></figure><p>这个命令会从索引中删除目录，但不会删除目录中的文件。<br>4. <strong>提交更改</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Remove themes/anzhiyu directory&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>重新添加子模块</strong>：<br>现在您可以重新尝试添加子模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>提交子模块更改</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Add anzhiyu theme as a submodule&quot;</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>推送更改到远程仓库</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master  <span class="comment"># 或者是 main，取决于您的默认分支名称</span></span><br></pre></td></tr></table></figure><p>确保在执行这些步骤之前，您已经备份了 <code>themes/anzhiyu</code> 目录中的任何重要文件，以防不小心删除了未提交的更改。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挂载NAS网络硬盘</title>
      <link href="/posts/%E6%8C%82%E8%BD%BDNAS%E7%BD%91%E7%BB%9C%E7%A1%AC%E7%9B%98.html"/>
      <url>/posts/%E6%8C%82%E8%BD%BDNAS%E7%BD%91%E7%BB%9C%E7%A1%AC%E7%9B%98.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mount挂载命令使用方法</span><br><span class="line">mount –t 类型 –o 挂接方式 磁盘分区目录 挂载位置目录</span><br><span class="line"></span><br><span class="line">-t 详细选项</span><br><span class="line">光盘或光盘镜像： iso9660</span><br><span class="line">DOS fat16文件系统： msdos</span><br><span class="line">Windows 9x fat32文件系统： vfat</span><br><span class="line">Windows NT ntfs文件系统： ntfs</span><br><span class="line">Mount Windows文件网络共享： smbfs(需内核支持)推荐cifs</span><br><span class="line">UNIX(LINUX)文件网络共享： nfs</span><br><span class="line"></span><br><span class="line">自动: auto</span><br><span class="line"></span><br><span class="line">-o 详细选项</span><br><span class="line">loop：用来把一个文件当成硬盘分区挂接上系统</span><br><span class="line">ro：采用只读方式挂接设备</span><br><span class="line">rw：采用读写方式挂接设备</span><br><span class="line"></span><br><span class="line">(ubuntu系统)</span><br><span class="line"></span><br><span class="line">默认不支持exfat格式的U盘，只需要运行如下的命令：sudo apt-get install exfat-utils</span><br></pre></td></tr></table></figure><h1 id="使用cifs-utils"><a href="#使用cifs-utils" class="headerlink" title="使用cifs-utils"></a>使用<code>cifs-utils</code></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cifs-utils</span><br></pre></td></tr></table></figure><p>将<code>nas</code>挂载在<code>/mnt/nas</code>下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt &amp;&amp; sudo mkdir nas</span><br></pre></td></tr></table></figure><p>执行挂载操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs -o uid=***,username=***,password=***,iocharset=utf8 nas地址 本地地址</span><br></pre></td></tr></table></figure><h1 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h1><p><code>/etc/fstab</code> 是文本文件，他储存了系统内的静态挂载点，即每次启动时挂载的文件系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nas地址 本地挂载地址 cifs uid=***,username=***,password=***,iocharset=utf8 0 0</span><br></pre></td></tr></table></figure><p>保存退出各参数解析如下：</p><ul><li><code>uid</code>：最关键，可以指定所有者，解决只能root权限的问题，使用<code>id</code>查看</li><li><code>username</code>：在<code>nas</code>上的用户名</li><li><code>password</code>：<code>nas</code>上用户名对应的密码，可以不写，回车后会有密码输入行</li><li><code>iocharset</code>：路径中如有中文则添加此项，支持中文路径</li><li><code>nas</code>地址：如”&#x2F;&#x2F;192.168.0.1&#x2F;share”</li><li>本地地址：如”<code>/mnt/nas</code>“</li></ul>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动光猫HG6145D/D1</title>
      <link href="/posts/%E7%A7%BB%E5%8A%A8HG6145D.html"/>
      <url>/posts/%E7%A7%BB%E5%8A%A8HG6145D.html</url>
      
        <content type="html"><![CDATA[<h1 id="移动光猫HG6145D-D1"><a href="#移动光猫HG6145D-D1" class="headerlink" title="移动光猫HG6145D&#x2F;D1"></a>移动光猫HG6145D&#x2F;D1</h1><blockquote><p>0.先尝试 <code>CMCCAdmin</code>  <code>aDm8H%MdA</code>  <code>Cmcc10086#</code> 能否直接登录进去，较早版本的HG6145D大部分都能直接登录。不行的话再继续试下面的<br>1、获取光猫MAC：打开cmd，arp -a 192.168.1.1，查看光猫MAC地址，如aa-bb-cc-dd-ee-ff，必须和光猫一个网段<br>2、开启光猫telnet：<a href="http://192.168.1.1/cgi-bin/telnetenable.cgi?telnetenable=1&key=AABBCCDDEEFF">http://192.168.1.1/cgi-bin/telnetenable.cgi?telnetenable=1&amp;key=AABBCCDDEEFF</a>  此处填写上面的mac，注意全大写，随后网页提示 telnet启用成功<br>3、准备一个带telnet功能的软件如Xshell等，或者启用windows自带的telnet客户端<br>4、登录telnet：telnet用户名 admin  密码 Fh@DDEEFF 此处填写MAC的后6位，注意全大写，登录成功后出现#号<br>5、进入工厂模式：load_cli factory<br>6、显示管理员密码：show admin_pwd<br>7、登录管理员帐号：<a href="http://192.168.1.1/">http://192.168.1.1/</a></p></blockquote><p><a href="http://192.168.1.1/cgi-bin/telnetenable.cgi?telnetenable=1&key=8C5FADDAA3E1">http://192.168.1.1/cgi-bin/telnetenable.cgi?telnetenable=1&amp;key=8C5FADDAA3E1</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 光猫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git父子模块</title>
      <link href="/posts/git%E7%88%B6%E5%AD%90%E6%A8%A1%E5%9D%97.html"/>
      <url>/posts/git%E7%88%B6%E5%AD%90%E6%A8%A1%E5%9D%97.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-子模块是什么？"><a href="#Git-子模块是什么？" class="headerlink" title="Git 子模块是什么？"></a>Git 子模块是什么？</h1><p>Git 子模块允许您将一个 Git 仓库（子模块）嵌入到另一个 Git 仓库（父仓库）中。这样，您可以在保持独立版本控制的同时，方便地在多个项目中共享代码。</p><h2 id="如何添加子模块？"><a href="#如何添加子模块？" class="headerlink" title="如何添加子模块？"></a>如何添加子模块？</h2><ol><li><strong>打开终端</strong>。</li><li><strong>导航到父仓库的根目录</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/parent-repository</span><br></pre></td></tr></table></figure></li><li><strong>使用 <code>git submodule add</code> 命令添加子模块</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;子模块仓库URL&gt; &lt;本地路径&gt;</span><br></pre></td></tr></table></figure>例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/username/child-repo.git child-repo</span><br></pre></td></tr></table></figure>这会在父仓库的 <code>child-repo</code> 目录下添加子模块。</li></ol><h2 id="父仓库中的子模块变更"><a href="#父仓库中的子模块变更" class="headerlink" title="父仓库中的子模块变更"></a>父仓库中的子模块变更</h2><ul><li>当您添加子模块时，Git 会记录子模块的当前提交哈希。</li><li>当您在子模块中做出更改时，需要先在子模块目录中提交这些更改：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> child-repo</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;子模块的更改&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li>然后，回到父仓库，提交子模块的变更：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git add child-repo</span><br><span class="line">git commit -m <span class="string">&quot;更新子模块&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><p>注意事项，更新后需提交主项目变更。</p><p>当我们更新子项目后，相当于是把主项目记录的 submodule 的 commit id 给更新了，需要提交下主项目的变更。</p><h2 id="克隆含有子模块的父仓库"><a href="#克隆含有子模块的父仓库" class="headerlink" title="克隆含有子模块的父仓库"></a>克隆含有子模块的父仓库</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><p>当克隆包含子模块的父仓库时，子模块目录默认是空的。您需要初始化并更新子模块：</p><ol><li><strong>克隆父仓库</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;父仓库URL&gt;</span><br></pre></td></tr></table></figure></li><li><strong>初始化子模块</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br></pre></td></tr></table></figure></li><li><strong>更新子模块</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update</span><br></pre></td></tr></table></figure>这会拉取子模块的提交并将其检出到父仓库中指定的提交。</li></ol><h3 id="二、一键拉取"><a href="#二、一键拉取" class="headerlink" title="二、一键拉取"></a>二、一键拉取</h3><blockquote><p>合并2、3步骤</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><p><code>update</code> 和 <code>--init</code>不可调换位置</p><h2 id="更新子模块"><a href="#更新子模块" class="headerlink" title="更新子模块"></a>更新子模块</h2><p>要更新子模块，您可以：</p><p>1、一键命令 </p><blockquote><p><code>git submodule update --remote</code> 命令用于更新子模块到其远端仓库的最新状态。这个命令会检查子模块的远端仓库，并将子模块更新到其默认分支的最新提交。默认情况下，这个命令会更新所有子模块，但你也可以指定特定的子模块进行更新。</p></blockquote><div class="note danger simple"><p>如果子模块远程仓库是fork的，那会更新到fork的源仓库</p></div><p>请注意，git submodule update –remote 命令会忽略子模块的本地更改。如果你在子模块中有未提交的更改，这个命令会报错。在这种情况下，你需要先处理子模块的本地更改，然后再执行 git submodule update –remote 命令。</p><blockquote><p><code>git submodule foreach &quot;git pull origin main&quot;</code> 命令用于让所有的子模块都执行<code>git pull origin main</code>命令，<code>foreach</code>用户循环子模块</p></blockquote><p>2、逐一步骤</p><ol><li><strong>进入子模块目录</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> child-repo</span><br></pre></td></tr></table></figure></li><li><strong>拉取最新更改</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li><strong>返回父仓库</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></li><li><strong>提交子模块的更新</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add child-repo</span><br><span class="line">git commit -m <span class="string">&quot;更新子模块&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h2 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h2><p>如果不再需要子模块，您可以：</p><ol><li><strong>删除子模块目录</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached child-repo</span><br><span class="line"><span class="built_in">rm</span> -rf child-repo</span><br></pre></td></tr></table></figure></li><li><strong>编辑 <code>.gitmodules</code> 文件</strong>，删除与子模块相关的条目。</li><li><strong>编辑 <code>.git/config</code> 文件</strong>，删除与子模块相关的部分。</li><li><strong>提交更改</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;删除子模块&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>子模块的使用可能会增加仓库的复杂度。</li><li>确保子模块的 URL 是可访问的，以便其他人能够克隆父仓库并获取子模块。</li><li>子模块的更新和维护需要额外的步骤，因为它们是独立于父仓库的。<br>希望这份笔记能够帮助您更好地理解和使用 Git 子模块。如果您有任何疑问，请随时提问。</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git回滚</title>
      <link href="/posts/git%E5%9B%9E%E6%BB%9A.html"/>
      <url>/posts/git%E5%9B%9E%E6%BB%9A.html</url>
      
        <content type="html"><![CDATA[<h1 id="本地修改未commit回滚"><a href="#本地修改未commit回滚" class="headerlink" title="本地修改未commit回滚"></a>本地修改未commit回滚</h1><ul><li>rollback变更文件</li><li>暂存区取消也是可以的</li><li>delete删除文件</li></ul><h1 id="本地commit未push"><a href="#本地commit未push" class="headerlink" title="本地commit未push"></a>本地commit未push</h1><p>1、放弃所有未跟踪和未暂存的更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout . <span class="comment"># 放弃所有未暂存的更改</span></span><br><span class="line"></span><br><span class="line">git add . <span class="comment"># 添加所有文件到暂存区</span></span><br></pre></td></tr></table></figure><p>2、放弃所有更改（包括暂存区的更改）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure><p>这个命令会放弃所有未提交的更改，将你的工作目录和暂存区重置到上次提交的状态。</p><p>3、放弃特定文件的更改： 如果你只想要放弃特定文件的更改，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure><p>将 <code>file</code> 替换为你想要放弃更改的文件名。这个命令会放弃该文件的未暂存更改。</p><h2 id="本地已经commit，但是还未push"><a href="#本地已经commit，但是还未push" class="headerlink" title="本地已经commit，但是还未push"></a>本地已经commit，但是还未push</h2><blockquote><p><code>undo commit</code>回滚最新&#x2F;最后的commi<br>在vscode中，可以在git-COMMITS，看到最新的commit，点击向左箭头就可以取消提交。</p></blockquote><blockquote><p><code>drop commit</code>回滚任意一次commit，不留任何痕迹<br><code>revert commit</code>回滚任意一次commit，会留下记录</p></blockquote><p>1、使用 <code>git reset</code>: 你可以使用 <code>git reset</code> 命令来取消最后的提交。这会将你的 <code>HEAD</code> 移动到上一次提交，并且将你的更改留在工作目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure><p>这里 <code>HEAD~1</code> 表示最后一个提交的父提交。<code>--soft</code> 选项意味着 <code>Git</code> 会保留工作目录和暂存区中的更改，只是移动 <code>HEAD</code> 指针。</p><p>2、使用 <code>git revert</code>: 如果你想要保留提交历史，并且创建一个新的提交来撤销最后一个提交的更改，你可以使用 <code>git revert</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure><p>这会创建一个新的提交，这个提交会反转最后一个提交的更改。这样，你的历史会保留原始提交和撤销提交。</p><h1 id="已push想回滚"><a href="#已push想回滚" class="headerlink" title="已push想回滚"></a>已push想回滚</h1><p>如果想要撤销最近的提交，可以使用 <code>git reset</code> 命令。这里有几种不同的方式来撤销提交，取决于想要的结果：</p><ol><li><strong>–soft</strong>：这个选项会保留工作区和暂存区的更改，只是将 HEAD 移动到上一个提交。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>这里的 <code>HEAD~1</code> 表示最后一个提交的父提交。这意味着更改仍然在暂存区中，可以重新提交它们。</li><li><strong>–mixed</strong>：这是 <code>git reset</code> 的默认选项，它会保留工作区的更改，但是会取消暂存区的提交。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed HEAD~1</span><br></pre></td></tr></table></figure>这会将更改从暂存区移回到工作区，可以选择重新添加它们并提交。</li><li><strong>–hard</strong>：这个选项会丢弃所有未提交的更改，包括工作区和暂存区的更改。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure>请小心使用这个选项，因为它会永久删除你的更改。只有在确定不需要这些更改时才使用。</li><li><strong>指定提交哈希</strong>：如果想要撤销某个特定的提交，而不是最后一个提交，可以使用该提交的哈希值。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure>替换 <code>&lt;commit-hash&gt;</code> 为想要撤销的提交的哈希值。<br>请记住，这些操作只会影响<strong>本地仓库</strong>。如果你已经将提交推送到<strong>远程仓库</strong>，你将需要使用强制推送（<code>git push --force</code> 或 <code>git push --force-with-lease</code>）来更新远程仓库的历史。但是，这可能会影响到其他协作者，执行撤销提交操作之前，建议先创建一个分支或者备份你的工作，以防不小心丢失更改。</li></ol><h1 id="总结笔记"><a href="#总结笔记" class="headerlink" title="总结笔记"></a>总结笔记</h1><p>以下是三种不同情况下在 Git 中进行回滚的笔记：</p><h3 id="1-本地仓库-commit-前回滚"><a href="#1-本地仓库-commit-前回滚" class="headerlink" title="1. 本地仓库 commit 前回滚"></a>1. 本地仓库 commit 前回滚</h3><p>在本地工作副本中，如果你做了更改但还没有提交（commit），你可以使用以下命令来回滚这些更改：</p><ul><li>放弃所有未暂存的更改：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>或者<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure>这两个命令都会放弃工作目录中的所有更改，但 <code>git checkout .</code> 不会影响暂存区，而 <code>git reset --hard HEAD</code> 会清空暂存区。</li><li>放弃特定文件的更改：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>这会放弃指定文件的更改，将其恢复到上次提交的状态。</li><li>放弃所有未跟踪的文件和目录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -<span class="built_in">df</span></span><br></pre></td></tr></table></figure>请小心使用这个命令，因为它会永久删除未跟踪的文件和目录。</li></ul><h3 id="2-commit-后但未-push-回滚"><a href="#2-commit-后但未-push-回滚" class="headerlink" title="2. commit 后但未 push 回滚"></a>2. commit 后但未 push 回滚</h3><p>如果你已经进行了本地提交但还没有推送到远程仓库，你可以使用以下命令来回滚提交：</p><ul><li>使用 <code>git reset</code> 回滚到最后一个提交：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>这个命令会撤销最后一个提交，并将更改留在工作目录中，你可以重新提交它们。</li><li>使用 <code>git revert</code> 创建一个新的提交来撤销最后一个提交：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure>这会创建一个新的提交，这个提交会反转最后一个提交的更改。</li></ul><h3 id="3-commit-再-push-后回滚"><a href="#3-commit-再-push-后回滚" class="headerlink" title="3. commit 再 push 后回滚"></a>3. commit 再 push 后回滚</h3><p>如果你已经将提交推送到远程仓库，你不能直接回滚提交，因为这会改写历史记录。相反，你应该使用 <code>git revert</code> 来创建一个新的提交，这个提交会撤销之前的更改：</p><ul><li>回滚远程仓库中的提交：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-hash&gt;</span><br><span class="line">git push origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>替换 <code>&lt;commit-hash&gt;</code> 为你想要撤销的提交的哈希值，<code>&lt;branch-name&gt;</code> 为你正在工作的分支名。<br>请记住，<code>git revert</code> 不会改变现有的历史记录，而是会添加一个新的提交来反转指定提交的更改。这是回滚已经推送到远程仓库的提交的安全方式。<br>在执行任何回滚操作之前，请确保你已经备份了重要的工作，以防不小心丢失更改。回滚操作是不可逆的，一旦执行，未提交的更改将无法通过 Git 恢复（除非你有其他备份）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题的git仓库</title>
      <link href="/posts/hexo%E4%B8%BB%E9%A2%98%E7%9A%84git%E4%BB%93%E5%BA%93.html"/>
      <url>/posts/hexo%E4%B8%BB%E9%A2%98%E7%9A%84git%E4%BB%93%E5%BA%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="父仓库操作"><a href="#父仓库操作" class="headerlink" title="父仓库操作"></a>父仓库操作</h1><ol><li><strong>定位到父仓库的目录</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/parent-repository</span><br></pre></td></tr></table></figure></li><li><strong>添加子模块</strong>：<br>使用 <code>git submodule add</code> 命令添加现有的 Git 文件夹作为子模块。确保提供子模块的 Git URL 和您希望在父仓库中放置子模块的路径。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add /path/to/child-repository.git path/to/child</span><br></pre></td></tr></table></figure>这里的 <code>path/to/child-repository.git</code> 是子模块仓库的本地路径，而 <code>path/to/child</code> 是子模块在父仓库中的路径。</li><li><strong>提交更改</strong>：<br>子模块添加后，会有一个新的 <code>.gitmodules</code> 文件和一个记录子模块提交的文件。您需要提交这些更改。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Add child-repository as a submodule&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="子仓库操作（可选）"><a href="#子仓库操作（可选）" class="headerlink" title="子仓库操作（可选）"></a>子仓库操作（可选）</h1><p>如果子模块已经是一个远程跟踪的仓库，那么您不需要进行任何操作。但如果它只是一个本地仓库，并且您想要将它推送到远程服务器，您可以这样做：</p><ol><li><strong>定位到子仓库的目录</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/child-repository</span><br></pre></td></tr></table></figure></li><li><strong>初始化远程仓库（如果尚未完成）</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin &lt;remote_repository_url&gt;</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin master  <span class="comment"># 或者是 main，取决于您的默认分支名称</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="克隆含有子模块的父仓库"><a href="#克隆含有子模块的父仓库" class="headerlink" title="克隆含有子模块的父仓库"></a>克隆含有子模块的父仓库</h3><p>当其他人克隆您的父仓库时，他们需要执行额外的步骤来克隆子模块：</p><ol><li><strong>克隆父仓库</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;parent-repository-url&gt;</span><br></pre></td></tr></table></figure></li><li><strong>初始化和更新子模块</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> parent-repository</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>这样，子模块就会被克隆并检出到父仓库中指定的提交。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>子模块的 URL 应该是可访问的，以便其他人能够克隆父仓库并获取子模块。</li><li>在提交子模块更改时，父仓库只会记录子模块的提交哈希，而不是子模块的具体文件内容。</li><li>子模块的更新和维护需要额外的步骤，因为它们是独立于父仓库的。<br>建立父子关系后，您就可以在父仓库中管理子模块，并在需要时更新子模块的内容。</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用rsync</title>
      <link href="/posts/%E4%BD%BF%E7%94%A8rsync.html"/>
      <url>/posts/%E4%BD%BF%E7%94%A8rsync.html</url>
      
        <content type="html"><![CDATA[<p>使用<code>rsync</code>同步到群晖<code>nas</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av home/ nas@192.168.0.107::NetBackup/server/</span><br></pre></td></tr></table></figure><p>数据备份还可以通过在命令中插入<code>-e ssh</code>来加密：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av -e ssh home/ nas@192.168.0.107::NetBackup/server/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jellyfin插件</title>
      <link href="/posts/jellyfin%E6%8F%92%E4%BB%B6.html"/>
      <url>/posts/jellyfin%E6%8F%92%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="豆瓣刮削"><a href="#豆瓣刮削" class="headerlink" title="豆瓣刮削"></a>豆瓣刮削</h1><p><code>https://gitee.com/cwhzy/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json</code></p><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/v2-fee005b31648b410c0de4bc3621222bd_720w-vbltsj.webp" alt="v2-fee005b31648b410c0de4bc3621222bd_720w-vbltsj.webp"></p><h1 id="小姐姐插件"><a href="#小姐姐插件" class="headerlink" title="小姐姐插件"></a><strong>小姐姐插件</strong></h1><p><code>https://cdn.jsdelivr.net/gh/metatube-community/jellyfin-plugin-metatube@dist/manifest.json</code></p><p><img src="https://icewolf-halo.oss-cn-shanghai.aliyuncs.com/v2-e94e77e9790743c979a5ce1dd2f4f6c9_720w-rilarh.webp" alt="v2-e94e77e9790743c979a5ce1dd2f4f6c9_720w-rilarh.webp"></p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jellyfin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python设置有效期</title>
      <link href="/posts/python%E8%AE%BE%E7%BD%AE%E6%9C%89%E6%95%88%E6%9C%9F.html"/>
      <url>/posts/python%E8%AE%BE%E7%BD%AE%E6%9C%89%E6%95%88%E6%9C%9F.html</url>
      
        <content type="html"><![CDATA[<pre><code>import osimport timefrom tkinter import messagebox# 定义当前时间def now():    return time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(time.time()))# 使用os模块获取网页内容，-s不要获取信息expired = os.popen(&#39;curl -s https://icewolf-li.oss-cn-nanjing.aliyuncs.com/mc/expired.txt&#39;).read()# 手动设置时间set_time = &#39;2024-03-03 18:00:00&#39;print(f&quot;当前时间{now()}&quot;)print(f&quot;内置有效期:{set_time}&quot;)print(f&quot;oss有效期：{expired}&quot;)# print(now() &gt; expired)if now() &gt; expired:    messagebox.showinfo(&#39;提示&#39;,&#39;文件已过期！&#39;)else:    messagebox.showinfo(&#39;提示&#39;,&#39;运行成功！&#39;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pve安装openwrl旁路由openclash科学上网</title>
      <link href="/posts/pve%E5%AE%89%E8%A3%85openwrl%E6%97%81%E8%B7%AF%E7%94%B1openclash%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.html"/>
      <url>/posts/pve%E5%AE%89%E8%A3%85openwrl%E6%97%81%E8%B7%AF%E7%94%B1openclash%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.html</url>
      
        <content type="html"><![CDATA[<h1 id="pve安装openwrt"><a href="#pve安装openwrt" class="headerlink" title="pve安装openwrt"></a>pve安装openwrt</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm importdisk &lt;VMID&gt; &lt;img&gt; <span class="built_in">local</span></span><br></pre></td></tr></table></figure><ul><li>开机自启</li><li>不要硬盘</li><li>默认系统</li><li>cpu类别host</li><li>网络e1000</li></ul><h1 id="使用openclash"><a href="#使用openclash" class="headerlink" title="使用openclash"></a>使用openclash</h1><ol><li>插件设置-版本更新-一键更新（本地开启科学）</li><li>配置订阅-自动更新-添加订阅-clash直接添加</li><li>插件设置-模式设计-TUN模式-旁路网关</li><li>插件设置-流量控制-实验性：绕过中国大陆 IP</li><li>插件设置-ipv6-两个全开默认</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> openclash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 换国内源最简方式</title>
      <link href="/posts/Ubuntu%20%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90%E6%9C%80%E7%AE%80%E6%96%B9%E5%BC%8F.html"/>
      <url>/posts/Ubuntu%20%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90%E6%9C%80%E7%AE%80%E6%96%B9%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<p>安装完系统，执行这4句话就行，前提是你自己没有乱改过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/source.list-origin</span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/cn.archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure><p>不区分ubuntu版本，原理显而易见的简单，可以避免因为换错源导致apt整体混乱</p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决端口占用，hyper-v占用动态端口</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<p>常用命令</p><blockquote><p>查找进程<br>netstat -ano|findstr “8080”</p><p>netsh<br>netsh interface ipv4 &lt;show&#x2F;add&#x2F;delete&gt;  </p></blockquote><h1 id="第一种问题（普通端口占用）"><a href="#第一种问题（普通端口占用）" class="headerlink" title="第一种问题（普通端口占用）"></a>第一种问题（普通端口占用）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找进程</span></span><br><span class="line">C:\Users\Administrator&gt;netstat -ano | findstr <span class="string">&quot;8080&quot;</span></span><br><span class="line">  TCP    192.168.1.19:2759      120.232.31.225:8080    ESTABLISHED     20580</span><br><span class="line">  TCP    [2409:8a5c:8224:8af0:95e7:b5f1:3324:35f4]:2761  [2409:8702:4860:100::4]:8080  ESTABLISHED     20580</span><br><span class="line">  TCP    [2409:8a5c:8224:8af0:95e7:b5f1:3324:35f4]:2763  [2409:8c20:818:111::37]:8080  ESTABLISHED     20580</span><br><span class="line">  TCP    [2409:8a5c:8224:8af0:95e7:b5f1:3324:35f4]:2765  [2409:8c54:871:3003::1d]:8080  ESTABLISHED     20580</span><br><span class="line">  TCP    [2409:8a5c:8224:8af0:95e7:b5f1:3324:35f4]:2767  [240e:97c:2f:1003::17]:8080  ESTABLISHED     20580</span><br><span class="line">  TCP    [2409:8a5c:8224:8af0:95e7:b5f1:3324:35f4]:2769  [240e:97c:2f:5::77]:8080  ESTABLISHED     20580</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着结束进程</span></span><br><span class="line">C:\Users\Administrator&gt;taskkill /t /f /im 进程号（ ！！！注意是进程号，不是端口号）</span><br></pre></td></tr></table></figure><h1 id="第二种（动态端口保留）"><a href="#第二种（动态端口保留）" class="headerlink" title="第二种（动态端口保留）"></a>第二种（动态端口保留）</h1><p>首先</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># powershell</span></span><br><span class="line">netstat <span class="literal">-ano</span> | findstr <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure><p>没有结果，意味着并不是有程序占用了端口</p><p>盲猜hyper-v保留了端口</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># powershell </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统默认端口占用访问</span></span><br><span class="line">netsh int ipv4 show dynamicport tcp </span><br><span class="line"></span><br><span class="line">协议 tcp 动态端口范围</span><br><span class="line"><span class="literal">---------------------------------</span></span><br><span class="line">启动端口        : <span class="number">1024</span></span><br><span class="line">端口数          : <span class="number">13977</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看hyper-v启动后的保留端口范围</span></span><br><span class="line">netsh interface ipv4 show excludedportrange protocol=tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line"> </span><br><span class="line">开始端口    结束端口</span><br><span class="line"><span class="literal">----------</span>    <span class="literal">--------</span></span><br><span class="line">      <span class="number">1026</span>        <span class="number">1125</span></span><br><span class="line">      <span class="number">1226</span>        <span class="number">1325</span></span><br><span class="line">      <span class="number">1326</span>        <span class="number">1425</span></span><br><span class="line">      <span class="number">1426</span>        <span class="number">1525</span></span><br><span class="line">      <span class="number">1526</span>        <span class="number">1625</span></span><br><span class="line">      <span class="number">2180</span>        <span class="number">2279</span></span><br><span class="line">... </span><br><span class="line"><span class="comment"># 通过这个可以查看被占用的项目端口是否在这个范围内</span></span><br></pre></td></tr></table></figure><h2 id="解决办法一"><a href="#解决办法一" class="headerlink" title="解决办法一"></a>解决办法一</h2><p>先以管理员身份打开 powershell，然后设置 tcp ipv4 的动态端口范围为 49152 开始的 16384 个端口，也就是 49152~65535</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 set dynamicport tcp start=49152 num=16384</span><br></pre></td></tr></table></figure><p>然后重启电脑。Hyper-V 就会从 49152~65535 范围内保留一部分端口，6942~6991 和 9090 不受影响。</p><p>查看一下此时的动态端口范围：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator&gt; netsh int ipv4 show dynamicport tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 动态端口范围</span><br><span class="line">---------------------------------</span><br><span class="line">启动端口        : 49152</span><br><span class="line">端口数          : 16384</span><br></pre></td></tr></table></figure><h2 id="解决办法二"><a href="#解决办法二" class="headerlink" title="解决办法二"></a>解决办法二</h2><p>先以管理员身份打开 powershell，然后将 7890 等端口设置为排除端口给应用程序（clash）使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 保留 6942~6951 这10个端口给应用程序使用</span><br><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=6942 numberofports=10</span><br><span class="line"># 保留 7890 端口给应用程序使用</span><br><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=7890 numberofports=1</span><br></pre></td></tr></table></figure><p>然后重启电脑。因为 9090 等端口被保留给应用程序使用了，Hyper-V 就无法将 9090 保留给自己使用了。</p><p>查看一下此时被保留的端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator&gt; netsh int ipv4 show excludedport tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line"></span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">      1578        1677</span><br><span class="line">      1678        1777</span><br><span class="line">太多了这里省略...</span><br><span class="line">      7890        7890     *</span><br><span class="line">太多了这里省略...</span><br><span class="line">     11301       11400</span><br><span class="line">     11401       11500</span><br><span class="line">太多了这里省略...</span><br><span class="line"></span><br><span class="line">* - 管理的端口排除。</span><br></pre></td></tr></table></figure><p>带星号的就是被管理员保留的端口，可以被应用程序使用</p><p>如果要取消保留端口，可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 delete excludedportrange protocol=tcp startport=9090 numberofports=1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于WindowsTermial无限闪退的解决办法</title>
      <link href="/posts/%E5%85%B3%E4%BA%8EWindowsTermial%E6%97%A0%E9%99%90%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
      <url>/posts/%E5%85%B3%E4%BA%8EWindowsTermial%E6%97%A0%E9%99%90%E9%97%AA%E9%80%80%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="就是已启动WT就会无限重启"><a href="#就是已启动WT就会无限重启" class="headerlink" title="就是已启动WT就会无限重启"></a>就是已启动WT就会无限重启</h1><p><img src="https://icewolf-li.oss-cn-nanjing.aliyuncs.com/public/20230319044007.png"></p><h3 id="一般是由于已经处于管理员模式的命令行，再次设置了以管理员运行"><a href="#一般是由于已经处于管理员模式的命令行，再次设置了以管理员运行" class="headerlink" title="一般是由于已经处于管理员模式的命令行，再次设置了以管理员运行"></a>一般是由于已经处于管理员模式的命令行，再次设置了<code>以管理员运行</code></h3><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">win+R打开运行</span><br><span class="line">%LOCALAPPDATA%\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState</span><br><span class="line"></span><br><span class="line">进入文件夹</span><br></pre></td></tr></table></figure><p>打开<code>settings.json</code></p><p>找到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;elevate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u547d\u4ee4\u63d0\u793a\u7b26&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>把<code>elevate</code>改为<code>false</code>，即关闭管理员权限（实际上cmd本身就已经是管理员模式运行了）</p><p>实在不行就全文替换</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$help&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://aka.ms/terminal-documentation&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> </span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> </span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;singleLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+c&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;paste&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+v&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;find&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+shift+f&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> </span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;splitPane&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;split&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;splitMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duplicate&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+d&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> </span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;elevate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> </span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows PowerShell&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;elevate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u547d\u4ee4\u63d0\u793a\u7b26&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Azure Cloud Shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span><span class="punctuation">:</span> </span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0C0C0C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0C0C0C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0037DA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#767676&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3B78FF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#61D6D6&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#16C60C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B4009E&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E74856&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F2F2F2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F9F1A5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3A96DD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CCCCCC&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#13A10E&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Campbell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#881798&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C50F1F&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CCCCCC&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C19C00&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#012456&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0C0C0C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0037DA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#767676&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3B78FF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#61D6D6&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#16C60C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B4009E&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E74856&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F2F2F2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F9F1A5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3A96DD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CCCCCC&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#13A10E&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Campbell Powershell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#881798&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C50F1F&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CCCCCC&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C19C00&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#282C34&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#282C34&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#61AFEF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#5A6374&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#61AFEF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#56B6C2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#98C379&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C678DD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E06C75&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DCDFE4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E5C07B&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#56B6C2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DCDFE4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#98C379&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;One Half Dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C678DD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E06C75&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DCDFE4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E5C07B&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FAFAFA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#383A42&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0184BC&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#4F525D&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#61AFEF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#56B5C1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#98C379&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C577DD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DF6C75&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E4C07A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#4F525D&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0997B3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#383A42&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#50A14F&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;One Half Light&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A626A4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E45649&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FAFAFA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C18301&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#002B36&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#002B36&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#268BD2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#073642&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#839496&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#93A1A1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#586E75&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6C71C4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CB4B16&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FDF6E3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#657B83&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#2AA198&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#839496&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#859900&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Solarized Dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D33682&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DC322F&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EEE8D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B58900&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FDF6E3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#002B36&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#268BD2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#073642&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#839496&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#93A1A1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#586E75&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6C71C4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CB4B16&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FDF6E3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#657B83&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#002B36&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#2AA198&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#657B83&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#859900&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Solarized Light&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D33682&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DC322F&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EEE8D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B58900&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3465A4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#555753&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#729FCF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#34E2E2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#8AE234&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#AD7FA8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EF2929&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EEEEEC&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FCE94F&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#06989A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D3D7CF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#4E9A06&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tango Dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#75507B&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CC0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D3D7CF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C4A000&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3465A4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#555753&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#729FCF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#34E2E2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#8AE234&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#AD7FA8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EF2929&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EEEEEC&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FCE94F&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#06989A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#555753&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#4E9A06&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tango Light&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#75507B&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CC0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D3D7CF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C4A000&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000080&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#808080&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0000FF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00FFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00FF00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FF00FF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FF0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFF00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#008080&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C0C0C0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#008000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Vintage&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#800080&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#800000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C0C0C0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#808000&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;themes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>miui免 ROOT 隐藏状态栏 NFC闹钟等图标</title>
      <link href="/posts/miui%E5%85%8D-ROOT-%E9%9A%90%E8%97%8F%E7%8A%B6%E6%80%81%E6%A0%8F-NFC%E9%97%B9%E9%92%9F%E7%AD%89%E5%9B%BE%E6%A0%87.html"/>
      <url>/posts/miui%E5%85%8D-ROOT-%E9%9A%90%E8%97%8F%E7%8A%B6%E6%80%81%E6%A0%8F-NFC%E9%97%B9%E9%92%9F%E7%AD%89%E5%9B%BE%E6%A0%87.html</url>
      
        <content type="html"><![CDATA[<p>因为最新的 MIUI 测试版 &#x2F;其它部分 UI 会始终显示 NFC 图标，所以写一下这个图标如何隐藏。</p><div class="note primary simple"><p><strong>准备工作</strong><br>1.USB 数据线<br>2.电脑端 adb<br>3.手机打开 USB 调试，部分设备需要打开USB 调试（安全模式） 一般会在 USB 调试开关的下方</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>adb shell settings put secure icon_blacklist nfc</p></div><p><strong>nfc</strong>可以替换成以下的内容，多个用<code>,</code>分割。</p><table><thead><tr><th>图标</th><th>图标描述</th></tr></thead><tbody><tr><td>volume</td><td>静音 &#x2F;震动图标</td></tr><tr><td>location</td><td>定位图标</td></tr><tr><td>speakerphone</td><td>麦克风使用中图标</td></tr><tr><td>wifi</td><td>wifi</td></tr><tr><td>hotspot</td><td>热点</td></tr><tr><td>alarm_clock</td><td>闹钟</td></tr><tr><td>bluetooth</td><td>蓝牙</td></tr><tr><td>airplane</td><td>飞行模式</td></tr><tr><td>headphone</td><td>耳机</td></tr><tr><td>cast</td><td>录屏状态</td></tr><tr><td>nfc</td><td>nfc</td></tr></tbody></table><p>如果需要恢复，需要使用：</p><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>adb shell settings put secure icon_blacklist null</p></div><br/><div class="note warning modern"><p>注意一：上面这条命令会一次性恢复所有图标</p><p>注意二：如果你需要屏蔽多个图标，那么你需要使用英文逗号“,”将图标名称隔离开来，一次性输入。</p></div>]]></content>
      
      
      <categories>
          
          <category> 手机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> miui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java静态方法和非静态方法的区别</title>
      <link href="/posts/java%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%9E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
      <url>/posts/java%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%9E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java的方法主要分三类"><a href="#Java的方法主要分三类" class="headerlink" title="Java的方法主要分三类"></a>Java的方法主要分三类</h1><p>1.构造方法<br>2.非静态方法（普通方法&#x2F;实例方法）<br>3.静态方法（类方法）</p><h2 id="静态方法和非静态方法的区别（调用对象、引用变量不同）"><a href="#静态方法和非静态方法的区别（调用对象、引用变量不同）" class="headerlink" title="静态方法和非静态方法的区别（调用对象、引用变量不同）"></a>静态方法和非静态方法的区别（调用对象、引用变量不同）</h2><p>静态方法：使用static关键字修饰的方法,如下图<span class="hide-inline"><button type="button" class="hide-button" style="background-color: blue;color: white">点击查看  </button><span class="hide-content">借用了菜鸟教程</span></span><br><img src="https://www.runoob.com/wp-content/uploads/2013/12/D53C92B3-9643-4871-8A72-33D491299653.jpg"></p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法属于<strong>类</strong>，就是说可以直接通过<strong>类名.方法名</strong>调用的方法（静态属性也可以通过类名调用）</p><div class="note success simple"><p><strong>可以</strong>：调用<strong>静态方法</strong>,引用<strong>类变量</strong>（即，static修饰的变量）。</p></div><div class="note danger simple"><p><strong>不可以</strong>：调用<strong>非静态方法</strong>，引用<strong>类变量</strong>，使用<code>super</code>和<code>this</code>关键字</p></div><h3 id="非静态方法"><a href="#非静态方法" class="headerlink" title="非静态方法"></a>非静态方法</h3><p>方法属于<strong>对象</strong>，必须new一个对象出来，再通过对象调用<br>比如Scanner的nextLine方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">scanner.nextLine();</span><br></pre></td></tr></table></figure><div class="note success simple"><p><strong>可以</strong>：调用<strong>静态方法</strong>&#x2F;<strong>普通方法</strong>，引用类变量和成员变量，使用<code>super</code>和<code>this</code>关键字。</p></div><h2 id="调用区别"><a href="#调用区别" class="headerlink" title="调用区别"></a>调用区别</h2><p>静态方法可以直接调用，类名调用和对象调用。（<strong>类名.方法名</strong> &#x2F; <strong>对象名.方法名</strong>）<br>但是非静态方法只能通过对象调用。（<strong>对象名.方法名</strong>）</p><h2 id="静态变量的好处"><a href="#静态变量的好处" class="headerlink" title="静态变量的好处"></a>静态变量的好处</h2><div class="note green icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>1.属于类级别的，不需要创建对象就可以直接使用.<br>2.全局唯一，内存中唯一，静态变量可以唯一标识某些状态.<br>3.在类加载时候初始化，常驻在内存中，调用快捷方便.</p><p>应用场景：<br>1.静态方法最适合工具类中方法的定义；比如文件操作，日期处理方法等.<br>2.静态方法适合入口方法的定义；如单例模式，因为从外部拿不到构造函数，所有定义一个静态的方法获取对象非常有必要.<br>3.静态变量适合全局变量的定义.（如布尔型静态成员变量做控制符）</p></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10去除资源管理器导航窗格多余的文件夹（3D对象、桌面、图片等）</title>
      <link href="/posts/Win10%E5%8E%BB%E9%99%A4%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E5%AF%BC%E8%88%AA%E7%AA%97%E6%A0%BC%E5%A4%9A%E4%BD%99%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%883D%E5%AF%B9%E8%B1%A1%E3%80%81%E6%A1%8C%E9%9D%A2%E3%80%81%E5%9B%BE%E7%89%87%E7%AD%89%EF%BC%89.html"/>
      <url>/posts/Win10%E5%8E%BB%E9%99%A4%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E5%AF%BC%E8%88%AA%E7%AA%97%E6%A0%BC%E5%A4%9A%E4%BD%99%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%883D%E5%AF%B9%E8%B1%A1%E3%80%81%E6%A1%8C%E9%9D%A2%E3%80%81%E5%9B%BE%E7%89%87%E7%AD%89%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<p><strong>Windows资源管理器</strong>导航窗口中的3D对象，视频，图片这些文件夹基本用不到，占着位置很是烦人，删掉还原清爽。.<br><img src="https://img-blog.csdnimg.cn/img_convert/af81b7c950931cbb62b4ad40b6d6a583.png#pic_center"></p><h1 id="一-快速访问栏的去除"><a href="#一-快速访问栏的去除" class="headerlink" title="一. 快速访问栏的去除"></a>一. 快速访问栏的去除</h1><p>右击 -&gt; 从“快速访问”取消固定。<br><img src="https://img-blog.csdnimg.cn/img_convert/96ae3359e4acf73af689136ad74e3e36.png#pic_center"></p><h1 id="二-此电脑的去除"><a href="#二-此电脑的去除" class="headerlink" title="二. 此电脑的去除"></a>二. 此电脑的去除</h1><p>Win + R，输入regedit，打开注册表编辑器<br><img src="https://img-blog.csdnimg.cn/img_convert/f073aea5b6d334985187fb67a92b7d7f.png#pic_center"><br>跳转到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/25b3df9da0bc5892fa0e3c9314b11bb1.png#pic_center"></p><table><thead><tr><th align="center">文件夹</th><th align="center">注册表中对应项</th></tr></thead><tbody><tr><td align="center">3D对象</td><td align="center">{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}</td></tr><tr><td align="center">视频</td><td align="center">{f86fa3ab-70d2-4fc7-9c99-fcbf05467f3a}</td></tr><tr><td align="center">图片</td><td align="center">{24ad3ad4-a569-4530-98e1-ab02f9417aa8}</td></tr><tr><td align="center">文档</td><td align="center">{d3162b92-9365-467a-956b-92703aca08af}</td></tr><tr><td align="center">下载</td><td align="center">{088e3905-0323-4b02-9826-5d99428e115f}</td></tr><tr><td align="center">音乐</td><td align="center">{3dfdf296-dbec-4fb4-81d1-6a3438bcf4de}</td></tr><tr><td align="center">桌面</td><td align="center">{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}</td></tr></tbody></table><p>想删哪个将注册表中对应项删除即可。</p><p>更快捷的方式，新建txt，将下面代码复制过去，改后缀名为reg，双击运行。提示注册表更改成功即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">; 删除导航窗格对应文件夹，-表示删除注册表项，不写-表示增加注册表项</span><br><span class="line"></span><br><span class="line">; 删除3D对象</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;]</span><br><span class="line"></span><br><span class="line">; 删除视频</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;f86fa3ab-70d2-4fc7-9c99-fcbf05467f3a&#125;]</span><br><span class="line"></span><br><span class="line">; 删除图片</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;24ad3ad4-a569-4530-98e1-ab02f9417aa8&#125;]</span><br><span class="line"></span><br><span class="line">; 删除文档</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;d3162b92-9365-467a-956b-92703aca08af&#125;]</span><br><span class="line"></span><br><span class="line">; 删除下载</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;088e3905-0323-4b02-9826-5d99428e115f&#125;]</span><br><span class="line"></span><br><span class="line">; 删除音乐</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;3dfdf296-dbec-4fb4-81d1-6a3438bcf4de&#125;]</span><br><span class="line"></span><br><span class="line">; 删除桌面</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三-最终效果"><a href="#三-最终效果" class="headerlink" title="三. 最终效果"></a>三. 最终效果</h1><p>打开我的电脑，显示如下：<br><img src="https://img-blog.csdnimg.cn/img_convert/29747231f8013c06e22804fd351a1fb7.png#pic_center"><br>另存为窗口也没有3D对象，下载这些文件夹了。<br><img src="https://img-blog.csdnimg.cn/img_convert/e9db526e8be33e7fc211f11d4c1bc886.png#pic_center"><br>清爽多了，舒服。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mklink教程</title>
      <link href="/posts/mklink%E6%95%99%E7%A8%8B.html"/>
      <url>/posts/mklink%E6%95%99%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<p><strong>mklink 命令是 Windows 自带的命令</strong>，除了在 Win10 系统下使用，在比较早的系统比如 Win 7、Win Vista、Win 8 和 Win 8.1 也都是可以使用的。不过在除了 Win 10 之外的系统里使用，是必须使用管理员权限的，否则会提示“你没有足够的权限执行此操作。”，当然经过我验证，Win 10 有时候也是需要管理员权限的。</p><p>既然是 Windows 自带的命令，我们打开命令行，看看这个官方给的这个命令的用法是什么，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /?</span><br></pre></td></tr></table></figure><p>这时候，系统会给出 <strong>mklink 命令的帮助</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建符号链接。</span><br><span class="line">MKLINK [[/D] | [/H] | [/J]] Link Target</span><br><span class="line">        /D        创建目录符号链接。默认为文件符号链接。</span><br><span class="line">        /H        创建硬链接而非符号链接。</span><br><span class="line">        /J        创建目录联接。</span><br><span class="line">        Link      指定新的符号链接名称。</span><br><span class="line">        Target    指定新链接引用的路径(相对或绝对)。</span><br></pre></td></tr></table></figure><br/><br/><hr><br/><p>上面这个帮助内容，看着是不是也不是特别明白，我举个案例就明白了。为了方便我举例，所以我在D盘在 Simple 文件夹下面建了两个文件夹，分别是 Link 文件夹和 Target 文件夹。</p><p><img src="https://img.icoa.cn/20200319/15845962479962340.png"></p><ol><li><p>创建文件符号链接：什么参数都不带，就是默认创建文件符号链接。使用这个命令是需要管理员权限的，方法就是在【命令提示符】上点右键，选择【以管理员身份运行】。<br><img src="https://img.icoa.cn/20171007/15073439819283796.png"></p><p>然后输入下面命令，回车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink d:\Simple\Link\text.txt d:\Simple\Target\text.txt</span><br></pre></td></tr></table></figure><p><img src="https://img.icoa.cn/20200319/15845966697522001.png"></p><p>这时候，我们打开 Link 文件夹，就会发现下面出现了一个类似于快捷方式的文件：</p><p><img src="https://img.icoa.cn/20200319/15845967675753477.png"></p><p>但是这个 text.txt 并不是快捷方式，是一个符号链接，我们可以在 Link 文件夹下面正常打开和使用，但是实际上这个文件是存储在 Target 文件夹下的。</p><p>这样相当于两个不同的文件夹下面出现了两个相同的文件，对这两个文件编辑哪个都会同时改变。</p><hr></li><li><p><strong>带 &#x2F;D 参数，创建目录符号链接</strong>。同样这个也是需要管理员权限的命令行，输入下面命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /d d:\Simple\Link\Target d:\Simple\Target</span><br></pre></td></tr></table></figure><p><img src="https://img.icoa.cn/20200319/15845971128243391.png"></p></li></ol><p>这时候我们会发现 Link 文件夹下面多了一个文件夹图标的文件：</p><p>   <img src="https://img.icoa.cn/20200319/15845971792477903.png"><br>同样这个也不是快捷方式，相当于一个虚拟的文件夹，而这个文件夹真正存储位置是 d:\Simple\Target，同样可以正常在 Link\Target 目录下进行存储文件不占用这个文件夹的空间。</p><p>   我们打开新的 Target 文件夹，就会发现，地址栏跟标题栏的路径是不一样的，标题栏的是真实路径，而地址栏的是虚拟路径：<br><img src="https://img.icoa.cn/20200319/15845974592297315.png"></p><br/><hr><ol start="3"><li><p><strong>带 &#x2F;J 参数，创建目录联接</strong>。之所以第三个介绍这个，是因为这个命令跟第2个命令非常相似，而且这个命令无需管理员权限。<strong>双向同步</strong>迁移文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /j d:\simple\link\new d:\simple\target</span><br></pre></td></tr></table></figure><p><img src="https://img.icoa.cn/20200319/15845979662655744.png"></p><p>这时候 Link 文件夹下面出现了一个带快捷方式角标的 new 文件夹：</p><p><img src="https://img.icoa.cn/20200319/15845980565450666.png"></p><p>然后我们打开 new，发现标题栏跟地址栏是一样的，好像这个 new 文件夹就存在这里一样，这个跟 &#x2F;d 是不一样的：</p><p><img src="https://img.icoa.cn/20200319/15845981161022077.png"></p></li></ol><p>实际上这个 new 文件夹依然是存储在原来的 d:\simple\target 的位置。</p><p>   我就是用这个方便帮那位网友把 iTunes 备份文件夹转移到了 D 盘。</p><p>   上面的三个命令还都有快捷方式角标，下面这个命令结果你会发现不一样了：</p><br/><br/><hr><ol start="4"><li>**带 &#x2F;H 参数，创建硬链接。**经过测试硬链接依然不需要管理员权限：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /h d:\Simple\Link\new.txt d:\Simple\Target\text.txt</span><br></pre></td></tr></table></figure><img src="https://img.icoa.cn/20200319/15845986348726515.png"></li></ol><p>然后出现的结果是这样的，看起来这就是一个文件，没有快捷方式角标：<br><img src="https://img.icoa.cn/20200319/15845986772740751.png"><br>我们修改 new.txt，会发现原来的 text.txt 里的内容同样改变了。也就是这实际上是同一个文件。</p><p>   那么我们能不能创建硬链接的目录呢？</p><p>   经过测试，并不行</p><br/><br/><hr><p>相信通过我的演示，应该明白了 mklink 命令的使用方法了吧。我们既可以把文件“虚拟”到别的目录甚至分区，也可以把文件夹虚拟到别的地方。这个命令还是非常有用的，特别是C盘空间不足的时候，有一些默认存储在C盘的文件夹或者文件就可以转移到D盘等其他空间比较大的分区，同时在C盘相应路径“虚拟”一个文件或者文件夹。</p><p>不过，注意，并不是C盘所有文件夹都可以这么处理，特别是系统文件夹，有时候会容易出现错误，一定要慎用。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
